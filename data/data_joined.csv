"","course_ids","created","id","professor_ids","review_text","workload_text","department_ids","name","number"
"1","1616","Thu, 30 Oct 2014 19:51:46 GMT","41449","1474","The class moves pretty slowly for a 4000 level CS class and covers the qualitative components of Computer Science (planning, group dynamics, etc). Don't let the name fool you, there is nothing ""advanced"" about this course. It is interesting that we get to work on a project of our choosing over the course of the semester, but the amount of documentation we have to provide beforehand is a little infuriating. You end up spending 3x more time writing out requirements, risk, etc than writing code. 

You will probably have to take this class because it is required for Software Systems, and let me say that this is not a ""bad"" class. You still learn concepts like design patterns, but ultimately you will learn MUCH more if you take a class like Operating Systems or Computer Networks. ","Medium (bunch of periodic group assignments that don't take too long)","7","Advanced Software Engineering","COMS W4156"
"2","1616","Wed, 22 Jan 2003 00:00:00 GMT","4560","1474","Professor Kaiser is interested in her material and works hard at getting it across to her students.  The only thing is that she isn't the best at instructing students how to code within the complex component frameworks introduced in this course.  However, teams of students have freedom to choose a project of their liking, which is definitely preferred over a forced project such as Robot Wars or some ridiculous role playing game with clients, servers, and bots.  With the freedom to choose a project comes the desire to code the project.  Gail follows up with the teams throughout the semester, giving feedback and ensuring that the students pick up on the material, and I've been more enthusiastic about this class than I had been with others within the CompSci department.  Don't be afraid of her first class when she tries to scare you off; you'll learn a lot, you'll learn how to document the software-development process, and if you work at your project, you'll walk out of the class knowing a great deal.","Team project with three iterations, as well as a take home midterm and take home final, both about the project's development and concepts discussed in class (and mentioned in the book)","7","Advanced Software Engineering","COMS W4156"
"3","1616","Thu, 23 Dec 2010 19:24:19 GMT","25162","1474","I would not recommend this course unless a) you really want to be a software engineer and have no prior experience or b) absolutely need it to graduate.  It's mostly busywork and stuff that you can learn in a decent summer internship at a software company (if you want to go into software).

That being said, Gail is a wonderful person, and is very kind and understanding.  However, her lectures tend to be very dry and not very helpful, and the course materials aren't any better.  The course skims over component model frameworks, software testing and various software quality assurance techniques, but doesn't really go deep enough to make things useful.  Most of these topics are covered briefly in lecture, and then exercised in a group project where they become a passing thought when completing your documentation.  By the end, you'll learn that you should do 'xx' and 'yy' if you're working in the software industry on a big project, but will be unsure as to what exactly qualifies as 'xx' or 'yy'. 
","Take home midterm and final, three easy homeworks in the beginning of the semester, and one semester long group project.  The group project is very hit or miss depending on your group (I chose poorly).  Oh and five to six pop quizzes that really just check if you're sitting in lecture and still awake (it's hard sometimes...).","7","Advanced Software Engineering","COMS W4156"
"4","1616","Thu, 06 Nov 2014 15:42:09 GMT","45002","1474","Overall, I recommend not taking this course.

The ideas behind this course are simple: think in terms of the customer and plan your project accordingly. Unfortunately, a lot of the documentation we do is not really meaningful, and the pace of the class could be faster. We spend several weeks on design patterns, and another several weeks on ""bug testing"", which is stuff you pretty much already know. 

If you want to challenge yourself on your road to becoming a fully-fledged Computer Scientist, don't take this class. If you are looking for an easy course to take on the side, while knocking out your tech electives, you might consider ASE. This class is not really ""Advanced Software Engineering"", it should be called ""Software Project Planning for Enterprise"". 

The midterm reflected the course. It was pretty easy, with just definitions and written explanations of concepts. But at the end of the day, how much did you learn compared to a class like OS or Algorithms?","Bi-weekly assignments for the first two months with documentation for your project and other scenarios
Semester project using a web framework (Django, Rails, etc.)","7","Advanced Software Engineering","COMS W4156"
"5","1616","Thu, 12 Dec 2013 04:59:57 GMT","28841","1474","I recommend _not_ taking this course. 70% of the work is document writing, drawing graphs, and typing stuff into JIRA, not difficult, but very tedious and boring. You do surprisingly little coding, which is ironic for a ""software engineering"" course. Writing ""cool"" software won't score you more points in the class. If you absolutely must take this course, do not be ambitious about the projected you will create. You won't receive extra points because your project is ""cool"" or ""harder."" Most of your grade hangs on the writing/documentation you do -- and you will spend more time on this than anyone would want to. So make your software easy to document and easy to test. You really only spend a month or two working on it, the rest is over-excessive planning you don't end up following anyway.

The midterm and final will have you writing so much stuff! The first of the three questions test you on vocabulary (!) terms from the lectures/book. The second one is short answers. The last one asks you to come up with designs for proposed software and ask you to write more than what most people can do in the given time. If you take this course, do the test backwards. Almost everything in the course is pedestrian stuff you know already: unit tests, version control, software testing, etc. The other stuff you might not have heard of, UML diagrams, burn-down charts, and spike testing, etc, are not complicated at all, and can easily be learned from the textbook. (http://www.amazon.com/Head-First-Software-Development-Pilone/dp/0596527357). In undergrad, I went to a much less prestigious school than Columbia, and I never had a course this boring, simple, and tedious. I was really in for a surprise.

The redeeming feature of the course is that the teacher an the TAs (the one's we had) were all nice people. (not necessarily easy graders though!) The textbook is actually read from cover to cover and is actually affordable. However, you shouldn't take a course just because the textbook is cheap and the teacher is nice.

I was initially attracted to this course because I thought I would spend most of the time coding a cool project. I ignored the negative reviews. I regret it. Don't make the same mistake.","Complexity is extremely easy, but the tediousness of it made the workload medium.","7","Advanced Software Engineering","COMS W4156"
"6","1921","Sun, 11 May 2014 21:31:54 GMT","29449","4057","If you find Itshack Pe'er teaching Machine Learning, avoid it, unless you know most concepts of ML in advance. 

Weekly assignments wasted most students hours and hours without any progress. The wording of assignment was very vague. To make situation worse the TAs were constantly unresponsive so you can't get clarification in time (and after the midterm they closed Piazza). 
The two quizzes, contained T/F questions, suffered same vagueness. 
The midterm question is interesting and good. although the grading of midterm is not very fair. it was OK. 
I have not taken the final exam yet, but the mock final seemed completely different to assignments and quizzes, to the extend that you might think it was for another course. ","weekly assignment (not easy!) + 2 quizzes (with 1 page cheat sheet) + 1 final + 1 mid","7","Machine Learning","COMS W4771"
"7","1921","Sun, 22 Jun 2014 02:09:32 GMT","29645","4057","Pros: I thought the assignments were good, but super time consuming and there was one every week, that will squeeze all the time out of you, but in a way you learn.

Midterm fair and final was ok. Grading was reasonable.

Cons:
The worst classroom delivery I have ever seen in my entire life including school anywhere. Machine learning is no doubt fascinating but does require some foundation, but his classroom delivery is some of the worst I have ever seen, stammering, stuttering, is ok for CS 101, in a community college but totally unacceptable for a graduate level course in such a esteemed institution where the pay for professors is high and the fees are exorbitant.

On top of his inaudible and cringe inducing voice the material is complex but no doubt interesting. Professor needs to desperately address this and take a look at videos of himself on how to improve for future classes or otherwise just stay a researcher and not lecture.

Just look at the how well Andrew Ng did his course in Coursera on Machine Learning.

Because of the above it felt a waste of the money we spend on course here. I think Jebara would be much better, understandable and you would feel your moneys worth.

But if you can bear and listen to him maybe the course is made for you.
","Pretty tough but fair I thought for the scope of this course.","7","Machine Learning","COMS W4771"
"8","1921","Thu, 22 May 2014 00:32:05 GMT","29522","4057","Prof. Pe'er is really well-intentioned, and it's clear that he cares a lot about his students. I took a lot away from this class, even though it was a struggle. That said, DO NOT take this class if you're not remotely interested in machine learning - it's _not_ worth it. There are several other breadth/AI track courses that are (possibly) more interesting. If you _are_ interested in the subject, however, I'd definitely recommend taking this class with him instead of with Prof. Jebara. 

1) Teaching: If you have trouble staying awake in classes where professors speak really slowly/if you've ever been in one of the Mudd classrooms and know how boring they are, BRING COFFEE/TEA/anything that keeps you awake. Prof. Pe'er speaks really slowly, so much so that when you play his lectures at 1.5x speeds (they're all on CVN, which is great), it sounds like most people speaking at a normal pace. 
2) The material: While the class is very math-heavy (as are most courses on machine learning), Prof. Pe'er is very generous with his use of examples to provide better intuitions for the concepts/algorithms covered, and even tries to do live demonstrations to help make the math clearer. Some lectures and topics have a very steep learning curve even if you have the prerequisites covered, but I learned a tremendous amount from this class and I don't think I would have gotten that much from Prof. Jebara's far more theoretical approach. 
3) Homework: The homework is time consuming, not because each individual assignment is long, but because there are assignments EVERY WEEK. The assignments are hard, so starting in advance is essential (which means you're usually working on ML assignments 4 days a week at least), and responses on Piazza from the TAs are erratic and come in waves, so they're not reliable. Prof. Pe'er does allow group work with some constraints, so that usually makes working on assignments easier. But START EARLY. The assignments are also usually vaguely worded, which was a pain to deal with.
4) The tests: This was the most confusing part of the class. I think Prof. Pe'er experimented with a lot of testing styles because it was his first time teaching this class. (Either that, or he always throws 4 different testing styles at his students in all his other classes too because he thinks it builds character.) 
- Quizzes: multiple choice, where any number of choices could be true or false, and you lost points for either answering wrong or not answering at all. (So really, you had a 50% chance of getting it right anyway..) The questions on the quiz were theoretical and just requierd you to know the concepts, and some involved doing some basic calculations/inferences.
- Midterm: Easily the best test in this class. It was take-home and entirely programming, with 50% of the grade going towards an explanation of your approach. I think the grading was pretty fair - you got graded on the performance of your approach for the programming part, and the quality of your approach for the explanation. Very straightforward and doable in the 4 day timeframe given.
- Final: This came out of nowhere - the questions on the final ranged from proofs to algorithm creation to calculations - basically a very, very difficult exam. He gave us a practice final that, as it turned out, exactly resembled the actual final, but it still gave us no way to prepare, given that all the testing methods we'd had before were so different. It was almost impossibly long (though challenging and very interesting, required you to actually apply knowledge to real-world problems).

5) The curve: VERY generous curve. Another reason to definitely take this class with him and not Prof. Jebara. I think he really recognizes how hard he makes the class (in terms of workload, learning curve, difficulty of final) and curves to a high-ish B+. A large percentage of the class got A-range grades. 

Again, this is a professor who really cares about his students and the effort they put in, and isn't just looking to make this class frustrating and impossible. In general, he's very very responsive to feedback, even takes reasonable requests for class-wide extensions, and always tries really hard to make sure ever single student understands. I haven't had many 4000-level classes where that's the case, so this was refreshing. The class is still extremely frustrating, but ultimately rewarding if you like the material and put a lot of effort into the work.","Homework: 10 assignments (1 really simple setup assignment which includes a small Matlab script), 1 per week, all in Matlab  (25%)
Midterm: Programming with an explanation of approach (25%)
Quizzes: Two (a few weeks before and after the midterm) - multiple choice with any number of true/false options, theoretical (20% total)
Final: Impossibly long and very challenging final with lots of application- and theory- based questions. (30%)","7","Machine Learning","COMS W4771"
"9","1921","Tue, 27 May 2014 16:42:24 GMT","29586","4057","Machine Learning by Prof. Pe'er was an excellent class. The course was well structured, however the course load was pretty heavy. Nonetheless, the assignments and mid-term made you learn a lot. 

cons :-
1. The problem explanation in the assignments were vague at times. The TA's were irresponsive most of the times, thus most of the times went struggling with the problem statements.
2. It was difficult to follow prof in class, but hey, the lectures were recorded on CVN!

pros :-
1. The prof was very approachable and cared for his class.
2. He atleast tried to make sure that everyone gets the concepts right.

In a gist, i'd recommend this class to anyone who wants to learn machine learning in a way such that the intuition and math behind the concepts is both clear.
","~12 assignments(weekly) + 2 quizzes + midterm(take home, was sheer fun) + final(impossible)","7","Machine Learning","COMS W4771"
"10","1921","Tue, 03 Jun 2014 18:42:58 GMT","29610","4057","Machine Learning is a fascinating subject and is clearly a very valuable subject to know about. However, our class was very unfortunate to have been taught by Professor Pe'er. He is by far the worst professor I've ever had in my academic experience. To add insult to injury, he is very unapologetic about the way he manages things and treats his students unfairly. 

Assignments:
Every assignment included grammatical errors and unintelligible sentences in addition to mistakes in the problem descriptions. As a result, 1-2 day assignment would turn into a week-long affair. Future assignments are also based on answers to previous ones even though the class was not given the solution to the previous assignment. As a result, students who might have had incorrect answers in the previous assignment would unknowingly have errors in the next assignment.

Misinformation:
Professor Pe'er likes to portray himself as a fair individual but time and time again did he prove us wrong. Our first quiz was multiple choice test where correct answers were given 3 points and incorrect negative 2. However, the class was not told that leaving answers blank would result in negative marks too. Another example of this kind of behavior was demonstrated when he ran a poll to decide whether assignments should be due on a Friday or Wednesday. >80% of students who voted, voted for Friday yet the Professor appeared to have conveniently forgotten to tell the class that over 60% of the entire class needed to participate in the poll for it to be deemed valid. Something he decided to tell us after the fact. 

Sadly there are many more examples of this kind of behavior which is simply unprofessional. 

I can't speak to how Prof Jebara might teach this class and whether it's any better. But my main advice would be to stay away from Prof Pe'er, simply because you'll waste more time clearing up any confusions than being able to dedicate time to the actual subject.

 ","Weekly assignments - mostly time-consuming due to the fact that they had mistakes in them
2 Quizzes
Take home mid-term
In-class final ","7","Machine Learning","COMS W4771"
"11","234","Tue, 17 Dec 2013 22:51:31 GMT","28887","2941","CS Theory as taught by Yannakakis is a good class -- it achieves everything you basically expect a class to, though it isn't outstanding in any particular regard. 

For almost the entire semester Yannakakis follows the textbook (""Introduction to Automata Theory, Languages, and Computation""), and it pays to read the text ahead of time. The book is light on theory and heavy on examples, and you could probably get away with not going to class for the first 10 weeks or so until Turing Machine reductions start to be explained, because the book's explanations until then are always thorough enough. Lecture clarifies and sometimes expands a bit on the book, but not in any fundamental way, e.g. there might be a slower and a faster way to implement a given algorithm, and the book gives the slower one while Yannakakis will show the faster one in class. Once you get into Turing Machines, going to lecture is pretty important. The book sucks on reductions.

As a lecturer Yannakakis isn't exciting (it didn't help that this semester's room was poorly lit and had amphitheater style seating -- quite conducive to dozing off) but he is usually quite effective at going through examples clearly. He's been doing this for long enough to know which points people get confused about, and he makes sure to hammer those home. The only times I was truly lost in class were on a handful of particularly weird proofs that he demonstrated purely to make a point; they never came up on homework or exams.

Yannakakis is (as those of you who've Googled him will know), a pretty big name in the field with a prize or two to his name. There aren't many opportunities in CS Theory for him to show off his brilliance, but he is clearly in total command of the material in a way that not all professors always are. He virtually never makes mistakes on the blackboard (he's usually working from his lecture slides, which are excellent and available on CourseWorks), and will occasionally respond to a seemingly narrow question by tying it to much broader questions and answering those, too.","1 midterm, 1 final, 30% each. 6 homeworks, 40%, partly written, partly through an online service called Gradiance. The grading was usually pretty fair. One TA graded all problem 1's, a different one graded all problem 2's, etc.

The midterm and final are both pretty manageable if you go over the lecture slides and homework. No proofs, though there are occasionally slightly sneaky questions. Just know your conversion algorithms (e.g. regular expression to epsilon NFA) and their runtimes, as well as your language closure properties (and constructions for those properties) and you'll be about 90% ready.

The homework is 2-3 hours work each if you do the reading first, and Gradiance is perhaps half an hour. Gradiance allows unlimited retakes, which is pretty neat, though you have to wait 10 minutes between attempts. If you have a lot of time to burn, you can just retake Gradiance often enough to solve all the questions by process of elimination (there's a fairly small pool of answers, so after about 90 minutes you've seen them all).","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"12","234","Tue, 24 Dec 2013 14:51:17 GMT","28958","2941","Computer science theory with Professor Yannakakis is a pretty good class; definitely one of the better classes Ive taken in the computer science department.  There was nothing exceptional about it, but the fact that there was nothing strikingly wrong with it puts it well ahead of most other CS classes Ive taken. 

The professor wrote excellent lecture notes which he posted online, and followed them closely during lectures.  He also handled questions from the class very well, and it was clear that no question ever came close to phasing him.  His progression through the material was both organized and logical.  If I had any criticism, it would be that we went rather slowly through details of proofs and constructions that didnt seem very fundamental to the course, and we couldve gone through a bit more material if some of this was streamlined.  

The assignments for the course were very reasonable in scope and they did a good job enforcing the important points for each topic.  It seemed that he actually chose the problems based on what he covered in lecture and thought was important.  They were assigned and due every 2 weeks, and each consisted of four problems of varying difficulty.  Solutions to these were posted after they were handed in, and graded problem sets were returned a week after completion.

The exam were also pretty fair.  Some problems were more difficult than others, but nothing too ridiculous.  Both exams were during the 75 minute class period, so the scope of the problems was not very large.  The median on the midterm was 73 and the median on the final was 63.  ","40% Problem Sets, of which there were 6
30% Midterm - median 73 standard derivation 15
30% Final - median 63 standard derivation 15","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"13","234","Tue, 15 May 2007 00:00:00 GMT","19954","1621","Hell if I know. I never went.

The website says ""CS Theory is the last course required of all CS undergrads"", but it should probably be more like ""CS theory is the last course of the day, don't bother."" The topics mostly overlap with other courses (data structures) -- if you stay at home and read up on regexps and such, you'll be completely fine. The homeworks are basically perfect reflections of what you're accountable for, so if you can do them you're set.

I'm not really complaining about Tal, she's pretty OK. At the end of the day, it's just another CS course repeating the same damn curriculum.","Ten homeworks (good for maybe an hour of work each, if you do the reading). Midterm and final with cheat sheets. Overall, pretty light.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"14","234","Thu, 07 Aug 2003 00:00:00 GMT","6180","1621","Prof. Malkin is one of the is the best professors I have had in the CS department.  She's brilliant, but can explain topics clearly and doesn't make you feel like a moron.

Go to class because the homework and test questions are based on her lectures.  She's very friendly and approachable.  However, don't even try to BS her.  She will not give out last minute extensions (unless you have an emergency) and collects homework at the beginning of class or it's considered late.

Take the time and do the problem sets yourself.  This is one of those classes where you cannot cram the night before the test and expect to do well.  You have to really understand the concepts.","Problem set every week, reasonable midterm and final.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"15","234","Tue, 23 Dec 2014 20:07:04 GMT","76278","1891","Very underwhelming class. I chose to take CS Theory with Aho due to his fame...in hindsight, this was a bad decision for me. I'm sure there are other people who feel differently, but this was my experience:

Lectures- Aho seems to think that the material is a lot easier than it actually is, often failing to adequately explain simpler concepts in favor of complex proofs, etc. that never appeared on homeworks or exams. This is probably due to the fact that he pretty much invented a lot of it; however, for most of us, this was our first experience with theoretical computer science.

Aho also just plainly isn't an engaging lecturer. Listening to him lecture is a lot like listening to your great-uncle drone on about the Great Buckwheat Shortage of '68 (if your great-uncle is a great storyteller, then ignore this). Occasionally, Aho will talk about having dinner with Stephen Wolfram or working with Kernighan and Ritchie at Bell Labs, which is always cool but doesn't necessarily make the class worth taking.

Homeworks- hard, but doable. There were five problems per problem set. They were problems that you had to do out and solve, which turned out to be useless because:

Exams- both the midterm and final were 10 true/false questions (with brief explanation). I just don't understand how ten true/false questions can adequately assess your knowledge of CS Theory. For the midterm, I studied all the algorithms and the workings of automata, but I did poorly on the exam (far below average). Many of the T/F questions were tricky (average was a 45, std. dev. of 22).

For the final, I didn't bother to learn how to solve any problems or do any proofs, because I knew they weren't going to be on the exam. Didn't really know much about Turing Machines. Bad mindset, I know, but I just studied the general concepts and did much better than the class average (which was a 75).

In conclusion- my recommendation? Take this class with someone else. I was not impressed...I'm not trying to be disrespectful towards Aho, but he is a professor that should be known for his accomplishments, not his teaching ability. Apparently he got a Great Teacher Award from Columbia at some point, but I feel like that has a lot to do with his legacy. I dunno, someone might come along and say something different, but I found the class dull and uninspirational.","5 problem sets, drop 1: Hard but doable. Problems never showed up on exams.
Midterm: 10 true/false questions. Mean of 45, std. dev. of 22. Tricky questions.
Final: 10 true/false questions. Mean of 75, std. dev. unknown. Much easier than midterm.

Average weighted overall score was 67.3. Average letter grade was a B+.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"16","234","Tue, 21 Apr 2009 20:04:22 GMT","22589","1891","Overall: A really great class.

Let's start with the bad: the lectures were not 100% terrific... so I tended to skip lecture sometimes and when I attended I sometimes didn't pay much attention. It's not that he isn't brilliant (he is... for heaven sake's he is the ""a"" is ""awk""), it's just that he has trouble teaching to a class.

Now for the good: His office hours are golden. I cannot stress this enough. If you go into his office hours not understanding something, you'll come out of it completely and utterly understanding the subject; end of story. He is TERRIFIC 1 on 1. The homeworks are incredibly hard, so I recommend checking in during his office hours to double-check your work (or ask for pointers -- no puns intended) before submitting.

The other: As I said, his homeworks are incredibly hard (think Discrete math, but far, far more difficult). One of the last problems he gave us included a proof that HE had made in 1993 or some such proving that the way that perl handled regular expression recognition was NP-complete (when he first proposed this... no one believed him until he proved it). There was no way I could have solved this problem without going to office hours. But moreover, with the possible exception of the aforementioned problem, his assignments, while hard, are pretty fun. I don't mean you'll think they are entertaining, but they are well structured, so they are informative, and if you end up understanding the problem, it really helps you get a comprehensive understanding of the material (which is great). He also gives out practice exams that are incredibly useful. Grading is decently quick and fair.

This class is required for CS majors, so you have to take it, but if you have an option of taking it with or without Aho, take it with.","1 midterm, 1 final, 6 homework assignments (approx 4-10 hours of work each).","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"17","234","Wed, 22 Dec 2010 02:14:05 GMT","25082","1891","I looked forward to this class every day---it's probably one of the best courses I've ever taken. Aho is certainly not for everyone: he's a little dry and very odd, but he clearly cares deeply about the material, and does a good job explaining it. 

He's a minor god in  computer science---his portrait is on the wall at the Google offices downtown---and this class is worth taking for that reason if no other; he's also shameless about reminding you of his associations with major gods of computer science, in particular his friend Don (Knuth, that is). If, like me, you enjoyed Gross's digressions, you'll probably also enjoy accounts of evenings spent (no joke) playing violin concertos with the author of ""The Art of Computer Programming.""

You, like Aho, should care deeply about the material. This is a class about the fundamental questions of computer science---how problems can be described, how they relate to each other, how they are solved, and at the most basic level, what it means to compute. If all you want to do is write Java programs to fit a spec, you shouldn't have bothered with college: the whole point of studying computer science at an institution like this one is to learn how to answer questions like the ones Aho asks, and, you know, do something interesting with your life.

In summary, I had a blast; if you like oddball teachers and hard problems you will too.","Minimal. Five problem sets, four of which took a few hours and one of which caused me to spend an entire weekend staring at a blank sheet of paper (technically an empty LaTeX document, but who's counting?). Easy midterm, easy final.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"18","234","Tue, 17 Apr 2007 00:00:00 GMT","19709","1621","Prof Malkin is very approachable and is definitely on your side - but she won't go find you, you have to send her e-mails and especially go to her office hours. Her lectures are thorough and cover the book material pretty strictly, but I think she'd be more helpful if she spent a little more time structuring the material, saying ""You are here"" in the grand scheme of Computation and it's Proofs. Indeed, I think a map could be drawn of the proofs and their relationship to one another - this would help a lot in understanding the dependencies of proofs upon each other.

Whatever you do READ AHEAD OF THE LECTURE. This stuff is nearly impossible to simply hear and absorb in clas, so having thought about the concepts beforehand will make all the difference in the world. Hell, you might even enjoy it.
","Not too bad - homeworks don't count for much - but the tests are really based on the homeworks, so if you skip those, you'll be screwed come mid-terms/finals.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"19","234","Mon, 31 Dec 2007 00:00:00 GMT","20725","1621","Potentially a very dry topic, but Prof. Malkin was able to make it interesting. Mostly because she seems to believe a great deal in class participation, and engaged students in every derivation.

Overall, I'd rate her highly.","~1 hw per week. 1 midterm, 1 final. Not too bad.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"20","234","Fri, 23 Dec 2011 03:46:09 GMT","26695","1891","Aho was possibly the best CS professor I've had at Columbia... and I've had some pretty good other professors before. 

The book (HMU, Automata Theory, Languages, and Computation) is a bit dense. Luckily, his class notes (posted on his website) are a very condensed, very readable summary. They don't cover everything, though, so you'll have to fill the rest in yourself.

Aho is a very clear and straightforward lecturer. No matter what question you ask, he's able to answer it without hardly having to stop to think - almost robotic (in a good way). Few mistakes, doesn't skip a beat. And a good sense of humor to boot.

The midterm and final were straightforward - the problems were difficult, but short (either you knew the answer and could justify it, or you couldn't). No need to memorize tons of proof details when studying, as long as you understood the process and the underlying concepts. Be warned, though, there was at least one trick(y) question on each exam, so you really need to know the material well!

I'm glad I took this class, as it gave me an appreciation for theoretical computer science (particularly lambda calculus) that I never had. It wasn't the most back-breaking CS class I've taken, but it's definitely one that you'll want to dedicate some time to, partly because the material is dense and abstract, and partly because Aho is just an all-around awesome dude.","Four homework assignments. Moderately difficult, though very doable if you start early, work carefully, and ask TAs for help if you need it. Midterm and final were both fair, but there were a few tricky questions on each. Grading seemed fair - a bit on the generous side, but hard to tell.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"21","234","Wed, 14 May 2003 00:00:00 GMT","5653","1621","Great professor who really, really knows her stuff. Lectures well and does not use slides (as Grunschlag does) so going to class is important. Friendly and helpful during office hours. Funny and very likable! Subject material itself is very interesting and creative, but can also confuse and/or frustrate (especially people who are not very mathematical) because it is all proofs and the problems are extremely interrelated and similar. Reading ahead a bit before lecture would definitely help tremendously.","About 10 problem sets, midterm, final. Quite manageable.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"22","234","Tue, 24 Dec 2013 13:17:41 GMT","28955","2941","This was an OK class. CS Theory with Yannakakis is neither good nor bad. The subject itself is very interesting. It's just the presentation of the material by Yannakakis and the textbook (HMU) that is lacking.

Yannakakis is no doubt a brilliant man, but he's a mediocre teacher. He puts up slides of lecture notes on Courseworks and teaches directly off of them in class. This led to maybe 30 out of 87 students actually attending the class.

The textbook often has convoluted proofs and too few examples. It's the defacto textbook for automate theory, but I think it could be improved. Sipser is another book which has slightly better explanations.

Yannakakis teaches concepts in a reasonable manner given the dense material. Most people didn't attend class and just studied from the slides and textbook. His explanations are not much better than the textbook and you can learn everything from his slides.

My advice is to make sure you are up to speed with what's being covered in class. The material can be dense and hard to follow, so try not to get lost because it will lead to a disaster when exams come around.

Problem sets (40% of grade) generally have 1 or 2 easy questions and the rest are hard. It is advisable to check your work with classmates since homework counts for 40% of your grade and you shouldn't lose too many points on it.

Don't worry too much if you don't completely understand some complicated proofs (eg- NFA to Regex, PDA to CFG conversions). If you know the method that it proves, you'll be fine for exams. He never asked to prove something in an exam. Questions were along the lines of design a DFA, CFG, Turing machine, algorithm, do a reduction, etc. Some of them can be tricky.

The midterm (30%) and final (30%) consisted of 6 and 5 questions respectively and were both in class. They were manageable, but kind of hard since we got so little practice solving problems. The course is mostly theory with few examples and 4 problems per homework don't really prepare you for the tests. Make sure to study all the lecture slides and problem sets for exams. Read the textbook whenever you get confused by the lecture slides.

Grading is fair. TAs grade both problem sets and exams. Final letter grades were also very reasonable.

I wouldn't avoid Yannakakis, but neither would I recommend taking this class if someone better (like Aho or Malkin) were teaching it the next semester.","6 problem sets (4-5 questions + 3 online questions via Gradiance) (lowest dropped)
1 midterm (medium - hard)
1 final (hard)
","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"23","234","Thu, 23 Dec 2010 17:43:13 GMT","25153","1891","Aho is a really really nice Professor. The problem is that he is too smart for his own good. Sometimes it's difficult to understand what he's trying to convey in class until you get to the problem sets and have to work through them. For the most part he tested exactly what he had taught and was very fair about it.

The real difficulty in this class is getting the material. Some people just understand it. Some don't. It's very much like Discrete Math where you are waiting for that ah-ha moment to arrive and suddenly connect the dots and for everything to make sense. Sadly that never came for me.

His stories are pretty funny and they make you realize how cool the CS dept is for having someone like Aho on staff. This is really a hit-or-miss class but I would say take it with Aho if you can.

In retrospect here's how I would have studied for this class if I could go back:
Review your notes after every lecture and then make new notes. Try and see the differences between the various terms (ie: deterministic and non-deterministic, Recursive vs RE). Make sure you understand the theory stuff. Read the book BEFORE the lecture so you have a basic idea of what you're about to do. Do every homework over again before the exams. ","5 problems sets. 1 was really hard and the rest were decent (or at least on-par with what you expect from a CS class).
The midterm was fair. The final had some tricky theory questions which I'm sure tripped people up.","7","Computer Science Theory: Computability - Models - Computation","COMS W3261"
"24","2384","Sun, 27 Jan 2013 03:26:53 GMT","28059","45","A benchmark class, indeed. I am happy that I took it and improved my ""C"" programming skills, especially in the OS domain. Prof. Jason Nieh teaches the course very well.

Apart from the skills and experience in the areas - Operating Systems, Linux kernel programming, this course demands a lot of your ""C"" skills.

If you are a HardCore ""C"" fan and would love to experiment at system level in ""C"", then read on!

This one class is for those who crave for ""C"" programming a lot! You will get your hands dirty while building crucial features of Linux kernel on an Android device in ""C"" involving Synchronization, Scheduling, Paging, File Systems, etc(as per the projects in Fall 2012).

You will fine tune your ""C"" skills yourselves mainly in the area of optimizing the usage of the kernel resources in terms of memory. You keep an eye on what each function ends up returning to determine its success or failure - this comes with practice if you aren't in the habit!

The grading rubric is the most comprehensive one I have ever seen in my life. For each of the assignments/homework, the rubric would cover every nook and corner cases that a novice ""C"" programmer for Linux kernel would definitely ignore.

Well, in the beginning you would find each of your submission being bitten by checkpatch, for not abiding by Linux kernel coding style. But, with time, your ""C"" coding style becomes smooth and elegant if you start respecting what that seemingly strict master(checkpatch) says, trust me!

Ah, userspace programs for each of the assignments! Well, I enjoyed much by dwelling in ""C"" while building the user space test programs for testing the Linux kernel features implemented in each of the assignments. You would be asked to demo each of the Linux kernel features you would implement in each homework and during the demo, well, how dedicated you were in testing your code gets rewarded when the standard test code(which they would have in their repositories) completes without any problem and you hear TA saying, ""That's cool!"".

TAs were very helpful in answering the questions we had. Sometimes, we had to bug them and get the information what we want - but, they were all nice and had good hold on the subject. Among them, I found through live and piazza discussions, TA - Alex to be damn good in the subject.

I feel it's important to mention that the solutions they would publish are simply beautiful. The solutions implemented by Christoffer Dall were mesmerizing. No, am not exaggerating at all - his coding style is so pleasing to eye and his code looks very simple and precise!

Peer reviews: Yes, you would get opportunities(or responsibilities?) to review and grade other people's code. Here, I was annoyed at certain times of seeing some seriously senseless code from other people. At other times, I had also the chance to look at some brilliant code. So, overall, there was a good exchange of knowledge and suggestions between our team and various teams.

Yeah, btw, try to form a good competent team - believe me, it's better to have arguments and come up with some kick-ass code which scores beyond the average code resulting from an average interaction or no interaction at all between you and your teammates. And this is from my experience!
","Normal if you and your teammates are damn good in ""C"" and kernel programming, and heavy otherwise.","7","Operating Systems I","COMS W4118"
"25","2384","Sat, 01 Jan 2000 00:00:00 GMT","52","45","A good lecturer who, unfortunately, seems to hold students in genuine contempt; it irritates him that we tend to insist on quality of education. No complaints on the lectures, and problem sets are ok, since they're book-based; it's the programming assignments that ruin the class.  They're a true mass-nightmare, since students are given literally no preparation for them, and lectures have nothing to do with them. Honestly, with no way to learn how to do the project on your own, can he really be surprised that so many of his students cheat? The plus side is that if you work your ass off (and I mean work your *ass* off) and pay close attention, OS I will teach you two semesters worth of Linux and Unix OS mechanics.  Unfortunately, if you have to take OS, there is really no other choice than Nieh.  Either hold your breath and scrap together a B, or split up with your boyfriend/girlfriend and move into the lab... just be glad that not all teachers care so little about coddling you as Nieh does. Hopefully, you'll actually learn something in the process, as he knows the material inside-out. And if Linux is old Hat for you, you might possible find yourself enjoying the class.  But not likely -- Nieh, like so many other cs profs, confuses a ridiculous 'sink-or-swim' approach for academic rigor.  He should wake up and face teaching like an adult; you should avoid him.","","7","Operating Systems I","COMS W4118"
"26","2384","Sun, 18 May 2003 00:00:00 GMT","5752","45","Prof. Nieh is a good professor.  His lectures, although boring at times, are informative.  My main quibble with this professor is the manner in which he interacts with his students.  He has a real disdain for them.  Be careful not to get on his bad side, or you will be subject to some of the most twisted, Gestapo-esque student-teacher interactions you have ever witnessed.  Trust him less than he trusts you and you will do fine in the course.","Craziness. 5 out of 6 assignments, midterm and a final.","7","Operating Systems I","COMS W4118"
"27","2384","Sat, 24 May 2003 00:00:00 GMT","5872","45","Great teacher, definitely one of the best lecturers in Columbia CS department. This is a rough class, but any class that involes with operating systems is rough, there's no way out. Hacking the linux kernel will be the most frustrating thing you''ll have ever done... but you'll get a lot out from this class, in terms of programming skills and systems knowledge in general. This class will also definitely help you to get a job if you are interested in doing IT as a lot of big firms are now hacking the linux kernel for their own benefit.

One warning: WATCH OUT FOR CHEATING FOR THIS CLASS, this class is notorious for cheating and THEY'LL CATCH YOU!!!

But this is definitely a fruitful class, definitely one of the best CS classes i took at Columbia","6 Homework Assignments (Written and Programming)- The lowest grade assignment will be dropped.

Midterm and Final","7","Operating Systems I","COMS W4118"
"28","2384","Mon, 19 Jan 2009 17:18:43 GMT","22284","45","This is by far the most demanding and rewarding class I have taken as a CS grad student at Columbia. The famous 6 Linux kernel homeworks were just as time-consuming as could be expected. However the Prof and the TA:s were very helpful and there is a good discussion board belonging to the class. It was possible to skip one homework without a grade penalty. The first two assignments were not that difficult but 3-6 was very challenging.

The exams were in general pretty straight-forward if you had attended the lectures during the semester. The lectures however were rather slow and somewhat obstructed by irrelevant questions. The level of the lectures were much lower than what was required to finish the homeworks.

The best advice I can give for this class is to preferrably get familiar with C and Linux as much as possible before starting the class. No previous kernel programming experience is necessary but not having to spend time with syntax problems is very nice. 

But anyone interested in low-level programming should definately take this class.","The assignments took us on average up to 40 hours each.
 
In addition there is some reading to do and lectures to go to. The exams does not require a lot of studying though.","7","Operating Systems I","COMS W4118"
"29","2384","Sat, 10 Jan 2009 07:08:26 GMT","22172","45","Hardest CS class you'll take at Columbia, hands down. Also, the class you'll learn the most from. Work hard in this class and you will be rewarded. Work not so hard and, well, you'll know the theory fairly well, but that's about it. This class requires a highly intimate knowledge of C--if you don't know it very well, then either skip the class or be prepared to read the K&R book thoroughly.

The course covers the internals of the Linux kernel and we worked specifically with 2.6.11. Nieh covers mostly theory in class, and there is one text which goes over theory in more detail, and one which is a god-awful dry textbook (more like a manual, actually). The assigned readings aren't that long, and you will definitely need to do them--otherwise you will have no idea what the hell is going on. That being said, his lectures compliment the readings very nicely. Nieh was one of my better profs in terms of not ""teaching out of the book."" However--Nieh is the person you go to if you don't understand theory. If you need help with the homework, skip him and go to the TAs directly (he has little involvement in the homeworks).

For each homework, you write a patch to the kernel that does something. After you submit, you have to meet with the TA for ~30 minutes to demo it, and they will also run their own test program on it. Be careful as they are NOT AT ALL forgiving if anything goes wrong--if you can't get it to work (even for a stupid error like you submitted the wrong file), you lose practically all points. Also, each HW has a written portion (~10 questions, usually 50% of the grade).

HWs:
1. Basic stuff, write a small shell, etc.
2. syscall logger: not that hard, just an introduction to syscalls/the virtual machines you'll be using
3. waitqueues/locking/threading stuff: you don't have to write that much code, just be careful what exactly you write.
4. implemented a new scheduler type. most of the class just skipped this HW entirely, i recommend you give it a shot, but, don't bother if you can't get it.
5. memory tracker: write a syscall that can track what chunks of memory you're using. requires you to go low-level with page tables, etc. tough but doable.
6. process tree filesystem: make a filesystem that reflects the processes on a system. it's a lot easier than it sounds; he gives some examples of other pseudo filesystems in class.","6 homeworks, 1 midterm, 1 final. Best 5 out of 6 homeworks used. Be careful - each homework could be considered a workload you would put into a project for another class. The midterm and final were both standard: he has a review session for each where he goes over old ones. The exams you take will be different, so you can't just study the old ones and be fine, but they're aren't THAT tricky.","7","Operating Systems I","COMS W4118"
"30","2384","Wed, 23 Jan 2013 05:28:24 GMT","28023","45","Well, this is one course of Columbia of which I am proud of.
There is nothing compared to this course that Columbia can offer and I guess Prof Nieh is THE best person to teach operating system course.

Prof Nieh is great teacher and goes in great details whenever required. His classes are great, even if you miss in person, you can view them on CVN later. It was really helpful.
If you are lazy to work because you have a job already and just want to pass this course, then you might not like working so much, but otherwise if you have genuine desire to learn operating systems, you will be grateful to Prof Nieh.

Assignments are challenging and you will spend time reading linux kernel code. Best resource to get help is good TAs. For our course TAs were really good and helpful. I spent almost few hours with them before doing any assignment and it helped.

Cool thing about this course is that if you do assignments on your own and are able to finish it, you will become good enough to answer any question on kernel that you are expected to know and even more.

Make good teams for your assignment. If you have problems with team mates better change team, hire or fire someone else you will end up struggling alone and that doesnt help.

Just remain above average in exams, assignments and your grades will be great. If you outdo  average in all cases you will get a very good grade.","Heavy but worthwhile if you really want to understand your operating system well.","7","Operating Systems I","COMS W4118"
"31","2384","Tue, 11 Dec 2012 19:50:52 GMT","27711","45","Too much workload that equivalent to, or even more than the rest three courses I take this semester. Besides the endless projects, you need to review others' homework which also takes up much time. The grading sheet is really harsh, you never know what parts will be deducted points according to the grading sheet. The homework instructions are ill-organized sometimes, you were not clearly told what were expected to do in order not to lose points. 
","Six projects, the first two are easier(compare with the latter ones), but the rest are hard. The last one conflicts with other finals, other projects and has earlier deadline. No grace days.

Midtem+final. Some parts are at the corner of the textbook. By the way, the textbook is pretty useless for the 6 projects.

Anyway, if you enjoy challenges and have plenty of time and mentally strong, this course is designed for you.","7","Operating Systems I","COMS W4118"
"32","2384","Mon, 01 Dec 2003 00:00:00 GMT","6898","45","In my opinion, Prof Nieh lives in the unrealistic world where a day has 48 hours or more for a student. The work load is way too much and his lectures are absolutely useless when it comes to doing the programming assignments. He might be an intelligent guy but anybody can handle an operating systems course by repeating what is in the text book.  I dont understand how this course has become so popular over the years. The regrading procedure is bureacratic crap and it makes life more miserable for the students who dont have the time to write down lengthy explanation as to why they require a regrading, as they are otherwise busy trying to complete the programming assignments. I believe there are easier more effective ways to learn Linux than trying to cramp it all in 2 and half months.  I would never recommend this course to anyone.","5 best out of the 6 programming assignments, midterm and final","7","Operating Systems I","COMS W4118"
"33","2384","Tue, 20 May 2014 15:57:20 GMT","29513","3509","So Jae taught this course in Spring 2014 because the normal OS professor was on leave. I'm not sure when he will teach the course again, but I wanted there to be a CULPA review so that people can go into this well-informed.

--- The Course ---
I learned a ton from this course, though I didn't necessarily realize it as I was slogging through. Jae reformatted the course and taught it with undergrads in mind, which was appropriate given that the class had many more undergrads than in past years (no doubt because of Jae's popularity). As such, much of the first half was actually an extension of AP (lab7/http-server) used to teach OS concepts such as concurrency, memory sharing, and inter-process communication (user space programs to teach kernel stuff). It again demonstrates Jae's theory of teaching, using previous knowledge in order to bridge the gap to new concepts. With regard to content, Jae put a great deal of time into UNIX programming compared with hardware knowledge / kernel hacking. Jae explains that the earlier stuff is more applicable and the latter stuff is changing (e.g. we didn't cover hard disks, probably because SSDs sort of shift that paradigm). I buy his explanation. The pacing of the course wasn't great, with probably too much time spent on UNIX programming on the front and too little systems/kernel work at the end. Of course, this is understandable given that this was Jae's first time teaching OS and that he completely restructured it.

--- Homework ---
A few individual assignments (that are pretty easy) with mostly group projects (up to groups of three). Having a good group is obviously helpful. All the projects run on Arch Linux, which you will set up on VirtualBox. The assignments usually didn't involve much coding, but rather a lot of understanding how the code runs and scouring the internet. In other words, frustrating yet also good practice for the real world. The assignments have good underlying structure, but still need refining (again, should get better over time). Sidenote: the listserv from AP carries over as well, and will save you hours of struggle if you follow closely.

--- Exams ---
I got destroyed on the midterm, but in hindsight it was one of the best crafted CS exams I have ever seen. It definitely tested your ability to read code and apply the concepts we learned. The final was very different and a bad evaluation of our mastery in my opinion: 25 multiple choice questions about very specific things we covered (i.e. very un-Jae-like). Both exams unfortunately do not provide room for partial credit.

--- Lectures ---
Not incredibly interesting, but still important to really ingrain the material in your head. Jae mostly worked off of powerpoints, which I found ineffective. The few times he used the board were better. For me, printing the notes/slides beforehand and taking notes directly on them worked best.

--- Grading ---
Jae curved to a high B+, which I consider pretty generous. Just be very VERY careful to follow homework instructions exactly as stated. Lots of times grading occurs on scripts, so the slightest problem could send your grade down just for not properly following basic instructions.

--- TAs --- 
Jae carried over the best AP TAs and I assume he would do so in the future as well. There was also a contingent of Chinese grad student TAs who were friendly, but generally less helpful.

I doubt I've covered everything, but hopefully someone after me can fill in any missing gaps. On the whole, I would say to take the class with Jae if you are an undergrad (and if he ever teaches it again).","""7"" assignments (meaning trivial HW0 and HW1, followed by HW2, HW3(a-c), HW4(a-b), HW5(a-b), HW6(a-b)), 40%, not all are graded
Midterm, 25%
Final, 35%","7","Operating Systems I","COMS W4118"
"34","2384","Thu, 06 Jan 2005 00:00:00 GMT","10943","45","Professor Nieh is generally an amiable person.  He provided us with Halloween candy during the midterm and held a pizza party/review session for the last day of class.  His teaching style of writing bulleted lists and making diagrams on the blackboard is mildly helpful -- at least it's not Powerpoint.  The material was actually really interesting, and concretely brought together things I had learned in other CS classes.  Unfortunately, all of this pales in comparison to the torture of the homeworks: endless hours of staring at a computer trying to understand somebody else's LInux code that is hardly discussed in class.  The material taught in class was how an operating system works.  Ability to do the homeworks was in NO way a function of how well you understood this material.  Take this class if you don't care about your grade or have no social life.","6 disgusting group homeworks, midterm and final.","7","Operating Systems I","COMS W4118"
"35","2384","Thu, 20 Dec 2012 06:33:09 GMT","27771","45","Your experience in this class will depend almost entirely on your team. If you come in with people you know and trust to be competent, you will be at a monumental advantage. If you sort into a random group, well... godspeed to you, brave soldier!

The professor's lectures were of extremely high quality, though the recordings are not. TAs were top-notch. The two books were, respectively, completely useless and extremely useful. You will be given problems from the extremely useless book, but should instead spend your time reading the book on kernel development for the homeworks.

(45%) 6 homework assignments, lowest is dropped
(15%) Grading on your reviews of peers' work
(15%) Midterm
(25%) Final
(00%) Extra Credit

Note: there were programming problems on the two exams.

","Individual contribution will vary between 15% and 70% of each homework assignment, subject to group dynamics.

Averages tend to be quite low on homeworks and exams. If you score between 50 to 60% on the assignments and exams, you're probably in the middle on the pack.","7","Operating Systems I","COMS W4118"
"36","2384","Tue, 04 Mar 2008 00:00:00 GMT","21027","45","This class was the class I have learned the most from, and has also been the class from which I have gained the most marketable skills I have and have at least indirectly landed me job offers.

Sometimes professor Nieh presents material in a suboptimal order, but he is very good at explaining low-level system concepts and hardware interactions as well as higher-level algorithms.  Exams are definitely fair, but homeworks can be ridiculously difficult in some cases, but others are a good amount of work and are very educational.

He is also very approachable in person and will help with concepts outside of class and welcomes feedback as well.","The largest workload of all the classes I have taken in the CS department (databases, vision, PLT, adv. databases, AI, etc.) -- 5-6 projects that involve directly altering the linux kernel, 2 exams, each project is a group project with an individual part with problems mainly from the text.","7","Operating Systems I","COMS W4118"
"37","2384","Sat, 17 Jan 2004 00:00:00 GMT","7763","45","If you're going to look for a job in I.T. after graduating with whatever degree you're working towards, this class is a must. The fact that Linux is used as a case study throughout this course is *immensely* useful, if only that OS courses at other universities are taught with merely pedagogical operating systems such as Minix or Nachos. That said, the programming part of the homeworks was arduous and time-consuming (yet rewarding once you gradually grokked a solution, which ended up being less than 50 lines of code for most of the assignments). An able CS undergrad would spend anywhere between 10 to 20 hours a week on the homeworks (written + programming parts combined). Nieh's lectures are very straightforward, and they are very much worth attending. The class is all about *detail* -- for those in systems, there is mounds of it to drum into your head, and this class gives you good practice. The worst part of the class is not the homework, but the morons that you can be potentially be paired up with for doing the programming assignments.  Your partner may contribute nothing, yet s/he can get all of the credit for your hard work. Luckily, you get to submit reviews of your partners and they swap around the programming partners based on those reviews after the first two assignments.","6 homework assignments. Each assignment has a written component and a programming component. The worst homework grade is dropped (i.e. your worst written score and your worst programming score is dropped, so if you did badly in the written part in homework #3 and the programming part of homework #5, those scores are dropped.) Midterm was easier than the final.","7","Operating Systems I","COMS W4118"
"38","2384","Wed, 10 Dec 2003 00:00:00 GMT","7049","45","Ok, here's a simple test to determine how you'd do in Nieh's OS class. Rate yourself on a scale of (1=low to 10=high) on each of the following: C/UNIX programming; low-level debugging (i.e. pointers, memory traces, locking/serialization); Linux kernel. Now take the average. If greater than 25, you'll do ok. If greater than 15, expect to spend at least 10 hours a week in the CLIC lab. If less than 15 then **don't bother**. For real. If you are not an expert (or at least very very good) in C and UNIX, then *don't bother*. Now about the class itself. It runs at 200 miles per hour. If you can't keep up with the homework, then you are basically screwed. The programming part is **all Linux kernel hacking** and it is *not* covered in class. Don't expect the TA's to debug your problems and don't expect the prof to give much help except conceptual stuff. Of course, if you have munched Linux kernel code already, then this course will be a breeze. BTW, the cheating policy is outrageous (if the TA suspects you in the least, you are screwed.) Like the other review said, trust the prof/staff less than they trust you and you'll be fine. Prof is okay at office hours, but doesn't have time to give you detailed explanations and stuff -- either you go *very well prepared* or get thrown out in less than 5 mins. But if you can keep up with it, you'll get something out of it.","6 homeworks (theory + heavy duty Linux kernel hacking) with lowest hw grade dropped, midterm, final. No extra credit.","7","Operating Systems I","COMS W4118"
"39","2384","Fri, 17 Dec 2010 01:31:43 GMT","24992","45","Real men take Operating Systems. And, of course, hard as nails women too. 

This is by far the hardest class I've ever taken. The workload is about 30-40 hours per week on project weeks, almost none on off weeks. And there are like two off weeks. 

The course itself, as in the things you get examined on, is actually relatively simple. There are two components: a concepts component, which you can get entirely from reading the textbook, and a practice component, which consists of endless hours of reading through C source code, followed by more hours of implementing your design, followed by a frantic 24 hour code marathon once you finally figure out what you were supposed to be doing from the start. 

Some prerequisites: Firstly, you need to know C really, really well. I mean like, you need to be able to write memory-safe in C in your sleep. You will be taught thread and interrupt safety in the course itself. 

More importantly, you need to be able to read C code. There is no manual for the Linux kernel. It's C all the way down (well no, it turns into assembly at some point...) I mean, yeah there are some documentation notes, but the real deal is the code. If you can't figure out what a method is doing in one glance, you're going to have to brush up on your sight reading. 

Oh and also, the projects are based around modifying the Android Linux kernel. I mean, how cool is that! ","Oh sweet Jesus. Like I said before, the workload is crushing. On the bright side, though, you will be working as a team, so you can always opt to cling like a remora to your teammate's work. If laziness is not your thing, you'd better get the lead out, because this class will make the rest of your classes look wimpy. ","7","Operating Systems I","COMS W4118"
"40","2384","Fri, 05 Jun 2009 13:53:34 GMT","22946","45","This course is the best CS course I have ever taken.

I entered the course with very little C experience and with hardly any Linux experience - let alone any kernel programming experience. After taking this course I did a project for the professor next semester and I now feel confident to take on large kernel intensive projects.

Further, even if you're not going to be an operating systems developer, taking this course will make you understand all those details, which are unavoidably important, but always seem vague without having real OS experience - such as memory management, device drivers, threads and processes and more. I have taken another OS course before this at another institution, and I have to say that a course like this should be mandatory for all CS students.

Jason is an excellent teacher, who is very approachable and answers any question with insight and dedication, so take this course with him if you have the chance.

Only criticism is that I think there should be a homework related to writing a driver/module instead of for instance changing the scheduler, as it is more relevant for most of the kernel work to be done by the majority of people. Also, the classes do seem a little slow at times, but I guess that's more of personal preference.","Regarding the workload, yes, it is VERY tough. The homeworks will kill you, and if you have little C and linux experience it will be even worse. As another reviewer wrote: do some C programming practice before starting this course! Also, pick a good teammate and plan the entire semester for homeworks (including which homework to possibly skip) from the beginning. The midterm and final are not over the top difficult, but will require knowledge of what you are doing. (The questions are relevant though and not to test-like).

Don't let the workload scare you off, but don't take this course together with other core-courses - you will suffocate :)","7","Operating Systems I","COMS W4118"
"41","2386","Wed, 12 May 2010 20:33:20 GMT","24370","1812","I can see why people like him, but the material is extremely difficult, beware!

He makes lectures interesting and funny, but he glosses over important concepts and you never feel like you understand anything until the difficult midterm and final come around. You'll have to study your ass off just to pass.

The programs are a lot fun. They take some thinking, but overall they're well-structured and very useful. The theory questions on homeworks are impossible.

What's very unfair about this course though is that you can't recover from a single bad grade on anything (hw, midterm, or final). A single mess-up will glare at you on your final grade, not to mention that the curve is very small. The difference between letter grades is very slight, only a few points will be bump you up from a B+ to an A (notice there's no A-). But only a few points will drop you down from a B+ to a B-.

Unfortunately he grades strictly by the numbers, and no amount of asking questions in class, going to office hours, or demonstrating grade improvement throughout the semester will factor into your final grade. He has no problem setting the average to a low grade.","5 homeworks (they get easier over time)
1 midterm (impossible)
1 final (difficult)","7","Computer Vision","COMS W4731"
"42","2386","Mon, 24 Nov 2003 00:00:00 GMT","6861","1812","Excellent course taught by an excellent professor! The course revolves around the idea of teaching a computer to extract information from visual images, such as the position of an object, the position of edges, shape/depth of a scene from multiple images. Some of it will make you rethink the many things we as humans take for granted, and Shree likes to insert pertinent biological/philosophical/tech-biz tidbits that encourage an appreciation for the material beyond a purely CS perspective. The underlying theory could potentially get very mathematical, but Shree avoids that and focuses instead on the general ideas and principles. In sum, the subject material is interesting, challenging at times but rarely impossible.  As a teacher, Shree is one of the best out there. He is entertaining, funny, and very dedicated to making sure we learn. He is also a very effective lecturer with excellent presentation. So, although he is quite a busy man (a lot of conferences to attend) and had the TAs teach a couple of classes, I feel that we learnt more in his classes than usual.  All in all, a great experience and highly recommended.","5 HW assignments, each of which involves both writting exercises and 3-5 programs. Programs can be challenging, but again there's nothing impossible. Shree and the TAs are very helpful. If you keep up with the class and don't procrastinate, you will be fine.","7","Computer Vision","COMS W4731"
"43","2386","Wed, 16 Jan 2008 00:00:00 GMT","20826","1812","Prof Nayar is a natural. He is clear and cogent and drives all the relevant points home. Be sure to hang on to every word he says, because its generally very deep. If possible, make notes on top of the slides he gives, they make it easier to understand them when you study for the exam. This is a no-nonsense course, only relevant stuff is taught. Therefore, read the slides very thoroughly. Its not much to read, compared to the Horn book which is quiet abstruse. The class is a great learning experience. Particularly because of the simplicity that Prof Nayar brings to it. If you ever have anything remotely close to Vision take this class. If you don't, take it to experience what a great teacher is like.","5 assignments. If the first freaks you out, hang in there, things just get easier. Overall assignments are easy. The slide handouts are all you need to prepare for the exams, and yes, some presence of mind.","7","Computer Vision","COMS W4731"
"44","2386","Wed, 16 Apr 2008 00:00:00 GMT","21143","1812","Professor Shree Nayar is the best professor I met at Columbia.  The course is very informative.  He gives great lecture with a sense of humor.  The TA are very helpful.  The assignments are not that hard but yet gives you a sense of how things really work.

I highly recommend this course to anybody who has interest in vision/graphics.  It's a must for students in vision/graphics track.

Highly recommended.","Not bad.  The assignments are getting easier after the third one.  But you need to spend lots of time on the slides to make sure you really understands the materials.

Final and midterms are well organized.","7","Computer Vision","COMS W4731"
"45","2386","Sun, 18 May 2014 06:56:07 GMT","29503","1812","Possibly the most difficult class in the CS department. 

Professor Nayar is also possibly the best professor in the department. Great lecturing style, clearly super intelligent, and genuinely does his best to make sure we understand the material. That said, we cover a lot of material in this class, and preparing for the exams is hellish. The exams generally cover some of the easier concepts in the class, but it's also easy to lose points on proofs and there are also quite a few questions where you just have to remember a specific detail or some model which you otherwise can't derive on the spot. No way around some of this stuff unless you put a lot of time into memorization of the material.

Homeworks are great! They're done in MATLAB now (I think he said they were in C until a couple years ago), so they're constantly evolving - Nayar admits as much himself, especially that he put a lot more material in the class and on the HWs this semester. This is not a class you want to procrastinate on (nor can you afford to). If you start the night before, you may stay up all night, and just not be able to finish due to the difficulty of some of these homeworks. You should start at least a few days before so you have time to consult the TAs because you will inevitably run into MATLAB bugs, amongst other issues with understanding the Vision algorithms themselves.

You should probably attend every class because Professor Nayar doesn't post any of the material on courseworks. The TAs print out all the lecture slides and you pick up one of these packets at the beginning of each class. These are literally just printouts of the slides, so you'll want to take miscellaneous notes and comments based on what the professor says while presenting each slide.

We didn't receive any information about the distribution of grades this semester, so I can only comment that my grade was definitely lower than expected. A few people have said the same thing about their grades, but we can't make any generalizations. Just know it's a hard class - if you get a low grade, don't worry too much about it because this is one of the best, most useful classes you'll take in the CS@CU department, from one of the best professors around.","5 homeworks (1-3 non-programming, 1-2 programming problems per HW). HW is 50% of your grade. Midterm (15%), Final (35%). Homework could take anywhere from 5 to 40 hours per assignment. Writing the skeleton code for basic functionality doesn't usually take too long if you understand the algorithms/concepts to use, but there are always faster and better ways to implement certain things. Whether it's MATLAB vectorization or clever use of convolutions, you have to think things through pretty well to attain top marks. This takes time, and can cause problems if you're not already familiar with MATLAB syntax and other tricks. ","7","Computer Vision","COMS W4731"
"46","2386","Tue, 04 Mar 2008 00:00:00 GMT","21026","1812","Professor Nayar is tied for my favorite professor.  The main reason I believe he is so good is because he conveys material in an extremely concise, understandable and well-spoken manner and really knows the subject inside-
out.  He is also very approachable in person and makes an effort to know students on some basic level.

The only thing that was a little weird about the vision class was the lack of math -- it was all in the slides but there is essentially no math in the entire class, which is in sharp contrast to the textbook.  In addition, the first homework is pretty ridiculous in many ways and shouldn't be considered as a measure of the class' overall worth.

Programming assignments are engaging, and exams are very fair.  Prof. Nayar makes use of the entire spectrum of scores on exams, and I feel gives proper questions to let those who understand subjects thoroughly to stand out.  The one complaint about them is that he does not even give a format for the exam, let alone sample questions -- this was very nerve-wracking for me personally but it ended up OK in the end.","The workload for the class is VERY front-heavy, so just get down and dirty early to enjoy the freedom from work at the end of the semester.  It can definitely be a more difficult workload, but not too bad.","7","Computer Vision","COMS W4731"
"47","2386","Sun, 08 Jun 2014 06:39:27 GMT","29624","1812","Vision was the most rewarding class by far. Prof. Nayar is funny, smart and makes lectures very interesting. He has an answer to all of your questions. He likes discipline, mind you, but is not that fanatic about it.

You cannot miss any of his lectures as the slides will stare at you when you prepare for the midterm or final. You get printed slides so you just need to take down additional notes (if any).  In Spring 2014, he tried a lot of new material and so the overall workload increased exponentially after midterm. He also took feedback post midterm and in the last class to update the class materials. There were review classes in the lecture before the tests which were quite helpful, if at all you started preparing!

It helps to have a study group as making sense of each slide takes up a lot of time although everything seems like a breeze during the class. TA's were very helpful. Thomas was a little picky in giving points but used to explain important concepts easily. You won't understand where exactly you lost points but they do indicate the relevant challenge number. Though programming in MATLAB seems easy, debugging is a headache. Make sure you proceed step by step. Just a tip: avoid built in functions unless you are completely sure of what they return. Getting a working solution was not enough to secure full points. You need to provide a 'smart' solution.

I was taking Computer Graphics along with it and I must say a lot of my fundamentals got cleared through this class. His 'Math Primer' slides were just mind-boggling. Everything was explained in such an elegant manner. Overall, ""you get a lot for the tuition you pay"" in Prof. Nayar's words!","Heavy. 5 Homeworks (1 Theory, 4 Programming + Theory) + Midterm + Final.

You generally have more than two weeks for each HW. No late days. First assignment had basic MATLAB intro but some challenging theory questions. Second one was the toughest for me and I lost a lot of points since I started just the night before. Rest of the HWs were decent and rewarding provided you start early i.e. the previous weekend or so. You implement a panorama stitcher, refocusing app...how cool is that!

Midterm as well as the final were not tough but there were few challenging questions to identify people who could think a little out of the box. Overall the avg was quite high ~ 20/30 midterm and ~ 35/48 final.","7","Computer Vision","COMS W4731"
"48","2386","Wed, 10 Dec 2003 00:00:00 GMT","7054","1812","I loved this course.  Professor Nayar is an excellent lecturer.  He provides the class with handouts containing almost every slide he uses (yes, he uses slides on a projector, which is usually a bad sign, but he pulls it off well)... over 400 pages per student across the term.  This minimizes how much you have to take down in terms of notes, and allows you to spend more of the lecture making sure you understand, rather than copying down diagrams.
I have to agree with the previous review: Professor Nayar's digressions are always interesting, and regardless of whether they help understand the material, they help understand the motivations, or how vision works in humans.
It's not an easy class, but if you come to lecture all the time and pay attention, you shouldn't have trouble with the homeworks... 
the midterm and final may be a different matter though.  However, the professor and TAs are very helpful in office hours.","The homeworks aren't so bad... 5 or 6 of them, and I found that the programming actually got easier as the term went on (after the third homework).  However, the midterm and final were... insane, I thought.  The best study advice I can give is:  If you think there's no way it'll be asked, memorize it.","7","Computer Vision","COMS W4731"
"49","2387","Wed, 10 Dec 2003 00:00:00 GMT","7055","47","This is a spectacular class!

It's officially limited to 30, and there's a chance you'll have to compete somewhat for a spot in the class, but that's rare - my class had 23 or so people at the beginning, and ended up at 21 for the bulk of the term.

Unlike most CS classes, Programming & Problem Solving is a discussion-based class.  There are four projects across the term (each covering about 3 weeks).  There are 5 discussion classes per problem (in which the class demos their latest solutions and discusses their approaches), and one class where each group presents their report.
Groups are randomly determined, but you can request to work with particular students (but you can only work with each person on ONE project).  The groundwork for the problem-solving has been done for you - the TA provides the class with a simulator program and the interface for your code to use, so you can dive in and typically write a simple/naive solution to the problem in twenty minutes or so, leaving you most of the project time to create and implement more complex solutions - there is almost no setup work.
The class works on full disclosure and full sharing - you can take any code you find online and use it, as long as you say you did, and you can rip off your classmates as much as you want, as long as you credit them for what you ripped off.
One of the great things about this class is that it brings you into a group of some of the best minds currently studying at the school.  It will have you thinking differently about all sorts of problems.  The other great thing about the class is how I always left the discussions wanting to work on the project - unlike most classes where the assignments are fairly arbitrary, you have a great deal of leeway in the deliverable, and typically you have something you want to try.
I would recomend this class to anybody who feels comfortable with a discussion-
oriented problem-solving case study.

Also, I would reccomend Professor Ross' databases course - he is an excellent professor.","It really varies by both your group and how much work you want to put into the class.  However, the more you put in, the more you get out.  And you'll probably find you want to work more for this class than your other classes.","7","Programming & Problem Solving","COMS W4444"
"50","2387","Mon, 15 Dec 2003 00:00:00 GMT","7129","47","As you can read on CULPA and the SEAS Oracle, students who have taken this course generally have lots of positive things to say about it, most of which are absolutely true.

However, because the course places such a huge emphasis on collaboration and the interchange of ideas,  what you get out of it varies greatly with the competence and creativity of your fellow classmates.  For some reason, Prof. Ross seems convinced that the course ""self-selects"" smart people, that those enrolled in it are naturally highly critical/creative thinkers.  This may have been true for past offerings of this course, but I did not find it to be the case when I took it.

Out of 22 students, maybe 8 regularly produced creative, original ideas and could competently implement them.  Most of the others were pretty average, while a few people were just plain dumb, lazy, or both.  This may sound harsh, but when you find yourself teamed up with one or (gasp) two of these people and have to think through an inventive problem solution, code it, and write the final report all by yourself, you *will* feel your urge to kill rising.  Also bear in mind that all members of a group receive the same grade, and there is no formal peer review process.

I still recommend this course; it has several important merits that others have mentioned, and what you learn in it will stay relevant long after you forget the intricate details of distributed transactions or lambda calculus.  If you put in the work, you will walk away content unless, like me, you don't suffer fools gladly.  If you don't put in the work, you will still do relatively well at the expense of those who do.","Up to you.  You are, of course, encouraged to put in an equitable amount of work, but there do not seem to be any serious repercussions for those who do not.","7","Programming & Problem Solving","COMS W4444"
"51","2403","Mon, 14 Apr 2014 04:56:30 GMT","29326","37","The homeworks are relatively easy, the projects are ""fun"" (in that nerdy way that CS kids love), the classes are not really necessary to go to after the linear algebra sections have been covered, but the midterm and final are kind of bullshit. Allen only gives you a general overview of what might be on it, without a practice test, and the questions on it are weird; often testing cursory knowledge of subjects not covered in any assignment or project. It felt like the final was ""trying"" to be harder than the rest of the class just to achieve a nice grading curve.

That said, here are the pros:

You get to program for an actual, real-world machine, which is something you don't really get to do in many other classes. It's a different kind of debugging when you have to find out how slippery a certain floor is and factor that into your motion calculations to account for drift. 

You also get to use linear algebra in a very practical way, (It really cemented a lot of the fundamentals I had only weakly grasped after taking intro to Linear Algebra). Lastly, it also serves as an intro to Computer Vision as well, some of the later homework assignments require you to mount a camera on the robot and do image processing to solve certain puzzles.

In summary, it's a class that kind of feels like an easy-A class despite having a respectable work-load (the projects) and arbitrarily difficult exams. Allen is a lenient grader for the projects, but not for the midterms. This is definitely an ""application"" class, not really a ""theory"" class. Take it if programming a Roomba sounds like something you would like to do; for all its flaws I enjoyed it well enough.","Respectable; it's a class with a programming workload, expect to be submitting things at 11:55pm on the night they're due at least once or twice.","7","Computational Aspects of Robotics","COMS W4733"
"52","2403","Thu, 06 Oct 2005 00:00:00 GMT","12824","37","I had Prof. Allen's class right after Prof. Rocco Servedio's class. The contrast could not have been clearer -- while Rocco is a clear and competent lecturer who is quick on his feet and always able to answer questions, Allen is a bumbling, incompetent waste of time. He was never once able to answer any questions posed to him in a way that suggested he understood either the question or even the material. His lectures were disorganized, rambling, and unintuitive. He is far and away the worst professor I have ever had at Columbia Computer Science (and perhaps tied for worst ever at Columbia). ","Not too bad. A number of time consuming programming assignments, but they're fun.","7","Computational Aspects of Robotics","COMS W4733"
"53","2403","Mon, 15 Dec 2003 00:00:00 GMT","7122","37","First off, I took Data Structures with the guy too.  Everyone who wrote a bad review of this guy is rather stupid.  Swing interfaces are key parts of every assignment involving Java after Data Structures.  Furthermore, copying code to create the data structures is fine - it's a matter of using them - why do you think the class is considered a difficult one for many?  Because they don't know how to copy properly?

But I digress.  Robotics is Allen's specialty, and he clearly shows he knows what he's talking about.  The class has some rather cool aspects about it, including the use of a robot simulator.  You actually apply concepts from linear algebra to something.  Furthermore, it gives a solid background to what kinds of projects are going on in robotics.  Some of it is basic at first, but it gets better as it progresses.","The workload is fair and requires a bit of time, but most written assignments can be done in a night.  Programming assignments take a bit longer, but they're pretty cool after finishing them, unlike many CS classes that offer useless programming assignments.","7","Computational Aspects of Robotics","COMS W4733"
"54","2906","Thu, 30 Dec 2004 00:00:00 GMT","10394","515","Prof. Cannon was simply amazing!  He had this way of explaining difficult concepts in a way that made it easy to understand, and he didn't mind going over the same concept over and over again until everyone in the class was clear.  He also made it very easy to go to office hours (he encouraged it every week).  
Prof. Cannon warned us in the beginning of the class that CS1007 is a rigorous introduction to computer science and that students who had no previous programming experience should consider taking CS1004.  I had no previous programming experience, but I decided to stay in CS1007 because I knew that I would learn more in that class. Prof. Cannon said that students without prior programming experience would find the class difficult (even those who had a lot of programming experience had a hard time), but the class is do-able and Prof. Cannon made sure to say that he would be as supportive as he can.  And he was.  He also made class fun -- he is funny and witty and actually makes you want to go to class (and you should go.  Many times he covered concepts that weren't in the textbook, and we needed to know those concepts for the exams and to complete our homework assignments).

If you're looking for an easy A in computer science, then CS1007 is not for you.  Take Professor Cannon's advice and take CS1004 (though I'm not sure what the workload is in that class.  I know it's easier than 1007, though).  But if you're looking for a class that will challenge you and make you proud of all that you've learned, then be brave and take CS1007 and make sure to take it with Prof. Cannon.  He is one of the best professors I've encountered so far at Columbia.  You will learn a whole lot of programming and will be surprised about the things you learn to do.","5 homework assignments each consisting of 2-3 parts (a problem set and 1-2 programming projects).  Every other assignment is considered difficult (they were all difficult to me.  And homework#2 was a KILLER!) There was also a midterm and a final.  Class attendance is required.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"55","2906","Sun, 22 May 2005 00:00:00 GMT","12251","515","A great professor. He is nice, invites commentary and feedback during class, and even cracks a few jokes here and there. His lectures are generally clear except things got a little confusing during the data structures section, when we covered a top that our book did not handle at all (red-black trees). He likes to make things challenging but not impossible. Good office hours.","6 programming assignments of increasing difficulty. These can take a long time to complete, so try to start early. Midterm and a final. The midterm was easier than the final, which had some fairly difficult questions on it. ","7","Object-Oriented Programming and Design in Java","COMS W1007"
"56","2906","Sun, 31 Jan 2010 22:34:17 GMT","24017","42","Glad to see Prof. Kender has a silver nugget to show for his excellent classes. Although he is very intimidating at first sight (one of my friends who audited the course for one class actually ran away in the first 15 minutes), Prof. Kender is just a fluffy teddy bear that just wants to be hugged. But since he is too intimidating for any students to just walk up to him and hug, he penalizes us by giving us incredibly challenging (but fun) assignments.

His lectures, most of the time, grabs your attention and doesn't let go. The only boring parts would be the ones where he tells us about the necessary evils of memorizing idioms. Even those, however, coupled with Prof. Kender's otherwordly sense of humor and enthusiasm, are possible to get through completely awake and conscious.

The assignments are quite difficult, yes, and many people dropped the course halfway through because of a certain assignment. (It personally took two all-nighters in Butler.) But if you enjoy computer science at all, the challenges he throws at you and the sense of accomplishment that you get when you finish will be enough to keep you going throughout the entire semester.

FYI, don't worry about the numerical grade that you get. Prof. Kender grades hard on all assignments and tests, and the numerical grades may seem low. But the letter grade won't be; for example, the B+ on the midterm was in the high 50s.

If you have a chance to take this man's course, do not let it pass on by. You'll regret it.","5 Assignments, anywhere from 3 to 15 hours of work each.
1 Midterm, difficult, but doable.
1 Final, ditto.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"57","2906","Wed, 09 Dec 2009 18:55:29 GMT","23397","42","I studied Java for the first time during my senior high school year. Though I felt like I learned how to program in Java and I was confident in programming, this class even challenged me to the next level of profession both in Java and in general. This class taught me enormously amount of knowledge of Design and Object-oriented programming. It was mainly because the assignments were time-consuming and they demanded dedication, and also the ability of Prof Kender to succintly pointed out all crucial aspects of Java and OOD.

Prof Kender is very good-natured. He looks tired sometimes but he is full of energy when it comes to lecture time. He is very approachable, and he answers all questions you have in mind. He is very funny in his own way. And above all those, he is a very, very fair grader. (And of course TAs in this course are just like that.)

Those who wants to master in programming will not regret taking this class. You will learn much more than the Java itself; you will encounter a lot of situations where you have to decide in terms of design and strategy. You will be ready for the next level of programming, which is in bigger scale and more complicated. I would say that I appreciate this class so much, both from Prof Kender and from the class itself.

Beware though, the class is a little tough.","Five assignments. Two weeks for each.
An assignment composes of two parts: theory and programming.
Usually an assignment would take your whole weekend -- i'm kidding -- just about 20 hours for me. (If you manage to work for your assignment as early as you can, you will surely survive.)","7","Object-Oriented Programming and Design in Java","COMS W1007"
"58","2906","Wed, 12 Mar 2003 00:00:00 GMT","4861","515","Professor Cannon was one of my favorite instructors at Columbia. He's really nice, and he makes learning about what some consider to be a difficult subject much more easy. During his first lecture, Professor Cannon said that students shouldn't be intimidated by the fact that he works at Los Almos because he ""isn't creating Terminator."" Definitely an interesting class, I learned a lot to prepare me for 1004","about 7 homework assignments, text reading, midterm, final","7","Object-Oriented Programming and Design in Java","COMS W1007"
"59","2906","Sun, 06 Jan 2013 09:23:40 GMT","27933","42","First of all, W1007 is now Honors Introduction to Computer Science and no longer 	Object-Oriented Programming and Design in Java. If 1004 and the old OOP course had a baby, this monstrosity of a course would be the result. The course had no target audience. It was excessively basic for some, and impossibly difficult for others. In fact, this was evident from our midterm scores - the curve had two peaks!

That said, this was an exceptionally well taught course thanks to Professor Kender. This man can teach. Kender is truly silver (possible gold) nugget worthy. While the content of the course was not the best, (not Kender's fault - he has to comply with the CS department) Kender did an amazing job at teaching it. His lectures were a joy to attend. He is organized and methodical and teaches in the order of the chapters in the book. He has a great sense of humor and tells at least one awesome joke per class. He also gave us lots of cool extra information because this is ""an honors class"". Also, he has this strange, but fun obsession with the Principle of Least Surprise (PoLS).

Don't let Kender's imposing figure scare you. He is a very approachable and reasonable professor who will take the time to help you out. If you're too intimidated to ask him a question in person, there's always the online solution. This course used Piazza which was great since it allowed us to ask questions anonymously and clarify doubts in the assignments. Kender is on Piazza almost 24x7 on the weekends before assignments are due.

Assignments were of variable difficulty and length. Many of them were poorly worded causing some confusion. Some were very interesting like making a GUI game to play Rock, Paper, Scissors, Lizard, Spock with an AI engine. The assignments were usually graded within a week or two. The TAs were for the most part good. One TA (name not disclosed) was very stingy with grades and always screwed the assignments he graded. This unfair grading affected some very unlucky students.

The midterm and final were long but manageable. Note down everything he says in class. His tests mainly consist of questions from topics discussed in class, especially violations of PoLS. Grading was extremely fair - not easy, not hard. He takes a long time to get exams back because he corrects all of them himself (and he unfortunately had an ill member in his family this semester). He gave us candy canes during the final because glucose apparently stimulates brain activity. Needless to say, that was the most entertaining exam ever.

All in all, if you have a strong foundation in Java and design, skip this course. But try to take Kender whenever you can. He makes this course worth while with his godly teaching prowess and great sense of humor.","More than the average class.

5 Assignments every 2 weeks (take anywhere from 6 hrs to 2 days to finish) (10% each)
1 Midterm (20%)
1 Final (30%)","7","Object-Oriented Programming and Design in Java","COMS W1007"
"60","2906","Fri, 28 Sep 2012 19:07:20 GMT","27561","3409","I'm optimistically assuming that the computer science department has the sense to never let Professor Blaer teach this class again, in which case this review doesn't really serve much of a purpose.  However, given the finite probability that computer science continues to show the lack of judgment that they showed in allowing him to teach COMS 1007 this past summer, I feel justified in writing this review.

I just got reminded this morning that I took COMS 1007 with Professor Blaer this past summer when I got an email that my grade arrived.  The date of the final exam was Thursday August 9th.  I had been checking Courseworks weekly since the end of the course, and this is the first time that I saw the grades posted for assignments 3-4.  I am currently enrolled in COMS 3137 and have completed the first two assignments prior to receiving my grades for the last two assignments and my final grade from COMS 1007.  There is still no grade posted on Courseworks for the final exam, and given that combined with the discrepancy between how well I did in the course and how poorly I felt I did on the final, I'm wondering if he even graded and/or counted the final exam.  This might sound like an outlandish accusation, but the classmates who I've talked to are  all speculating the same idea.  

Professor Blaer told us during the final lecture, on Tuesday August 7th, that he was setting the following Monday as the grading deadline for the TAs, and therefore that we should expect to know our final grades by the Tuesday of that week.  We were never contacted with notification of any delay.  At first I thought it was just me when my grade wasn't posted all summer, but then I got to COMS 3137 and found that several of my classmates who were in the summer class had not received their grades either, and we all had contacted him several times via email, telephone, and direct office visits.  Professor Blaer didn't respond to most of the emails or telephone calls, and he wasn't in his office when most people arrived.  However, whenever one of us did hear from him, he said that the grades would be up ""by the end of the day.""  

The lack of feedback and organization in this class was representative of the fact that the concern for students' learning was absent, which is a shame.  After all, isn't that the point of any class?  Professor Blaer's lectures were fine.  They weren't amazing, but they were fine.  However, in teaching a class in computer science, organization and feedback are at least as important as the lectures.  I'm my personal opinion, they're far more important because most of the true learning comes from working through and receiving feedback on assignments. ","The workload consisted of four homework assignments (worth 50% of the grade), one midterm exam (average ~79 - and worth 20% of the grade), and one final exam that was said to be worth 30% of the grade, but most people are wondering if he ever graded/counted it, and the average was undisclosed.  The assignments were fair in their content, but they were timed pretty poorly, such that the last one was due the midnight before the final exam.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"61","2906","Tue, 11 Dec 2007 00:00:00 GMT","20556","515","Professor Cannon is an awesome teacher. The class has a really heavy workload, though. Most of what he teaches in class is in the book, but he clarifies it and makes it easier to understand. You have to learn all of Java code on your own though and it can be really frustrating because many times you won't know where to start. The TAs are EXTREMELY helpful, though. I highly recommend that you go to office hours at least once a week because they usually teach you Java concepts and code. The class may be hard and the workload tough, but its a class worth taking because you learn A LOT. ","There are 6 homeworks-but each homework has two parts, theory and programming. The theory is due a week from when it was assigned, and the programming is due two weeks after it was assigned. The workload is pretty fair in the beginning of the semester, but it gets heavy with the third homework.
Midterm and final--hard but okay if you study well.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"62","2906","Sat, 02 Jan 2010 04:13:51 GMT","23731","42","Kender is one of the best (and most intimidating) professors I've had here. Lectures were very well-structured and easy to follow without being simplistic, and although the material was occasionally a bit dry (idiom memorization is not exactly thrilling), Kender's understated and offbeat sense of humor kept things interesting. He puts the material into perspective--the class is taught only in Java, but he explained the language's current (and rapidly shrinking) place in the field and how it differed from other languages (often in the form of deadpan disparagements). While he spent a good portion of the first few weeks of class waiting for students to answer questions, eventually the class began to respond and lectures became more smooth and interactive. Despite a scant four-month programming background, I felt comfortable with the material largely due to the clarity and thoroughness of the lectures.

While the first assignment was difficult, Kender polled the class on our experience and modified the next assignment based on the responses (similar polls happened after all assignments and the midterm), which I really appreciated. He took pains to keep the class fair despite challenging material.","Five assignments of varying difficulty and length (all took me 15+ hours), graded quite fairly. Impossibly long midterm and final exam, both of which were curved generously. Occasional reading is really helpful but also explained in lectures.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"63","2906","Mon, 13 Dec 2004 00:00:00 GMT","9922","515","he's so nice and very relaxing while teaching
approachable... he's willing to have an appointment with you if you can't make it to his
office hours
take his class!","5 hws 1 midterm 1 finalthe homeworks are pretty tough, and take long time to finish it","7","Object-Oriented Programming and Design in Java","COMS W1007"
"64","2906","Wed, 21 Dec 2011 02:39:16 GMT","26641","42","I have no idea why this guy has a silver nugget. He's not a good teacher. At all.

He always has a very, very specific answer in mind when he asks questions. In class, this leads to him calling on several people before he hears exactly what he wants to hear. He often gets exasperated at people not saying the right answer immediately. What's important to note is that often the right answer has been said, but he just didn't notice because he was too fixated on having it said exactly how he thinks it should be.

That's how it was on the exams as well. Clearly, he thought of the answers before he thought of the questions, and didn't spend much time thinking about how to phrase the questions. They were completely incomprehensible. On the midterm, he even gave us all an extra 8 points because he admitted that one question was so terribly convoluted. On the final, the chalk boards were covered by the end of the exam because of how many changes he made to the directions. I must have lost 20 minutes going back and redoing stuff because he was redefining the questions as we were taking the exam!

The work load is enormous in this class. Again, the questions were often ambiguous. If you badgered him on the discussion board, he'd sometimes clarify things. He also didn't check the API before assigning some of the graphics stuff. I must have spent 20+ hours combined trying to work around bugs in the API to try to make my designs the way he wanted them. I even sat down with him once in office hours to read through some unofficial API source code, given that his response to one of these bugs was, ""Hmmm...that's unexpected...""

Overall, this class was the most frustrating experience of my semester. If I didn't have to take it, I wouldn't have. I don't feel like I learned that much (except for some interesting stuff in chapter 7 about generics). I feel like if Kender had been focused, it might have been a semi-enjoyable experience. He was too much in his own head and didn't interact well with students, though.","Unreasonable. In fact, on the course evaluation one of the check boxes was next to ""So much I didn't learn anything."" The fact that he would even consider this to be an acceptable option speaks volumes about how he approaches this class. ","7","Object-Oriented Programming and Design in Java","COMS W1007"
"65","2906","Thu, 10 Sep 2009 15:33:28 GMT","23146","42","Professor Kender knows his stuff.  His lectures are not the most engaging and gripping, but they are eminently useful--pay attention!  His homework assignments are extensive and fair, clearly utilizing the skills taught in the previous unit.  He has an abrupt personality, but respects the course, the students and teaching in general.  Tests are difficult and graded harshly, but the class is curved at the end of the semester.","5 assignments (one ever two weeks, approximately 8 hours long.  Time required depends mostly on your experience with programming), one midterm and one final.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"66","2906","Wed, 04 Jan 2012 22:55:04 GMT","26824","42","I have to disagree with the review below me on multiple accounts.

First, workload: There are five assignments, a midterm, and a final. For each assignment, we were given at least two weeks if not more. Kender, though as inscrutable as Dumbledore in his answers, will point you in the general right direction through discussion boards, and office hours with the TAs and Kender himself will help you if you're ever feeling totally lost--but to take advantage of this, you MUST start the assignment earlier than the weekend before they're due. They can take up to a whole weekend to do but often much less. They are difficult, but they can be fun and you'll learn something from each one.

Second, as for the phrasing of questions, he just likes for you to state the reason behind the answer rather than rote memorization. To reiterate what previous reviews have said, he seems grumpy but he's really a sweet, witty, silver nugget-worthy guy.

He's like an m&m with a hard crunchy outer coating but is really just a sweet, melty, softy on the inside. If you really took his exasperation to heart, then do yourself a favor and get over yourself. He's not a kindergarten teacher who will hug you and listen to your feelings but he will go well out of his way to help you as much as he can without straight up giving you the answer. He wants you to oh my god forbid learn something instead of cruising out with a B+.
 
The grading was very reasonable(not EASY, reasonable), he explained how and why the grades were the way they were, acknowledged when things were unfair, took our feedback into account very well, and if you had a problem with this good luck at Columbia because the fact he even TOOK feedback was like, shocking, at this school. ","takes an average amount of work, read the book to help keep up with the lectures(which is in fact an assignment!!!), if you're really struggling then consider dropping back down to 1004 or something because you do need strong basic programming skills to do the assignment. if you don't have them, it will make a moderately difficult class way harder. ","7","Object-Oriented Programming and Design in Java","COMS W1007"
"67","2906","Fri, 17 Jul 2009 17:20:43 GMT","23022","3409","As one of those students NOT coming from a strong CS background, I just have to put it out there that each homework assignment took me roughly 10-15 hours to complete. As for Prof. Blaer, I thought the textbook was just as good a teacher as he was, since he mostly repeated what was in there with some additional reinforcement and examples. He is fairly accessible and does a decent job of presenting the material, but ultimately Java is something you learn mostly by yourself. I certainly learned a lot through the programming assignments. Overall I would recommend him just because he's so helpful and cares about the students doing well.","6 programming assignments, the first and last were somewhat easier than the middle ones.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"68","2906","Fri, 06 Apr 2001 00:00:00 GMT","972","515","Amazing! Has a wonderful sense of humor and keeps the class flowing and interesting -- keeping in mind that this is a CS class, that's unbelievable. He actually incorporates such devices as comedy, wit, and humanity into an intro to CS class. A CS class! He is absolutely a must take for CS. Cannon is fabulous! Any class he teaches is worth taking. Any professor whose computer's DOS command line reads: is a must take! While first time CS students may struggle at the beginning, it's largely due to the sheer bombardment of new material that has to be absorbed when learning to program for the first time (many students don't take Cannon's studying suggestions seriously -- as he says he expects since he wouldn't have listened to himself when he was an undergrad). The workload is very do-able though, especially compared to what Data Structures is alleged to laden you with.","Biweekly assignments. Every other one is a ""hard"" assignment. Fairly easy midterm if you know what you're doing.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"69","2906","Sun, 31 Dec 2006 00:00:00 GMT","17396","42","At first, he seemed like a very professional, no-nonsense sort of teacher who would teach a lot but give the most boring lectures ever.

In reality, he is a very professional, no-nonsense sort of teacher with the most entertaining lectures ever. You learn a lot and have a bit of fun with the class too. 

Great intro to the CS department. He's a great professor.","5 Assignments, 1 Midterm, 1 Final","7","Object-Oriented Programming and Design in Java","COMS W1007"
"70","2906","Fri, 02 Feb 2007 00:00:00 GMT","18380","515","I wish I had met the Adam Cannon everyone else seems to be talking about.  Adam Cannon's class was horrible and the class was anything but an introduction.  
***********ATTENTION**************
If you do not have a computer science background and don't consider yourself a computer science guy, DO NOT TAKE THIS CLASS.  Take 1004 instead.  
He lies to you at the beginning and says that even if you've never touched a computer before you can do well in this class.  Nonsense! I assure you even if you have a decent CS background you WILL SUFFER.  
I made the stupid decision to take 1007 because I thought I had enough computer science background to ace the class.  Turns out my 2 years of CS background in high school (which I had easily aced) in no way prepared me for this class.

Despite what he says, this class is INTENDED for CS majors so if you're not a CS-major don't make my mistake, stick with 1004 or an easier CS intro class.  I wasn't the only one who had a horrible time in this class either, I know plenty of people who suffered through it and many others who dropped out altogether.

Again, take my warning, if you're not a CS-major DON'T take this class.","Many homework assignments, the first 2-3 were easy but soon they'll become impossible to do.  If you're not a CS guy you will NOT be able to do them anyway.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"71","2906","Sat, 01 Jan 2000 00:00:00 GMT","820","515","Professor Cannon is your classic young, nice guy professor, who just wants to get in good with his students. Despite having over 200 students, if you reach out to him, he'll never turn the cold shoulder. He is willing to stay in his office until all hours of the night, waiting until every single student has received attention. Bearing a bit of a resemblance to Dave Matthews, he does happen to be a really cool guy. He also exudes a real enthusiasm for the subject, which is a bit of a breath of fresh air. Unfortunately, this comes at the expense of really knowing the material very well. He forgot the JAVA syntax frequently, and occasionaly was at a loss for an answer to a student's question. For people without any programming experience at all, expect to be really lost for the first month or so - Professor Cannon has a hard time getting fundamental concepts across in a coherent manner. Luckily, if you're willing to go to his office hours, and if you attend recitation, these things really do get cleared up, and by the end you really do have a strong grasp of JAVA. I would absolutely recommend him to anyone considering taking computer science.","Bi-weekly assignments which can be killer if you leave them for the night before. From what I'm told, his assignments are actually easier than the ones previous 1007 professors have assigned. LONG midterm, and a relatively easy final.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"72","2906","Mon, 27 May 2002 00:00:00 GMT","2804","515","Take any class with this man!! Absolutely great. One of the nicest ppl you will ever find and he does anything to help his students. He is a dynamic prof. who even makes smthing dry like cs funny! A rare gem in the otherwise mediocre cs dept. Why can't every prof at Columbia be like him?? ","Really fair workload. Generous grader. ","7","Object-Oriented Programming and Design in Java","COMS W1007"
"73","2906","Mon, 07 Jun 2004 00:00:00 GMT","9068","515","Awsome guy, very aproachable in and out of class. Often in his office and not to upset if you stop buy. He is a fun charcter, his unix prompt displays ""Command me baby:"" which everyone got a chuckle from. The class is easy if you are into comp sci and a nightmare if you are not. Great intro to java course though, highly suggested for all people considering a computer science major. I decided to do it because of this course as well as a friend of mine. ","Heavy for non geeks, Geeks are fine. Midterm, final, 4-6 homeworks take a long time though on the homeworks.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"74","2906","Mon, 29 Dec 2003 00:00:00 GMT","7448","515","On the first day of class Cannon said that this course required hours of frustration in front of the computer, and he was telling the truth.  Projects are difficult and long, but they do a good job of teaching java.  If you do the projects and attend lecture, exams aren't too painful, and he will look over poor exam grades if you do well on the projects (get them to work).  The curve is very generous reflecting the heavy workload.  Overall, this course can be hell while you are in it, but in the end your knowledge of computer science is extensive.","","7","Object-Oriented Programming and Design in Java","COMS W1007"
"75","2906","Thu, 14 May 2009 19:42:17 GMT","22777","3409","As one of the students that has ""practically taken this course before"" mentioned below, I should preface this review by noting that if you have any kind of Java experience beyond the AP CS AB level, you should really try to test out of it. I asked about skipping the class and was strongly discouraged by everybody in the department that I talked to; in the end, I think that was a mistake.

That being said, a class that by all rights should have been an unbearable repetition of things I'd already taught myself turned out to be a reasonably good experience. Blaer is a really engaging lecturer and an all-around smart, friendly guy -- he was happy to entertain various questions I had about side projects totally unrelated to the course material, and is really accessible outside of class.

The homework turns out to be enjoyable as well -- there's enough freedom and flexibility in the assignments, particularly the middle few, that you can have fun playing around within the constraints.

All in all, I highly recommend Blaer (and would happily take any other course he teaches), but be wary of signing up for 1007 if you come from a CS background.","6 homework assignments, due every 2 weeks, that take 2-4 hours to complete if you have a good grasp of Java (and, I'm told, many more hours if you don't).

1 midterm, 1 final, both fairly predictable and not too difficult.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"76","2906","Sun, 04 Jan 2004 00:00:00 GMT","7520","515","Professor Cannon was great. He was very approachable. If office hours didn't work out for you or if he felt you needed extra help, he would make time for you outside of his normal Office Hours. He is also extremely witty (even obscene and completely politically incorrect at times). However, the content of the course was too difficult. I am not a ComSci major, but this was even tough for someone majoring in the topic. He warned us that we should consider switching into 1004 if we didn't feel up to the challenge. I took 1007 because I wanted to study with Professor Cannon. I took his 1001 class and loved it. I should have swallowed my pride and took the easier class. If you are looking for an easy-A, this is not the class for you, but if you are looking for a challenge and struggle, have fun. His wit and humor could be worth the trouble.","5-6 programming projects, every other one is considered ""difficult"" (but they were all difficult). Plan on spending many hours in TA Office Hours trying to figure out what to do. If you do not complete all of the assignments, Professor Cannon warns you that you cannot pass.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"77","2906","Wed, 19 Jan 2005 00:00:00 GMT","11283","1891","Insane.  Who cares about machine language?  I just want to learn the basics of programming.  The homework problems were impossible, although the programming was hard yet doable.  This professor needs to understand that anybody interested in compsci as a major would be scared away by this course.  Comp sci is not this hard.  An intro level course has no need for 0 and 1 machine language programming.  ""1000000100000100   // R0 = M5; load memory location 5 into R0"" Well thanks I'll remember that next time i have to tell the machine how to load numbers into the CPU!

Honestly one of the worst classes I have ever taken.  Need I even elaborate on the fact that close to nothing was ever taught in class that could later be used in homeworks or programming assignments?

Anyways, I'm done venting.  Take my advice: If he is teaching any kind of intro class, flee it and take another one.  This was ridiculous.","Weekly HW set (so useless and timeconsuming) or programming assignment (usefull and doable), midterm and final will leave you pissed off.  Don't wait to drop this class.  Do it now!","7","Object-Oriented Programming and Design in Java","COMS W1007"
"78","2906","Mon, 04 Feb 2002 00:00:00 GMT","2029","515","Adam Cannon is the best teacher I have had at Columbia. He is a really cool guy and an awesome person. He has a great sense of humor..his jokes are funny and he is so cool. All the people I've talked to about him think hes a great teacher. His lectures are really good...he's great at explaining complex ideas. He is always willing to help. He sincerely cares about his students and how they do in his class. He's a great teacher and I've also heard that many of his female students have had crushes on him. ","It's a CS course so there is alot of work, but he's always willing to help.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"79","2906","Mon, 23 May 2011 05:21:15 GMT","26156","3409","Most teacher I've had at this school thus far have been subpar (*SHITTY*). Blaer is very interesting and funny! He makes everything very understandable and the TAs are very accessible over e-mail. If you get how to do the homeworks you should have a good grasp of everything. The homeworks can take a bit, but they aren't intimidating. Seriously, just pay attention in class and write down everything he says. Should be an easy A if you dedicate some work to it!

Blaer was awesome! It feels so weird that I can actually do programming! WA THE FUUUUH?!","5 homeworks (2 weeks to do each, with 1 that we had probably like a month to do and one that we had like 1 week). They are really doable, especially if you have friends who know programming/people in the class who get the hw/if you go to office hours/if you ask the TAs over e-mail.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"80","2906","Fri, 24 Apr 2009 20:44:34 GMT","22624","3409","Professor Blaer seems to know anything and everything there is to know about the Java programming language, and practically lives and breathes CS.  He's always happy to explain the finer points of Computer Science to us.  His office hours, immediately after class, are held at an unusually convenient time for most students and even if it takes him more time than he thought it would, we rarely go away with our questions unanswered.  In addition to holding his posted office hours, he vigilantly monitors the course discussion board.  His board posts are essential (and appreciated) given the difficulty of his assignments.

The 6 assignments can be quite time-intensive for people who are less than overqualified, including top students from the recommended prerequisite course (COMS W1004).  A substantial number of students have a much stronger background than this, and some have practically taken COMS W1007 beforehand.  These may be the people who would call the workload ""not too bad.""  The rest of us just get a lot of programming practice.  Fortunately, the grading and grading curve are generous.  The median grade is usually B+, and this semester it might be A-.  

Lectures are understandable and thorough.  Professor Blaer sometimes talks so quickly that note taking becomes a bit difficult, but most of the material is from the textbook anyway.  The textbook, _Object-Oriented Design and Patterns_ by Cay Horstmann, explains concepts reasonably clearly but provides inexcusably buggy solutions to exercises.  Exams are long and information-intensive, but manageable if you've studied.

Professor Blaer LOVES to make fun of students who procrastinate (he never singles out individual people but talks about Columbia students as a group).  He is also merciful toward those who do procrastinate, because of his liberal extension policy.  Sometimes he says things about the average student's level of organization (i.e. our lack thereof) that aren't true.  I hope his lectures get put on CVN because they are so good, but those parts are cut because they reflect badly on Columbia University and are a lie.  Most students are doing well this semester, and our organizational skills are one of the reasons. 

I highly recommend this course, but only if a student has taken COMS W1004 or the equivalent beforehand.  Otherwise they might get buried in coursework.","Watch out!  The biweekly assignments can easily run to 20+ hours, or even 30 hours.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"81","2906","Sun, 12 Aug 2012 21:45:26 GMT","27498","3409","I honestly wanted to like this class, and expected to after reading several positive reviews.  Maybe there is an inherent flaw in teaching a class like this during the summer, but I suspect that the fatal flaw of this class was that it wasn't well planned.  Nonetheless, as I read the other reviews of Professor Blaer, I am suspecting that he might be better at implementing a course during the fall or spring than during the summer.  

It seemed that this entire class was planned as an afterthought, and the class seemed to operate under principles that I previously thought violated those of learning computer science.  I thought computer science was about thoroughly understanding concepts and creatively applying them to solving problems.  I also thought that lectures were a supplementary feature to the learning process, and that the most important part of the learning came when working through assignments.  Finally, I was under the impression that computer science is a subject one couldn't cram for, and the way to learn is through practice.  I'm hoping that I was right about all this, and that the only reason I am questioning it now is due to the faulty implementation of this course.

I went into this class with the expectation exams should be doable if one is able to figure out the homework assignments on your own.  After all, the purpose of said exams are to ensure that people truly understand the material and don't get rewarded with a top grade for getting through the assignments without fully understanding them (for example, by getting excessive TA help or copying from other students).  However, that really wasn't the case in this course.  The exams tested concepts and syntax that were not covered in the assignments, or that were covered in assignments that weren't assigned until after the exam.  (For example, the first time we were ever asked to write a program using anonymous classes was during the midterm exam.  These is nothing inherently difficult about using anonymous classes in Java, as it is just a quirky syntax to get used to.  However, this straightforward exam problem was significantly more challenging due to the fact that we had never been asked to implement an anonymous class on the computer prior to the exam.)  To be fair, he did teach the concepts in lecture, but it is very difficult (for most people) to learn computer science enough to quickly apply it exclusively through lectures.  

Another expectation I had in taking a computer science class over the summer was that I'd be drinking from the fire hose.  I thought I'd be working hard and losing sleep to finish assignments on time.  The only time I truly found myself working hard and losing sleep to get the task done in the time allotted was when cramming for exams.  

There were only four homework assignments, each of which consisted of a written portion and a programming portion.  The content of these assignments was fair.  They were time consuming (except for the first one), but completely reasonable in scope.  Nothing we were required to do went beyond the concepts discussed in class, yet I still found myself learning a good deal while working through these assignments.  That being said, I would've liked another assignment or two in order to thoroughly learn the material that was covered on exams but not on the projects, as well as to lessen the weight of each assignment on our grade.  Moreover, he extended the deadline for every assignment, which was great for the students who procrastinated.  However, for those of us who started the assignments when they were released, these extensions were more of a punishment because they were often granted after we had already allocated significant time to completing the assignment prior to the original deadline.  Further, he did not make the new assignment available until the extended due date of the previous one (despite promising to make them available earlier on a few occasions).  Due to the poor timing of assignments, the final assignments ended up being due the midnight prior to the final exam.  

Feedback was another story.  Initially there was a single grader for the class, and as a result we did not receive feedback on the first homework assignment until the middle of the fourth week of class.  At that point, a new grader was hired.  The class ended last night and we have currently received feedback on two of our four homework assignments.  It also took two weeks to hand back the midterm exam in class.  To be fair, the instructor admitted that the lack of TA help was a problem the course was facing.  However, these delays were more than just annoying: they caused many students to be penalized multiple times for the same mistake.

Lectures largely consisted of presentation of the textbook author's slides, from the book ""Object-Oriented Design and Patterns"" by Cay Horstmann, and occasionally he'd present additional examples of his own.  These lectures were fine, but not exactly easy to pay attention to for three hours.  Easy or not, paying attention was important, as many points he made during lecture had a tendency to show up on exams despite not appearing in the assignments nor being emphasized in the textbook.  When the instructor presented his own code, there was often a several day delay between the presentation of the code and the uploading of this code to the course website, which made at least one of the assignments much more difficult than it needed to be.  

If you are planning to take this offering in the future, make sure you are very confident in your ability to learn computer science quickly and without much practice.  Otherwise, you will probably be sensitive to the problems with the course.

","The grade was calculated with the following weights: 50% Homework Assignments (of which there were four), 20% Midterm Exam, 30% Final Exam.  ","7","Object-Oriented Programming and Design in Java","COMS W1007"
"82","2906","Thu, 18 Nov 2004 00:00:00 GMT","9745","1891","DO NOT!! I REPEAT DO NOT!! TAKE THIS CLASS...if you know whats good for you..you will stay away.  THE WORST PROFESSOR I HAVE EVER HAD...seriously....he doesn't explain anything...all he does is read the lecture notes online.  He expects us to know theory and concepts that even the TAs learned just a few weeks ago.  The TAs were the only good thing about this class...all of them were extremely helpful","6 homeworks, 1 dropped.......6 programs, 1 dropped, midterm, final.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"83","2906","Tue, 25 Jan 2005 00:00:00 GMT","11416","515","Believe what you read/hear about this guy. He is AMAZING. He is nice about extensions (he's willing to give you extra time on one of the five assignments- meaning you just can't do it all the time). If you attend lectures and understand the material you will do very well on the tests. I knew some java before the class, so that made it easier, but Prof. Cannon will help you- if you're working on it, so is he. He makes himself and the TAs very available to you for help. In class he always stops and attempts to make sure everyone really understands. His lectures are generally pretty interesting and he is really a find. I am a computer science major, however, so perhaps that skews my opinion.","5 assignments, 1 midterm, 1 final. You do need to spend time on the assignments, do not leave them to the VERY last minute. Curve not too generous, but if you work you can do very well.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"84","2906","Sat, 01 Jan 2005 00:00:00 GMT","10559","515","I totally agree with the other reviews. He's a great professor, so take his class. What I found the greatest about him is that he taught more than the course material. Like, he told us in the beginning of the semester that what he emphasizes in class and the vocab definitions he writes on the board are probably going to be on the exam. Such hint is so useful when you are bombarded with tons of vocabs and info that you encounter in the textbook; because then you know which the primary and important stuff are and which are not. Also, he explicitly provided studying strategies for the midterm, which, of course, can be used in other classes. However, I didn't find him all that helpful when it came to seeing him during office hours or through email; so I got help the TA's who were simply great (I had Rachel Goldman, Cheryl Lau, and Lauren Wilcox). They basically saved my life, rather than the professor (yet that's just me; other students maybe didn't need as much help). However, I really liked prof. Cannon; it's worth taking his class and getting to know him.","","7","Object-Oriented Programming and Design in Java","COMS W1007"
"85","2906","Tue, 30 Mar 2010 03:37:50 GMT","24109","42","Professor Kender was one of the most amazing professors I've ever had.  His lectures were entertaining and he taught really well.  I've never enjoyed any other class as much as his.

He's an amazing person with a great sense of humor; I really enjoyed his quirky, nerdy jokes.  He made me care so much more about the class, and I went to every single one of his lectures.  He really knows his material and clearly explains everything.  He is more than happy to clarify any questions, and is very approachable, though he may seem intimidating at first.

I was impressed by the level of attention he gives to his students.  With the assignments, he tries to give as much help as he can without giving away answers, and provides a lot of interesting and relevant supplements and anecdotes.  He is an extremely fair grader and though the class is difficult (generally, most the students are engineers), it is curved.

I would definitely recommend taking this class just for the professor.  He encouraged the class to attend talks and such around campus and to take advantage of all opportunities provided by the university.  He is not only an amazing professor, but an amazing person and makes you feel he cares, even if you've never spoken directly with him.  He clearly has a passion for teaching, and I would seriously recommend holding off taking 1007 a semester to be able to take it with him.","Be prepared to spend a lot of time on the assignments (five in total).  The midterm and final were a bit difficult, but Prof Kender is a very fair person and there is a huge curve.","7","Object-Oriented Programming and Design in Java","COMS W1007"
"86","2970","Mon, 30 Aug 2004 00:00:00 GMT","9343","1621","If you don't your remember probablity and other math from Algorithms then don't bother taking this class because you'll get killed.  In other words, don't ignore the prerequisties for the class because the Prof. will assume that you're comfortable with all the concepts that she listed on the class website. Her lectures are not that good and neither is her handwriting. Fortunately, she makes everybody participate in this thing where in each lecture a student is chosen to take notes for the class. The student is then responsible for converting the notes into LaTeX or PDF and share it with the rest of the class. There are 6 homeworks and one final exam. The homeworks are pretty long so start early. They'll require you to do some mathematical proofs, encryption scheme design, and other theoretical stuff. Take this class only if you're really interested in Cryptography. ","6 hard homeworks, one final exam","7","Introduction to Cryptography","COMS W4261"
"87","2970","Sat, 31 Dec 2011 06:43:20 GMT","26794","1621","A pretty good class. Prof. Malkin makes a point of offering both conceptual and formal treatments of the material, which in principle is nice (as just about every result in crypto is deeply counterintuitive); in practice, I found her lemma-proof-theorem teaching very clear, but the high-level explanations so vague as to be practically useless. Part of the issue was that a large portion of the class didn't really have the mathematical maturity necessary for this course, and she would get bogged down answering basic questions and then have to rush through material. She got better at this (i.e. stopped answering stupid questions) as the semester went on, but it remained frustrating throughout.

Homework assignments were well-designed. Fernando (the TA) was a real stickler for rigor, and I definitely learned to be more careful about writing up proofs by the end of the semester. Midterm (in class) and final (take home) were both trivial; I don't know what the final average was, but due to the aforementioned mathematical maturity problem midterm scores were shockingly low.

As a side note, this can be a great class even if you're not specifically interested in security. I was in learning theory at the same time, and my final project for that class relied on a bunch of cryptographic hardness assumptions---this is about a lot more than secret codes.","Light. A problem set once every couple of weeks that usually took me 2-3 hours (including typesetting). Don't cut corners on your proofs.","7","Introduction to Cryptography","COMS W4261"
"88","3105","Tue, 15 May 2007 00:00:00 GMT","19953","1637","I don't know what to make of Edwards. I like the guy, and I'm *pretty* sure he's a good professor. But I can't prove it.

Edwards knows everything about language design; he's funny and relatively friendly. He keeps the lectures interesting, sort of -- but by the end of the term nobody went to class. For one thing, ONE annoying kid managed to ruin the whole term by asking ridiculously irrelevant questions every five seconds, and Edwards never really tried to shut him up. So the lectures kind of went to shit from that point on.

But! PLT is super-intense and is probably the first (well, maybe OS) 4000-level course that actually kicks your ass. Personally, I like this. You work in groups and design a language; if you're like us, you leave it until reading week and then just live in the CLIC lab for a few days. You can do it, but it's a bitch.

Anyway, you're just choosing between Edwards and... what, Aho? for this class, so choose Edwards.","Two homeworks, which tend to mirror the contents of the exam and final almost exactly. Exams are surprisingly hard compared to the rest of the coursework.

Then you have to implement a programming language... for us, that ran about 30 hours lab time, plus a 40-page report (mostly source code).","7","Programming Languages and Translators","COMS W4115"
"89","3105","Thu, 22 Jan 2004 00:00:00 GMT","7913","1637","PLT is a very dry subject, especially when taught using reams of slides.  However, Prof. Edwards is very funny and made the class very interesting.  He has a warped sense of humor and would spice up the lecture notes with hilarious pictures.  Here are some of his famous lines: ""hangs like a criminal"", ""a lazy approach gets you out of infinite work"", ""Things are always in the last place you look.  Of course they are!  You always stop looking once you've found it."", ""Union is like a structure except its schizophrenic"", ""Symbol table is like a roach motel, you can checkin but you can never leave"", ""computer scientists are smart asses"", ""if thy arc offends thee"", etc. etc.

Oh, to my great delight Prof. Edwards would often preface a topic with ""this would make a great exam question..."".  Take heed this advice!","Homeworks aren't too bad, exams are difficult (study!), and the group project is massive!  For the project, get started early, meet weekly at least, use cvs, get the language design right, don't bite off more than you can chew!  For the exam, make sure you know the basics, know the HW cold, pay attention to good test questions.","7","Programming Languages and Translators","COMS W4115"
"90","3105","Mon, 19 May 2003 00:00:00 GMT","5770","1637","I'll say this for Prof. Edwards: he made PLT way more interesting than it should have been.  He is definitely one of the wittier professors in the CS department, so the lectures were engaging.  But if you're planning on printing out slides before lecture, be warned: there are a lot of them (about 40 per class, on average).  Plus, he really integrates his own research into the lectures, as opposed to just plugging it like other profs.  Central to PLT is a group project in which you get together with three other people and implement a programming language of your own devising, which is possibly the most challenging and rewarding thing I have done as a CS major.  ","Group language project, worth 40% of your grade - very manageable if you plan everything out from day one.  Also, two throwaway problem sets and a cheet-sheet friendly midterm and final.","7","Programming Languages and Translators","COMS W4115"
"91","3105","Wed, 24 Dec 2014 21:57:07 GMT","76954","1637","Stay away from Edwards, go with Aho. Edwards recommends Aho himself. Also, Aho's famous because he's the A in AWK and wrote the Dragon book. The only thing you'll miss in Aho's class is Edwards' sense of humor.

Edwards is the snarkiest, most sarcastic, immature professor you will meet in the CS department. He tells some really great nerdy jokes and his Facebook wall is hilarious since he belittles all his students publicly on it, but I don't recommend taking his class. Don't ever email him with an excuse or stupid question since he will publicly shame you (name removed though) on Facebook.

I didn't learn much in the course. The material was pretty straight forward, nothing really complicated like you would see in more theoretical CS classes. You sort of get a high level understanding of how a compiler works and that's about it. If you did most of the work for your project, you will learn more mostly by reading on your own to save your project and not because you learned anything from this class. 

His exams are reasonably easy but the problem is everyone gets high scores. The median on the midterm was like a 94. If you screwed up even a little bit, you were done for. You don't have to know all the material in the slides - most of it is to build the compiler. He posts review slides the class before the exam. You just need to know the stuff on them. Check out the last semester slides on his website to peek ahead. Grading was harsh and he often cuts points for really dumb reasons. Make sure your HW is perfect if you want a good score.

The project is KILLER. In all likelihood, you will fail if you don't assemble the Avengers to be your team. Make sure you put together a strong team which has time to commit to this project. The project is structured such that one person (the most responsible or the least busy) always ends up doing over 50% of the work. We've looked at other groups and previous teams and this is the case through out. I think Edwards should take a look at this and somehow fix the project so that it's more fair.

Some tips: Start early!!! Get the scanner and parser out of the way quickly. You can copy most of them from last year's groups and just modify them to your liking. He doesn't really teach you enough to write the compiler till 3/4ths of the way into the semester but don't wait for that since you'll get screwed. Semantic checking and code generation take a ton of time to complete. Start early and be sure to pester the TAs for help. Also, half of you team will be slackers and you will lose all faith in humanity. You just have to deal with it.

He doesn't make expectations on the project clear at all, so I'm going to break it down for you here. You need to turn in your proposal 2-3 weeks into class. Get started with the scanner and parser ASAP. Then turn in your language reference manual which says what your language will look like. Then code up the rest of your compiler and put together some tests. Our group ended up writing 70% of our language during reading week and finishing the slides for our final presentation and the project report during finals week. Needless to say, my other exams got screwed in the process.","3 HWs (10%  total)
1 midterm (20%)
1 final (30%)
1 MASSIVE project that will KILL you (40%)","7","Programming Languages and Translators","COMS W4115"
"92","3105","Tue, 28 Dec 2004 00:00:00 GMT","10321","1891","If you are interested in programming languages or are required to take PLT to graduate, I would strongly encourage that you take this course with a different professor. In the beginning of the semester, you will think that Aho's lectures are pretty cool and  engaging. Moreover, there is a sense that you are basking in glow of computer science rock-stardom (he is one of the co-authors of the famed ""Dragon Book"" text that you will be using for the class). But, after the first three or four weeks, we were often told to just look in the book to learn about any new concept. In fact, each new idea that was introduced was concluded with the words ""go look in the book."" He gives affectations to being devoted to his students, and I remember going to office hours several times to ask about topics that weren't being elucidated particularly well by the book. Each time, he forgot my name, and at the end of the (short) conversation, his helpful response was -- guess what? -- ""go look in the book."" This was irresponsible teaching, and he's able to get away with it because he is tenured and famed within his field. His teaching style would improve vastly if he could only say ""go look in the book"" in other ways, like ""refer to the book for more details"" or ""the book contains much more information on this topic"" or even ""read the book and it will explain this concept better than I can ever explain to you during this lecture."" I took this class in Spring 2004, and I'm sadly still bitter about this class. You will learn much from this course, but learning about compilers from this guy would be no better than, say, go looking in the book and reading about it on your own.","No homeworks (!). There is a midterm (20% of final grade), a final (40%) and a semester-long project (40%). The project consists of a language whitepaper, a language design spec, a working implementation of your language, a presentation on how your language works, plus a final report and code print-out (expect it to be about 100+ pages at least). The final was exactly as long as the midterm (both were given during the regular 75-minute class period, and they had the same number of questions) yet it counts for twice as much. TAs were not helpful, but most likely they were overwhelemed with the sheer number of students. Pick your project partners wisely, as you're going to be stuck with them for the *entire* semester. ","7","Programming Languages and Translators","COMS W4115"
"93","3105","Wed, 09 Apr 2014 16:09:08 GMT","29311","1637","Really interesting content, not necessarily taught that well. Writing a compiler is an amazing experience, and if you start early, you should be fine. I went in with no functional programming experience, and really enjoyed learning OCaml and the functional paradigm. I'd definitely recommend the class: at the end you'll have written your own programming language!

START EARLY, and really be selective in picking your team. A bad team will ruin the semester for you. 

","Very easy midterm and final, a few homework assignments that are actually very useful in preparing for the project. The project is massive, but you have all semester--so use all semester. Go to office hours early on. ","7","Programming Languages and Translators","COMS W4115"
"94","3105","Wed, 21 May 2008 00:00:00 GMT","21271","1891","In all, Professor Aho was a pretty interesting teacher who went over quite a bit of useful material in an ultimately fulfilling class. He is friendly and always willing to talk, and is very approachable during office hours. I would recommend him for CS4115.","Two assignments, 1 Final Project, 1 Midterm, 1 Final. The Midterm was deadly, everything else was fine.","7","Programming Languages and Translators","COMS W4115"
"95","3105","Mon, 13 Dec 2010 18:50:01 GMT","24938","1637","I found Prof. Edward's sense of humor painfully annoying and his teaching rather scatter-brained. The topics he covers are all pretty interesting, though, and since the only other option for this class is Aho, I'd definitely go with Edwards.

By far the most educational part of the class was the project in which we had to create and implement a programming language in OCaml. However, learning OCaml was a bitch and made my team yearn at times for Aho's section (you get to use Java). Also, Edwards didn't really ground us in the theory well enough for us to create our own compiler until about 3/4 of the way in to the semester, which made the end of the semester hellish.","1 large team programming project, 3 problem sets (4-8 questions), midterm, final","7","Programming Languages and Translators","COMS W4115"
"96","3105","Sat, 17 Aug 2013 09:57:27 GMT","28582","1637","This review is for Edwards and for the SUMMER version of PLT. There is no summer review of him on here so for those of you who were curious, read on!

Edwards is, plain and simple, the shit. He is quite possibly the most organized professor I have ever seen. His website contains every class of PLT he has taught for the most part including old projects, slides, and documents. Furthermore, his notes are outstanding. In that regard, he has basically done all the work for you. The material is complex at heart but his notes and his descriptions in class make that material very easy to digest. Furthermore, it is evident in every shape and form that he absolutely loves and cares about the material. This man is among the nerdiest to ever exist and he definitely knows his stuff inside and out and forwards and backwards and I feel like he was very effectively in conveying this passion in his lectures. In addition to learning about making a language, you will also learn cool tidbits like C history, language history, or operational details you might not have known about various languages. Edwards is also a total language hipster and spent the first day of class openly trashing Java, C++, and many others (he called Perl an ""abomination""). Therefore, if you are waiting for his endorsement of the ""cool and underground language you haven't heard of, maaaaaan"" then you will find it with OCaml (more on that in a second).

The summer class had two homeworks which were both incredibly easy. The notes will tell you everything you need to know and he doesn't pull any cheap shots; if you pay attention in class and understand the notes then you will be able to breeze through the assignments.

However, the homeworks are only 10 percent of your grade. A whopping 50 percent of your grade comes from a massive project wherein you have to make your own programming language. The other 40 comes from the final exam (no midterm) which, while a little tricky, wasn't too bad.

The project itself MUST be done in a language called OCaml which I had never heard of before taking this class. OCaml is quite possibly the most annoying language you will ever use if only because it has the most frustrating and nitpicking compiler I have ever seen......but the good news is that most of the time once it compiles then it works the way you want it to. Personally, I prefer to write code that blows up, analyze it, and then fix it (and isn't that the purpose of test suites anyway?) but you will have no such luxury with OCaml. Furthermore, it has very unhelpful error messages; it is fairly difficult to ascertain the problem when the only indication of what you did wrong is something like ""Syntax Error"" or ""Expression was 'a * 'b * 'c but was expecting type 'a * 'b list"" (and what the fuck exactly is a 'b list?!?!? I just finished the class and I still don't know). If you thought ""Segmentation Fault"" was bad just wait until you get a load of this. Still, Edwards makes the point that OCaml is an easy language to write compilers in and once you start getting good at it you will see where he is coming from. The language itself is fairly powerful and you can do quite a lot with only a few lines. As annoying as OCaml was I am glad that we had to use it if only to a) learn a new language and b) gain the new perspective and discipline from programming in it. It is also interesting to learn a new language when taking a class dissecting what makes a language ""good"".

START EARLY ON THE PROJECT. The class is 6 weeks long and goes by faster than you'd ever believe. My team and I were pretty good at staying on point throughout but I can very easily see how the project can be a nightmare if you wait until the last minute and doubly so if the team hasn't practiced with OCaml. There were other teams demoing with barely finished languages who appeared to make that mistake; don't let it be you.

The only complaint I have about this class is the time we spent covering Prolog. While it is an interesting language to learn about, I don't know why he spent the time he did covering unification and searching considering AI is already a class here. This part of the class seemed completely out of place and irrelevant next to anything else we had done all summer. There was even a Prolog question on the final exam. It seemed rather pointless to have this question on the final, which is supposed to test my knowledge of programming languages and translators, covering an AI topic and making it worth 10 points.

Lastly, a word of warning: Edwards is a very direct person and is quick to criticize or otherwise shoot down your ideas for your project. Don't take it personally. At first he hated my idea too.","Homeworks are both incredibly easy and are easily finished in a day. Yes, drawing automata can be time consuming but it isn't hard to do.

The project itself isn't too bad. My team was able to do it in 6 weeks. If we can do that then there's no reason for you to fear it. As long as you coordinate effectively with your team and you don't procrastinate it's a breeze. I can see how the contrary can easily become a nightmare.

Lastly, I want to clear up the misconception that PLT is one of the hardest classes in CS here. That isn't true at all (at least not with Edwards). The key to success in this class lies, as opposed to many other classes I've taken at Columbia, entirely on you. You've got to put in the work but considering the time it isn't that bad and it will pay off.

I would definitely recommend taking this over the summer if you can. ","7","Programming Languages and Translators","COMS W4115"
"97","3105","Tue, 04 Mar 2008 00:00:00 GMT","21024","1637","I personally like his interesting sense of humor, but some find it annoying.  As a transfer student, I feel he gave the other side of programming languages than my other class which was more theory-based -- one down side is that he doesn't know that much about the lambda calculus, which seems to be a big hole in somebody teaching programming languages.

In terms of teaching the material, lectures can be a bit scattered but always have great information.  His homeworks and exams are more than fair as they are straight out of the lectures.  If you are in his class, attending the lectures will make you do well in the class.","The workload was overall about the same as some other programming classes like Networks with prof. Misra, but is definitely less work than OS","7","Programming Languages and Translators","COMS W4115"
"98","3105","Fri, 31 Dec 2010 23:37:56 GMT","25299","1637","A word on Edwards. He would spend a good deal of time telling jokes that apparently he found funny. Humor can be a great teaching tool, but this isn't the Laugh Factory, it's a university. The topics covered in this course are difficult, and having to listen to the professor joke his way through his lectures is irritating and frustrating. As for his metaphors, I have heard people tripping out on drugs make more sense.

If you have no experience with functional programming do not take this course. Read up on lambda calculus and OCaml (which he has a huge hard-on for) before you even entertain the idea of taking this course with Edwards.","Huge project. Not too difficult midterm and final. A few individual programming assignments that if you do not know about functional programming you will not be able to do.","7","Programming Languages and Translators","COMS W4115"
"99","3807","Tue, 28 Dec 2004 00:00:00 GMT","10332","1891","He is very nice and interesting, but I feel that everything he says in class is posted online  which makes coming sort of pointless.  His midterm was very easy and the final was very hard.  The homeworks ranged from easy to hard.  There was not much of a curve in the final grade.  ","Homeworks are 25 percent of grade, problem sets are 25 percent, midterm is 25 percent and final is 25 percent.   This class should take up a LOT of your time (all you first years will not need to worry about being bored)","7","Intro to Computer Science- Programming in Java","COMS W1004"
"100","3807","Tue, 25 Jan 2011 03:36:08 GMT","25601","515","Cannon is a phenomenal teacher.  If you're not interested in computer science, go to class just because it's fun.  Since it is an INTRO course to computer science and java, he does a really great job at explaining concepts, etc. and will happily answer any question.  You will learn so much more from being in class than by reading the textbook.

That being said, read the textbook and make notes!  The midterm and final both include a vocabulary section - where you have to write a definition for the given words (note, Cannon gave us a list of 100 possible terms for the final and tested us on 10).

The midterm is really easy if you're prepared.  Do the work, meet with TA's, etc. etc. etc.

The programming assignments will take a lot of time, so definitely do NOT start the night before they are due.

Let me say again - Cannon is a phenomenal teacher.  He is an amazing lecturer and makes class fun.  He always has a good story, funny / snide remark, or riddle / brainteaser to share. ","An assignment every week alternating between a written assignment (problems in the textbook) that is generally quite easy - and a programming assignment that is generally quite difficulty.  One midterm, one final.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"101","3807","Thu, 30 Mar 2006 00:00:00 GMT","14364","515","Prof. Cannon is awesome. He tries to make the course interesting and makes a ton of jokes. He wants everyone to do well and really makes it easy for you. The TA sessions are really helpful. If you put in the work you can def. get an A and you might even find yourself more interested in comp. sci. after a course with him","homeworks-- not bad and if you do them they count a lot and can help your grade.
midterm/final, pretty straightforward with no suprises","7","Intro to Computer Science- Programming in Java","COMS W1004"
"102","3807","Thu, 20 Jan 2011 23:25:44 GMT","25578","515","Cannon is a great lecturer. He's very clear and has the wonderful ability to see things from a student's perspective. I believe he's been teaching this class for several years, every semester and so the class is well-planned and thought out.

I would recommend going to all the lectures, you'll really learn a lot and also you probably won't have to spend much time reading Big Java for the assignments if you attend class. Plus Cannon always goes on random CS-related tangents every once in a while and these are generally fun and informative.

As for the class, it's got two components; theory (Intro to CS) and programming (Intro to Java). Theory and programming homeworks alternate from week to week. Theory homeworks are not too bad, they can be done just from reading the relevant chapters in the book. Programming ones can be challenging and take varying amounts of time (depending on who you are) but you will certainly learn how to program at the end of it.

Midterm and final aren't all that bad if you've been keeping up with the lectures and the homeworks. They're a bit on the memorization side of things - especially the final which asked some pretty obscure questions which is why it's good to attend lecture because he often mentions random things that I noticed ended up on the test.

I should mention that although this is intro CS, it's a pretty high level intro so don't take the class for the granted - you'll have to put in some work to get an A.

Also there are lots of office hours and for the most part the TAs are great so I would highly recommend popping in if you have question regarding your assignment; even if you code works, you might wanna just make sure with the TAs that your design, etc. is okay.","See above.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"103","3807","Sun, 15 Nov 2009 21:09:17 GMT","23289","515","A good teacher. I had zero comp sci background and am doing fine in the class, he's awesome at office hours and explains things really well. A lot of people who complain about the workload also start the assignments really late, which is a bad idea. A great class and a funny teacher, i enjoyed it. ","can be a lot at times, take his advice- if you haven't made in progress in half an hour stop and get help.
book questions can be a drag but are pretty easy","7","Intro to Computer Science- Programming in Java","COMS W1004"
"104","3807","Wed, 07 Jan 2015 00:59:24 GMT","78264","515","Be warned: Cannon does not hold your hand. He assumes that everyone in the class is wicked smaht and tailors his lectures, assignments, and exams accordingly.

But I strongly disagree with the reviewer below. I walked into Cannon's class with no programming background, but I found his class enjoyable and occasionally challenging. The only prerequisite you need to succeed in Cannon's class is good time management.

Start on your assignments early, and ask questions on Piazza or during office hours when you get stuck. Read the assigned chapters BEFORE you go to lectures: Cannon does an excellent job clarifying tricky material in class.

Aim for comprehension - make a serious effort to understand difficult concepts as well as your mistakes on the assignments - and you will do very well in this class.

--

I do agree about what the other reviewer said about the TAs. The VAST majority of them, especially Zoe and Anusha, are just the sweetest people you'll meet on this planet, but yes, a few of them are unbelievably rude and disgustingly condescending.","6 Problem Sets, 5 Programming Projects, 1 Midterm, 1 Final","7","Intro to Computer Science- Programming in Java","COMS W1004"
"105","3807","Wed, 17 Dec 2008 16:52:32 GMT","21801","515","I was very happy to see Professor Cannon has a star, which I think he deserves.  COMS W1004 could be one of the best courses at Columbia.  I would recommend this course to any strong student up for a challenge, even one who does not need COMS as a requirement.  Professor Cannon says it is not easy and tells us which assignments are especially hard, but CS will teach you a new way of thinking about the world.  Professor Cannon covers the basics of both hardware (the physical structure of the computer) and programming, so by the time you're done with the course you will probably know which topic you like better.  Lectures supplemented the readings and helped clarify which aspects of the materials were the most important.  One of Professor Cannon's strengths was making complicated concepts understandable.  He is willing to go over the same idea more than once, even at the expense of glossing over a few simpler programming concepts that I would have liked the lectures and assignments to cover a bit more thoroughly.  The final was DEFINITELY harder than the midterm, although neither was excessively difficult.

It's a good idea for people without a very strong programming/hardware background to take W1004--you learn quite a bit about both and are a much more fluid programmer by the time you reach the more advanced courses.  Professor Cannon was very good at introducing us to the academic organizations and resources the CS department offers.

The fact that there are many TAs means that you should be able to come to a good TA's office hours (in my experience, decent to good TAing was the rule rather than the exception).  Professor Cannon is also accessible and reasonably flexible.","THIS COURSE IS NOT A JOKE!!!  For me, the workload was 5-18 hours a week.  Start readings, assignments and exam studying at least 4 days early, because you don't know how long it will take to understand a concept or get a program to work.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"106","3807","Wed, 29 May 2013 15:45:17 GMT","28476","515","Funny in class. Kind of mean in office hours. A fair grader. TAs in this class really care and are helpful. However, going to a TA other than the one who is going to grade your problem set is usually a waste of time because the open-ended short answer problems are subjectively and sometimes harshly graded. For programming assignments, all the TAs are amazing and Cannon gives good advice during class. 

Also there is a generous curve at the end, which is to be expected in a class of 200+ people","Heavy. Start early. Do all the reading. This class has more reading than two science classes combined, but the book is really helpful. If you do not read, you will not do well on the midterm or final. ","7","Intro to Computer Science- Programming in Java","COMS W1004"
"107","3807","Tue, 07 Jun 2005 00:00:00 GMT","12408","1891","This is supposed to be an intro class, but Aho made it too hard for people with out experience.  He is a brilliant man, but unless you already know a lot about comp sci, you are about to get totally screwed over.  TA's didn't even know how to solve all of the hw problems.  This class was torture to me.  ","Too much.  Way too much.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"108","3807","Wed, 16 Apr 2008 00:00:00 GMT","21139","3409","Paul Blaer is a master in his field. He knows exactly what he is doing, and can answer damn near any question you can come up with. The homework assignments are not extremely difficult, but do take time and actual mastery of the subject. He makes himself very available if you need help, and has knowledge of Computer Science that extends far beyond Java. The workload is not serious, and you do not really need to attend lecture if you're keeping up with the book. However, it doesn't hurt your grade at all to attend lecture, as he often gives clarification on confusing topics and a myriad of extra information which could help you out on the midterm and final.","Five (5) homework assignments, each worth 10% of your grade. They are not difficult. One (1) midterm, fairly difficult, make sure you know your theory. One (1) final.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"109","3807","Thu, 26 Dec 2013 02:09:34 GMT","28972","515","Adam Cannon is a pretty solid teacher. He knows his stuff, and is very organized when teaching. With this in mind, Intro to Java is probably one of the most challenging and time-consuming classes offered at Columbia. Unless you have to take this class for your major, be sure you REALLY want to take this class. There are much easier ways to learn coding and Java. When Cannon tells you at the beginning that this class will take at least 10 hours of work per week, he is telling the truth. Many times, the work requires a lot more than 10 hours/week. 

There is a lot of information that Cannon tries to teach in this course. You will learn both theory and programming in this class. Because of the amount of info he tries to teach, Cannon skips over a lot of basic stuff that he expects you to learn on your own. I had no experience in programming coming in so I wish he would not have skipped over stuff. For this reason, I would only recommend this class to someone who has some experience or background in coding. Talking to many who were in the same boat as me, we had to play catch-up throughout the semester. This class is already considered difficult to those with coding backgrounds, so it makes life even more miserable when you have to put even more work into an already difficult class.

The TAs for the class are usually pretty helpful. I would recommend getting help from the TA that grades your assignments since some of the grading, especially the written assignments, can be very subjective. I also went to Cannon's office hours. He does not come off as the nicest or most personable person ever, but he does try to help you out. He definitely does not try or care to get to know students (at least in this class). I will give him props for his cheesy jokes that lighten up the class.

In the end, you really have to decide if you are willing to do the work for the class. If you just want to take this class because you think coding will be ""fun"" to learn, do not take the class. Learn coding on your own at a pace where it can be fun, exciting, and addictive. Besides those who are majoring in CS, only those who are serious about learning Java and the theory of programming in a rigorous and often cutthroat setting should take this class.","The HW alternates between a programming assignment and written assignment. 1 midterm and 1 final. At least 10 hours/week is needed to do well in the class. Make sure you read the textbooks since he glosses over some stuff in class. Attendance is not mandatory, but you're only screwing yourself over if you skip classes.

Heavy Workload","7","Intro to Computer Science- Programming in Java","COMS W1004"
"110","3807","Tue, 05 Apr 2011 16:51:49 GMT","25698","515","I am not a computer science major or a computer science person at all; I'm not a math or science or logic person in any sense of any of those terms. My mind just doesn't work that way, and I struggled with this class more than I've struggled with any other class.

That being said, it was probably my favorite class thus far. Cannon is just a wonderful man who makes the lectures interesting, fun, and clear. He is incredibly welcoming ad supportive, so absolutely take advantage of his office hours. Talk to him about any concerns that you have - whether it's a specific coding problem or worries about the class in general - and he will help you. 

If you're not a computer science person, there is a lower level class that provides a lot of the background for this class, which I didn't know about, and could have done much better had I taken it. This is not an easy class, but it's very fulfilling. It's something I never could have seen myself doing, but I would absolutely recommend taking it. ","It's pretty tough. You definitely have to put the work in. Everything is doable, even if you don't have the familiarity in programming that a good majority of the class does. You'll be surprised at how capable you become, and this is one of the few classes where you are actually proud of your work and have something to show for it.
Tests are absolutely straightforward but you need to have a very deep understanding of the material. If you do all along, you won't need to study much, but if you are struggling, you'll need to put in a lot of time.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"111","3807","Wed, 15 Jan 2014 18:43:15 GMT","29145","515","If you're only going to take one Comp Sci course take Java with Professor Cannon. He is fully aware that most people have never coded before and provides very structured ways to allow people to easily understand coding. He doesn't start off too quickly and provides tons of sample code which is usually very similar to the homework he gives. He is very open to peoples comments and asks for questions. Probably one of the best classes I've taken at college so far. ","Alternating programming problem sets and written problem sets every week. Anywhere from 2-8 hours for the programming problem sets depending on how comfortable you are with the topic. About 2-3 hours for the written problem sets","7","Intro to Computer Science- Programming in Java","COMS W1004"
"112","3807","Thu, 20 Aug 2009 04:17:03 GMT","23082","515","This class the truly Terrible and unbelievably hard! It says that it is an into level class, but its not. This was the most time consuming, annoying and frustrating class I have ever taken. If you have taken AP comp sci, or have a better idea of java you will be struggling, but if you have none DO NOT TAKE! It was impossible with out outside help. 

Cannon is a funny man, and class was not boring, but the subject is just impossible. The theory stuff is easy and understandable but the java is very very hard and is not taught at all, its more teach yourself everything or find someone who knows what they are doing and have them teach you. 
I learned ALOT, but in the end, not worth it. 
","4 Programming Assignments, all pretty much impossible, but very rewarding when you finish them. Don't expect to do that well on them (close to 20 hours of work for each). 4 theory problem sets, more managable but still time consuming. Midterm and final, easier than programming assignments but still VERY hard and painful. ","7","Intro to Computer Science- Programming in Java","COMS W1004"
"113","3807","Sat, 20 Dec 2014 07:00:09 GMT","73898","515","I imagine this class would be very difficult to succeed in with no programming background.  I took AP Computer Science in high school, so I expected Cannon's class to be cake.  However, it still did require a good deal of effort and I felt appropriately challenged throughout the semester.  As past reviewers have mentioned, the learning curve is pretty steep, with problem set 1, and programming projects 2-4 being among the most stressful.  Cannon is not kidding when he says that the programming projects will require 10+ hours of work -- they really do!  Your best bet would be to start early on the projects and attend TA office hours whenever you hit a major rut.  

Lectures are helpful, but only as a brief summary of what you need to know.  To rely on lectures alone would leave you poorly prepared for the assignments in this class, but I think that for any technical class this goes without saying.  The two recommended textbooks are both very good resources and will be relied on heavily throughout the course.  I found that the lectures and problem sets were representative of exam content.  The programming projects, however, were not.  

The class is well organized, with a very clear outline of covered topics and assigned grading groups to expedite grading.  There is an entire army of TAs who rotate on a schedule to grade your problem sets/programming projects and who send you detailed grade reports VIA lionmail (more on the TAs later...).

Overall, I think the course does a good job at its ambitious task of introducing students to the fundamentals of computer science and programming in Java.  In addition, you will also be introduced to software like: Pico, CUnix, CyberDuck, Eclipse, Vagrant VirtualBox (maybe), and Gimp.  Professor Cannon has a good sense of humor and tries to make even the duller aspects of computer science interesting.  If you commit yourself to doing all the work, the takeaway is enormous.  My only major complaint:

THE TAs (well, some of them):

The TAs are a mixed lot.  Some are truly wonderful and are willing to help you with all your NullPointerExceptions, while others seem plain butthurt about losing points for inane reasons back when they were COMS W1004 students.  Between the 6 problem sets and 5 programming projects, you'll come into contact with at least 11 of the TAs.  

As I mentioned earlier, your grade reports are sent to your lionmail by your TA of the week.  Frequently, students will respond to the grade report emails to ask for suggestions or for a more detailed explanation of how to improve code.  As I have heard from other students, and as I have experienced myself, this sometimes results in the TAs correcting your grade to a lower score.  What I mean is this: when the TA sees your grade report again in your reply email, they might see that they made a mistake in grading you and then will lower your score by the appropriate amount.  

Until the TAs start grading things without error, or until some sort of ""grade-is-set-after-sending-to-student"" policy is put into place, you should not ask the TA who graded you for pointers.  I repeat DO NOT ASK THE TA WHO GRADED YOUR ASSIGNMENT ABOUT THE ASSIGNMENT--THEY MIGHT SPOT SOMETHING THEY DIDN'T TAKE OFF POINTS FOR AND THEN PROCEED TO TAKE OFF POINTS FOR IT.

To me this seems rather messed up.  Isn't the best person to learn from the professional who was paid to read through every line of your code?  As things currently are, it is impractical to talk to this person because they could easily spot a mistake in their grading and then make a last-minute change on CourseWorks.  In no other class I've ever taken in my academic career have assignment grades been so impermanent.  I overheard other students in the help room speak of ""avoiding"" the TA that graded their most recent assignment in fear that they could have points deducted.  I hate to think I could have done better in this class by NOT asking the person who graded my assignment for help...","6 problem sets (cover various aspects of computer science) - take about 2-4 hours 

5-6 programming projects - take 15+ hours (not including time spent on the optional extra credit portions) 

familiarizing yourself with Pico, CUnix, CyberDuck, Eclipse, Vagrant VirtualBox, and Gimp - time varies

~50 vocab terms to memorize for midterm

~100 vocab terms to memorize for final (lots of overlap with midterm terms)

midterm exam with vocab terms and multiple choice q's

final exam with vocab terms and multiple choice q's","7","Intro to Computer Science- Programming in Java","COMS W1004"
"114","3807","Thu, 19 Jan 2012 19:49:55 GMT","26971","515","This course was difficult for sure.  There was a lot of learning on ones own simply because there was so much material, but there were resources there for use that could make ones life a whole lot easier, such as TAs.  This is where I have to disagree with the previous reviewer.  Madhavan was a standout TA.  He stayed after his office hours by as much as three hours one time because people needed help.  When he was in the TA room attending office hours for his own CompSci classes, he would help 1004 kids who needed help.  No matter how many people came he would individually go through his students code to find problems big and small.  He also didnt treat students who didnt know things like idiots which is more than can be said for some others of the TAs.  I would know, I went to pretty much every TAs office hours.  Madhavan was not an easy grader, but thats because he knows his stuff and demands a high standard; if you dont want to be held to a high standard, dont go to Columbia.  The TA Matt was also awesome though he wasnt my primary TA so I dont know his grading style&  Cannon was helpful but impersonal, class of 300&  You will feel accomplished after taking this class, but dont expect to sail.  But classes like this are why you come to Columbia, you work hard as hell, and then you get a ton out of it.","Punishing, but worth it.  Alternating problem sets and programming assignments.  Exams are straightforward and managable.  You do the time, and you will be ok.  Don't assume you are smart and will be fine.  Cannon says the first day of class, Engineers are made not born...","7","Intro to Computer Science- Programming in Java","COMS W1004"
"115","3807","Thu, 22 Dec 2011 15:38:48 GMT","26685","515","Cannon is great. He's an interesting lecturer (hilarious, and also super passionate), very receptive if you ever want to meet, has tons of office hours, and is always very fair. Also, he has tons of (useful) TA's, so basically there is always someone available whenever you need help on homework, including weekends. 

I had some experience with programming before taking this class, but I had to put a sizable amount of work into this class--the programming assignments take time. (But really, start early. The TA's can basically help you through any problems you're having if you go to office hours.) 

That being said, this class made me want to be a computer science major. It's incredibly fun and satisfying, and was definitely my favorite class this semester.  



","An assignment every week alternating between a problem set, which should take maybe an hour or two, and a programming assignment, which can take between 2-10 hours. This class really is manageable, as long as you start early and get help--people who say it took them 20 hours a week probably started homework due Monday on a Friday.

One midterm, one final, both very straightforward---if you do the readings and understand what he's talking about in class, you'll be fine.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"116","3807","Tue, 28 Dec 2010 02:38:23 GMT","25261","515","This is the class that made me want to major in Computer Science. At first I only took it because it was a requirement, but Adam Cannon is a skilled lecturer. He knows how to make confusing material digestible, and his classes are enjoyable.

I would recommend going to office hours - the TAs are generally pretty helpful, and it's useful to get feedback on your code before you submit it.

The programming assignments were a lot of fun, once you get into them. The book assignments (the theoretical ones) can be a pain, but they're necessary to grasp the material fully.

It's not necessarily the easiest class that you'll take at Columbia (unless you're already a programmer and therefore shouldn't be taking this class anyway). But it's also not the hardest - and it may even be the best and most important one you take. Make sure you take this class.","6 assignments, each with a programming part and a theoretical part. One midterm and one final (both easier than they could be, but you still need to study for them - means are in the 70s). Mean is curved to a ""high-B, not a B+"" (in his words).","7","Intro to Computer Science- Programming in Java","COMS W1004"
"117","3807","Sun, 11 Jan 2009 13:08:41 GMT","22185","515","The first day of class Professor Cannon told us we should expect to be spending at least 10 hours a week doing work for the course. I thought he was joking. HE WAS NOT. This is a great class and he's pretty good at explaining concepts (if you pay attention), and he's understanding about extensions and going over certain topics more in-depth if the class needs it. But the weekly assignments were pretty difficult and/or very time-consuming. You MUST start each assignment at least 4-5 days before the due date, because you will run into problems with your programs and you need time to meet with the TA's. I found that many students taking the class had prior programming experience and they found it easier (and messed up the curve). But for the rest of us it was a grueling learning experience. I'm glad to have taken it but you need to invest time, no joke.","Weekly assignments, alternating between theory and programming. One midterm and one final. The average for the midterm was like 87 or something. The final was harder. STUDY.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"118","3807","Fri, 12 May 2006 00:00:00 GMT","14783","1891","This class was a huge time sink.  I was up all night for three of the programming assignments, and I did not miss class (although most did).  Professor Aho does have difficulty explaining things in a way that varies from his lesson plan.  He did cover the material, that is about the best you can say.","HIGH.  Nuff said.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"119","3807","Thu, 12 Apr 2012 04:15:52 GMT","27128","515","Well, he already has his silver nugget, but let it be said: Cannon deserves it. His lectures are fun to go to, and he tries really hard. I usually feel bad when people don't laugh at his dumb jokes so I laugh pretty hard to give him some credit. I usually enjoyed going to lecture. I never brought my computer, though, because all his example code is posted on courseworks anyway. You can do your note-taking just as well in a traditional notebook, and if you know that you are easily distracted, I'd recommend not bringing a computer. The two lectures that I did bring one I may as well not even have showed up because I have no idea what happened.

The course itself is hard, for sure. This class is an introduction CS and programming class, so if you never took AP Computer Science in high school, you're going into a topic that you've literally never seen before, unlike most of your other classes. It's pretty satisfying, though, when a few weeks in you're already writing simple programs that can do tasks that you couldn't do a few weeks before.

The programming assignments are tough, especially compared to the homework which literally take maybe 1-2 hours tops. Programming takes probably 10ish hours. The singular most important advice is go to the TA office hours. There are like 8 TAs for the class. Obviously the TA hours the day before your assignment is due are going to be packed, so try to go earlier if you can. The ones in the middle of the week are literally empty so you could have one-on-one time to do your work with a TA sitting right there who sole purpose is to answer any questions you have and help with your programming.

Cannon also sets up an account for the class on this website, Piazza.com, that is basically a messaging board where people can ask questions and the TAs, other students and Cannon (occasionally) can answer questions. This is a really good resource because your question has almost always been asked by someone else, and you can ask questions anonymously.","1 programming assignment every other week (10 hours give or take 2 or 3), 1 homework every other week (1-3 hours), 1 midterm, 1 final. Midterm is multiple choice, definitions, a section of code to debug, and an algorithm with questions about it. Final from what I understand (class isn't finished yet) is the same as midterm with more multiple choice.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"120","3807","Wed, 21 May 2014 18:22:38 GMT","29519","515","If you've never had any programming/Computer Science, your first class will be a bit rough, but Cannon warns his students of this. For me, the first month or two were not too challenging, but mid-semester I hit a wall. Try to to the TAs before you feel confused, and if you feel the slightest bit confused, definitely go the TA or get a tutor. Makes life much easier in the long-run. Cannon is a great lecturer (especially for python!) and throws in a good number of jokes (that are actually funny!!) He is approachable and tries to make his introductory classes challenging for all but also accessible to people who aren't taking his class for the major. He also stresses the importance of improvement, and is willing to work with you if you scored really badly on the midterm as long as you improve on the final. The TAs for both intro. classes are great! For Java, study your vocab. A LOT.","Programming Project or Problem Set (only in Java, not Python) every two weeks. Midterm and Final. ","7","Intro to Computer Science- Programming in Java","COMS W1004"
"121","3807","Mon, 26 Dec 2011 02:41:13 GMT","26744","515","When you enroll into this ""Intro"" to Java class, you are signing yourself up for a scheduled butt-kicking every time a programming assignment is due. 

Do yourself a favor and start the programming assignments early, and write down all your questions so that you can meet with the TA's during office hours to sort it out. 

Cannon is a fantastic teacher and he is very talented at keeping the entire class attentive during lecture. Take notes during class, because he only covers the important material, which makes sense, because that is exactly what appears on the midterm/final.","Homeworks worth 40% (2-3 from one Textbook, 2-3 from another Textbook, and 5-6 programming assignments), a midterm worth 25%, and a final worth 35%.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"122","3807","Mon, 08 Dec 2003 00:00:00 GMT","7019","515","Out of the 25+ professors I have had, Professor Cannon is probably one of the WORST professors I have ever had.  He's a very nice person but he is awful at instructing and clearly explaining the course material.  He does not provide a syllabus, which I feel is helpful when reviewing for the course.  This course is an INTRODUCTION course which means NOT EVERYONE enrolled in the course has has prior experience with Computer Science.  He quickly covers each topic providing a few very easy examples and then excepts you to be a professional programmer on the projects and exams.  Stay away from this class unless you have to take it for a requirement . . . I did the mistake of taking this class because I thought it would be ""interesting.""  I haven't learned anything!  ","Five HW assignments -- pretty difficult and you don't feel prepared for any of them . . . unless of course you have had experience with Computer Science before.  One midterm exam and one final exam (comprehensive), again , difficult if you have no background.  He does curve grades.  ","7","Intro to Computer Science- Programming in Java","COMS W1004"
"123","3807","Thu, 23 Dec 2010 20:48:26 GMT","25165","515","Cannon is awesome. With a couple of masters degrees and a phd, you know he's incredibly smart, but he also keeps the class moving well with his wit. Class attendance is typically helpful, but you can get by for most topics by simply doing the assigned reading. If you do attend class, supplementation with assigned reading is still ideal. The texts for the class are pricey so get them from a friend or rent them if possible. Only one of the two, Big Java, will really be useful after the course is over, so if there's one to buy, that's it. The books are thick, but the course does not cover nearly all the chapters in them.","This class necessitates a tremendous amount of effort and time, but it's totally worth it. The satisfaction of realizing the efficiency and power of a program you've just designed and built is unbelievable after you've spent hours debugging it. The class alternates a theoretical problem set from the book every other week with a programming project every other week. The problem sets are generally pretty simple and graded fairly, with the programming assignments much harder but graded fairly easily. The midterm and final were extremely easy, and the class is curved to something like a B+ average.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"124","3807","Mon, 24 Jan 2005 00:00:00 GMT","11382","1891","This class was absolutely rediculous.  I'm lucky I passed.  The homwork was so hard that sometimes the TA's couldnt help.  He expects a lot from you and because he is so smart, his whole level of thinking is way beyond us humans.  He's a genius robot that shouldn't be in the class room.  I respect his mind, but hes a bad professor.  ","Excessive bi-weekly assignments, hard midterm, harder exam.  Bad curve.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"125","3807","Fri, 23 May 2014 12:43:20 GMT","29556","515","If you are taking computer science first time and have had very little or no experience with programming, you will have a tough time in the class. Cannon's lectures on the programming component aren't helpful at all; the best way to deal with programming assignments is to start early, read the Big Java book, and attend office hours. 

His lectures on the conceptual component of Computer Science are useful, though reading the book would give you the same information, but it can be more time consuming since it has a lot of unnecessary information.

His first midterm includes a lot of memorization and not a lot of programming examples. The programming component isn't related to the assignments at all but to the simple principles of object-oriented programming. The other component was mostly memorization. (There were questions asking the size of the 'short' data type, for instance.) The final has less questions based on memorization and can help you bump your grade since it's as long as the midterm.

He makes a lot of trashy jokes that most people seem to like. He also wastes a lot of time on unnecessary questions such as ""I would like to major in Computer Science; when should I take Discrete Math?"" in class. His lectures are very unfocused, and you can do fine even if you skipped some lectures. How you do in the class depends more on you and very little on lectures.

I still do not understand why he is in charge of all the introductory computer science classes when he cannot clarify basic but important concepts.","6 problem sets - very hard to get full points on
5 programming assignments - takes a lot of time, TAs will pay attention to silly things like whether you used spaces
1 midterm - lots of memorization
1 final","7","Intro to Computer Science- Programming in Java","COMS W1004"
"126","3807","Sat, 03 May 2014 22:07:49 GMT","29398","515","I was apprehensive about taking this course since I had no experience with programming or computer science.

As I look back on this semester, I have come to the conclusion that yes, it is possible to take this course without prior knowledge of programming. However, it will require a lot of work on your part. If you're up for a challenge, this is the course for you.

In terms of personality, Cannon is quite friendly and cracks pretty good jokes in lecture. In his office hours, I found Cannon to be quite helpful and not at all sarcastic, in contrast to what other reviewers have said (but that might be because I came on a day in which very few students were asking him for help). 

Cannon is a decent lecturer, although he goes through concepts and examples very quickly. If you don't ask questions or follow up his lectures with your reading, you will get left behind. Be sure that you keep up at all times! (also, the textbooks for this class are quite helpful).

For problem sets and programming projects, do not procrastinate! They take much more time than you think they do (he's not kidding when he says that the class will require at least nine hours of work per week). If you get stuck, go to office hours, ask a CS friend, or use Piazza (the online messaging board) to get your questions answered. 

Overall, I'm glad that I took this course. It was challenging and I might not get the grade I want, but I'm glad that I learned something new. ","Each problem set is due after a week and each programming project is due after two weeks. Get started ASAP and make sure you do a little bit of work each day!

Midterm and final are difficult. Make sure you review the code presented in class (he might present a different version of a concept than in the book, so that's an added incentive to go to class) and read the books!

","7","Intro to Computer Science- Programming in Java","COMS W1004"
"127","3807","Sun, 29 Jan 2012 20:06:45 GMT","27008","515","I actually took this class last year, spring semester but haven't got a chance to review it yet. Let me just say that there aren't many classes I'd actually feel obligated to review, but this is definitely one of them.

This is so far the best class I've taken at Columbia. This class gives you a great overview of Computer Science, and an unmatched introduction to programming. Somehow Cannon manages to fit in a ton of material while still giving a good sense of each topic. The only exception to this would be the section of the class on computer networks, which I honestly feel could have been narrowed down to just the information about internet protocols. 

Learning object-oriented programming has a learning curve, but once you've got it, you're just coasting from then on. That's not to say projects don't take a while -- you'll spend hours trying to find bugs in your program. But in general, I think there's only a few concepts in this class that are difficult to learn, the main one being OOP. Nonetheless, Cannon and the TAs make themselves pretty available to you, and the assignments are not unreasonable. That being said, pay attention to what Cannon says: if he wants you to understand a concept by a certain homework (e.g. what objects are) you should do it, and you'll be fine.

I think the main idea I want to convey with this review is that the work you do, while heavy, is very meaningful, and you'll learn a lot about algorithmic problem solving and programming in Java.","As mentioned, pretty heavy, but the work you're given is very meaningful, and you'll have a far elevated understanding of programming and CS by the end of the course. Tests have tricks here and there, but if you understand the concepts they're pretty easy. I finished the final in about half the time.","7","Intro to Computer Science- Programming in Java","COMS W1004"
"128","397","Mon, 28 Mar 2005 00:00:00 GMT","11646","2480","Eitan is awesome! I have heard that the older guy who used to teach this course was really dry and boring (and I don't know if Eitan will teach it again in the near future) but Eitan is completely hilarious. We spent half of the time in the course joking around with him and he really listens to his students. The book mostly sucks, the examples are all way over-simplified to really help with the homework, but Prof Grinspun does a good job of getting the whole class to work out more difficult examples during class. The TAs said that Eitan was the nicest professor they've ever TAed for and it seems to me they were right, his tests and homework assignments were very very fair and he encouraged the TAs to be easy graders. It's probably a bad idea to skip the class unless you have a friend whose a good note-taker because he does go over material/ do the aforementioned really useful problems during lecture that aren't in the book. He's almost always a few minutes late to class though. The class is pretty easy if you're a CS/compE major but if you're having trouble with something Eitan's totally accesible and willing to help you. After I did not so great on the first problem set, he was willingly 10 minutes late for a collegue's talk just so he could finish going over example problems for the midterm with me.","fair - biweekly problem sets, 2 midterms, final","7","Discrete Mathematics","COMS W3203"
"129","397","Mon, 08 May 2006 00:00:00 GMT","14705","2480","Well, everyone else loves him, but I didn't. He's not a bad guy or anything, but this class is so dumbed-down that you'll wonder why the CS department requires it. I could've aced the final before I took the course, and I'm not all that good at CS, even. Meanwhile Eitan is talking to the class like everyone's a seven-year old. It's easy and the curve is great... too bad it's a waste of your time.","Easy... ten fairly long homeworks that don't usually get too advanced, midterms and final are open-book cakewalks.","7","Discrete Mathematics","COMS W3203"
"130","397","Sat, 24 May 2003 00:00:00 GMT","5873","515","Great teacher, good lecturer and cares about the students a lot. 

He knows a lot about discrete math and he's very enthusiastic about it. Even though he covers number theory which other teachers who teach discrete math don't, this class is still very vaulable and u'll learn a lot from him. His tests aren't bad at all.","9 problem sets, midterm and final","7","Discrete Mathematics","COMS W3203"
"131","397","Thu, 12 May 2011 11:32:10 GMT","25959","515","Cannon is definitely NOT a good discrete math teacher by any standard. In fact, he could possibly be the worst discrete math teacher at Columbia. Having had him for 1004, I thought he would be as a great a teacher at discrete math. He cursorily goes over TONS material which he seems not to have mastered well himself, but succeeds at covering it up. He assigns EXTREMELY long problem sets that are proof heavy. Attending class was a major time-sink as he would be late for class, his lectures were unorganized and his class examples trivial, not helpful at all when it came to doing the problem sets.Though discrete math is a useful class, I disagree it is the most important (as Cannon appears convinced) and he should be more considerate of this view.
The midterm for the class was fair, but the final impossible. Of the many faults Cannon's teaching style has, the worst is probably the fact that the final is cumulative, with approximately 700 pages worth of material--including over 300 vocabulary words and proofs--to know by heart. 
Strongly consider taking discrete math with another teacher.","Extremely heavy. 6 long problem sets--each about 18 multi-part questions. Mid-term is attemptable, but lots of material to cover (closed book, no cheat-sheet). Only gets worse with the final, with over three times the material to cover and hundreds of vocabulary words to know by heart.","7","Discrete Mathematics","COMS W3203"
"132","397","Tue, 21 Apr 2009 20:12:50 GMT","22591","2480","Great course. Makes a somewhat dry subject incredibly interesting. Very lively lecture... one of the few CS classes I really have enjoyed attending. If you can take this class with Grinspun (he tends to teach in the Spring), so do.

Homework is difficult, but not extraordinarily so. Midterms are very difficult, as they are open book so they test not what you could memorize but how adept you are at solving the problems. It is also possible to recover from a bad midterm... I nearly aced the first midterm (missed one or two points), but the second midterm I don't think I managed to get more than 20/90, but with a decent score on the final I still ended up with an A-.

Not to mention, the questions on the homework and exams are actually somewhat fun (interesting questions, not dull or boring ones for the most part), which is always a plus.","2 Midterms, 1 Final, 6 homework assignments (approx 6 hours each)","7","Discrete Mathematics","COMS W3203"
"133","397","Sun, 22 May 2005 00:00:00 GMT","12252","2480","Prof. Grinspun managed to make this difficult class at the very least entertaining. His lectures are worth going to, not only because he explains things well but because his jokes are surprisingly funny. He actually learns his students' names and calls on people randomly during class. As for the subject itself, the book is pretty poor and has examples that are ridiculously easy compared to the exercises. This is an often weird and abstract class, but it's curved, so try not to worry about your grades until the end.","7 homework sets which can take a long time to complete. 2 midterms and 1 final. The first midterm was easy, the second was difficult, and the final was killer. ","7","Discrete Mathematics","COMS W3203"
"134","397","Fri, 11 May 2001 00:00:00 GMT","1117","47","If you have a hard time to follow in his class don't waste you time going to Ross' office hour. He is going to tell you to do the odd exercises in the book. After he will wait for you to leave. He is not very helpful and he does not make the class interesting. Too bad that some of us have to take his class.","6 pretty easy homework but do not think that because you do well in your homework you will do well in your exams. ","7","Discrete Mathematics","COMS W3203"
"135","397","Fri, 24 Apr 2009 18:24:16 GMT","22619","2480","Discrete Mathematics, as taught by Professor Grinspun, is a CS prerequisite I am very happy to be taking.  Professor Grinspun's computer graphics research is really cool, but that is outside the scope of this review.  The main strength of COMS W3203 is clarity.  Professor Grinspun's lectures are so understandable that I have not usually needed to read the textbook in depth.  If anything, they are too basic and move too slowly, although there is plenty of time to ruminate on the materials in class.  The textbook (by Kenneth Rosen) is also excellent, being both engaging and informative.  The difficulty and pacing of the course changed relatively little as the semester progressed, a teaching accomplishment in itself.    

The curriculum focuses roughly equally on proof-writing and problem-solving--a fair division, although I wish there had been more discussion of how Discrete Math can be applied.

The homework was where most of my learning took place, and it would have been a mistake not to do it as thoroughly as possible even if each assignment is only 4 percent of the grade.  (Not everyone does their homework thoroughly.)  Homework is ABSOLUTELY ESSENTIAL for preparing for the three exams, which are long and complicated exercises in problem-solving and proof-writing speed.  As a warning, almost no one could finish the second midterm exam.  This includes some of the best remaining students.  Fortunately, the exams' open-book nature and the grading curve meant they were actually easier than exams in many other classes.  The 6 homework assignments were 9 to 20 handwritten pages each, and each one usually took me 10-20 hours to finish.  Many questions were difficult, and office hours often saved me.  

This course has a high attrition rate--perhaps one-third to more than half of the original students choose to drop it after the first lecture, including some of Columbia's best and brightest.  There might be several reasons for this.  Professor Grinspun calls on students unannounced and does not hesitate to embarrass them (although I never saw him embarrassing anyone unprovoked).  Homework 1 was as difficult as the other assignments, which may have led some students to believe the course would be more demanding than it actually was.  The heavily proof-oriented nature of Discrete Math may also have scared off some.  In my opinion, DROPPING THIS COURSE INSTEAD OF PRESSING THROUGH IS A TERRIBLE MISTAKE.  My experience was that around week 4 of the course, proofs suddenly became less intimidating and around week 5 or 6, Professor Grinspun mellowed out.  What students contend with is a not especially time-consuming commitment, as CS courses go, and possibly one of the 5 best undergraduate courses in the CS department.  I enjoy it, and would strongly recommend it to students with the appropriate background (some introduction to programming such as COMS W1004; pre-calculus or, better yet, calculus; and, if you're really concerned about writing proofs, the supposedly well-taught Introduction to Higher Mathematics).","Not too bad for a CS course, even though when I began I had almost no experience writing proofs.  Homework 1 was certainly an adjustment, but the workload remains on a more or less even keel from that point onward and actually became easier in the second half.  Basically, nothing to be too worried about.","7","Discrete Mathematics","COMS W3203"
"136","397","Thu, 19 May 2011 00:06:26 GMT","26117","515","I have to disagree on most accounts with the below polemic on Adam Cannon. There are two separate issues needing to be addressed here. First, whether or not Adam Cannon taught the class well, and second whether or not it was hard and time-consuming.

I can say that I thoroughly enjoyed the class and, as usual, found Adam Cannon to be an engaging and witty lecturer. It is true, he wasn't on cruise control as he is while teaching 1004, but he was still very good. His explanations were intuitive and clear and he realized that most people taking the class had not had previous exposure to a higher level of mathematics. As a result, he time again emphasized and explained to us, the importance of thinking truly mathematically as it were. In other words, he taught us to recognize the importance and place of proofs in mathematics and stated that while examples are often helpful, they are simply not adequate to understand abstract concepts completely. He sometimes proved theorems which were not in the book, so be aware of that and occasionally makes notational mistakes on the board so don't be afraid to point them out as he often doesn't notice them afterwards. I felt lost in only one of the lectures which was the one on solving liner homogeneous and non-homogeneous recurrence relations, I don't know what happened there but it seemed like Adam Cannon was having a monologue with the board for 20 minutes.

In class, he asks interesting puzzles related to the material and will always give you an idea about the real-world applications of the concepts being covered. He is also just friendly and approachable. He has 4 office hours a week, which is more than most professors, although there is often a line so go early. Definitely go to office hours if you get stuck on the homeworks, he's more than happy to help. He'll rarely give away an answer but will certainly tell you how to approach any given problem.","6 homeworks assignments in the semester - we had 2 weeks to complete each assignment. They were pretty long in an absolute sense, but given that we had two weeks to solve them, the length was by no means unreasonable. A quarter to a third of the problems in each assignment were proofs but most of these followed almost straightaway from the definitions. Writing proofs was hard at first for some people, but then again learning how to write basic proofs is half the point of the class. The bulk of the time-consuming problems are in the earlier part of the assignment so you can get started early during the 2 week period. One thing I did find was that the point distributions on the homeworks could be bizarre and some hard problems had very few points assigned to them. Also the TAs sometimes graded kind of harshly so if you think they overlooked something and your solution was correct, definitely go back to them and ask.

Midterm was easy, the 2 proofs were perhaps the only tricky part. The final was cumulative and the questions were difficult. Lots of counting problems, 4 proofs  (3 of them manageable) and some modular arithmetic. 20 points is testing vocabulary so these are basically free points and you have to learn the definitions anyway in order to do well on the proofs. It also doesn't take all that long. According to him, the class is curved to a high B so about 30-40% of people get some sort of an A.","7","Discrete Mathematics","COMS W3203"
"137","397","Wed, 21 May 2003 00:00:00 GMT","5825","515","Unlike the previous reviews, I did not like this professor.  Before the first midterm, we learned two chapters, then afterwards we sped through about 6 chapters, learning a little from each.  He is very disorganized and doesn't know how to use his time properly.  Coming to class was not helpful since everything he taught was in the textbook.  Most of the time the text explained things much more clearer.  Going to class will not help at all with the homeworks and don't expect to get them back in a timely manner.  If you take this class with him, be prepared to do a lot of proofs.  This man loves to do proofs..he thinks they're fun. ","Heavy.  Problem sets biweekly but each set takes a LONG time.  The earlier you start the better. ","7","Discrete Mathematics","COMS W3203"
"138","397","Tue, 17 May 2011 17:16:55 GMT","26087","515","For a Discrete Mathematics course I felt that Cannon did pretty good job. He was enthusiastic about the course material and was clear in his presentation of core principles in Discrete Mathematics. His proofs were simpler than the textbook's but they showed the basis for core theorems and for what he expects in proofs. Cannon was also able to effectively condense a 800 page textbook into only a notebook of notes. While the textbook is huge, most of the material in the textbook are proofs and there are only a 100 or so pages of actual definitions, theorems and algorithms that you need to learn. However,I feel that Cannon was irresponsible in frequently arriving late for lecture.","The workload is reasonable. We had 6 problem sets that take about 10-20 hours each but you get two weeks to do them. The midterm was easy (definitions, some calculations, and 2 easy proofs) but the final was extremely hard (many proofs that are not all intuitive).","7","Discrete Mathematics","COMS W3203"
"139","397","Tue, 24 May 2011 15:45:54 GMT","26175","515","Professor Cannon is great.  While his lectures aren't always structured like they're coming from an outline you can copy down, they aren't boring and they do get the information across.  The point of Discrete Math is to make you learn to think through problems, and few problems in the real world just appear in your head with a clear path to get you from A-B-C-D-E.  If it were that easy, it wouldn't be a problem that you needed to learn how to solve.  When he lectures, he doesn't just go A-B-C-D-E, he tries to get you to think about the process behind getting to E.

The class covered a lot of material very fast, and it definitely helped if you had a rudimentary familiarity with things like statistics, logic, and counting.  But if you didn't he gave enough information that you should have been fine.

His lecturing style is a bit free flowing.  He seems to have an ordered list of a dozen or so things to get through each lecture, and will work through them.   He does enjoy occasional diversions to related topics.  He clearly likes the material and manages to keep what could be a very dry topic interesting.  He welcomes questions, and is one of the best professors I've seen at being able to explain concepts multiple ways when people don't grasp them.  If you ask a stupid question, he won't sugar-coat his response, but he won't out-right mock you either.  And in one-on-one interactions, he's great.  Very approachable.

On the downside, he was usually 5 minutes late to class, and there was a very long lag time for homework to be graded and returned.

And he LOVES his definitions.  Make sure to copy them down and memorize them for the exams.  You'll need them both for the terms section and also for the proofs.  They're the keys to the kingdom.","One problem set every two weeks (about four hours of work)
One midterm
One final (cumulative)","7","Discrete Mathematics","COMS W3203"
"140","397","Mon, 14 May 2007 00:00:00 GMT","19941","2480","Good professor overall. Entertaining in class, made a potentially dry subject quite interesting. Overall workload easier than one would expect; while each HW assignment was reasonably challenging and lengthy, there were only 6 of them in the whole semester. Material was pretty easy, and it would have been useful if we could have moved along a bit faster. Midterms were challenging, but were also open-book which means you wouldn't have to memorize stuff. 

Recommended, but they should probably make the class a bit faster. And maybe spend some time showing where the knowledge can be applied.","6 HW assignments, 2 midterms, final.","7","Discrete Mathematics","COMS W3203"
"141","4","Sat, 06 Sep 2014 20:44:59 GMT","29745","3409","Took course over the summer. Very solid instructor, lectures were clear. Managed to make 3 hours of lecture bearable. Assignments really helped understand the material and were time-consuming, challenging, but not unmanageable. The reviews below apply.

Why am I reviewing then, if what I've said above has already been said before? If you are taking THE SUMMER COURSE, expect to receive your final grade VERY LATE compared to the usual standards. Class ended in mid-August, and I received my grade early September, about 3-4 weeks after the end of the course. 

When I took Intro to MATlab with him during the year a long time ago, grading timeliness was never an issue at all, so I'm not sure where the disconnect lies. 
","See reviews below. ","7","Data Structures in Java","COMS W3134"
"142","4","Fri, 19 Dec 2014 15:39:05 GMT","73369","3409","Paul Blaer is an excellent professor. His lectures are generally very clear and straightforward. Don't hesitate to ask questions if you don't understand something, since he is very good at answering questions both in-class and through emails. Occasionally he'll tell a few stories about his research. Overall, a cool and funny guy who definitely deserves the nugget.

The learning curve might be a bit steep in the beginning (it wasn't too bad for me, but some of my peers thought it was), but once you can get over that initial hump everything works itself out. Just be sure to start early on the programming assignments or you will have a terrible time (no joke). In contrast to the 1004 TAs, it seemed that the 3134 TAs were more lenient on the style of the code - if the code works, you get a 100% regardless of how ugly your code looks.

TL;DR Excellent class. If you put in the work and pay attention in class, you will do well.

Reviewer's grade: A","Homework: 50%
Combination of both written exercises from Weiss's Data Structures in Java and programming projects. DO NOT PROCRASTINATE! Due every 2-2.5 weeks. Total of about 5-6 homework assignments (there were six this semester, but he only took the top 5 scores - the last was somewhat optional)

Midterm: 20%
Unlike the multiple-choice exams in 1004, the exams either require you to write a short answer, pseudocode, a short Java method, or walk through an algorithm (e.g. Dijkstra's) step-by-step. If you pay attention in class and study your notes/book, there should be no surprises.

Final: 30%
Similar to midterm, except longer. ","7","Data Structures in Java","COMS W3134"
"143","4","Mon, 05 Jan 2015 04:59:10 GMT","78250","3409","Professor Blaer is a great instructor. He is clear, able to command a large lecture hall without much trouble, and able to explain concepts in a fairly simple manner. I honestly don't understand why some people chose not to attend this class because I found the book to be average at explaining concepts, while I found Professor Blaer to be exceptional at explaining the material. I rarely referred to the book after his lectures because I either understood the material from his lecture, or was able to understand is after digesting my notes. I think this is a sign of a great teacher. 

Even in a 200+ person class, Blaer was able to captivate the room with his large voice and abundant personality. In addition, he managed to encourage student participation, which kept the class interactive and engaging. In addition, occasionally, Professor Blaer would drive home the importance of a particular concept with a story about his research, which usually involved a hilarious and catastrophic ending involving multi-ton robots ramming into buildings or almost running people over. 

Professor Blaer's exams are fairly straightforward and he essentially tells you about 50% of the exam, so these are fairly low stress endeavors. I found the final harder than the midterm, but still fairly straightforward. Not much to worry about here. 

My only complaint with Professor Blaer is an organizational complaint. He would usually claim he would post the HW by a certain date and note post it till 3 or 4 days afterwards. He also granted classwide extensions in unecesarry situations which made the last HW assigned and due during reading week, which was poor planning on his part. Lastly, I feel that the first 15 minutes of class, where students as clarification questions on the HW, is a waste of time. If he wrote his questions in a less ambiguous manner, and used this class time to teach more material, that would be more efficient. Apart from those organization things, I can't complain about this professor. I would recommend his class to anyone in a heartbeat. ","6 HW Assignments, top 5 counted. (50%)
Midterm Exam (20%)
Final Exam (30%)","7","Data Structures in Java","COMS W3134"
"144","4079","Mon, 06 Dec 2010 19:16:12 GMT","24893","2941","I took the class CSOR 4231 with Prof Yanakakis. Unless you are really stupid, do NOT take this class under this Professor. Granted, he has great credentials and has won a Knuth prize or two for his research. But at the end of the day, teaching a course is not the same as doing research and not everyone can do both well. 

Instead of making the class interesting and explaining the background behind how algorithms should be designed and how they came to be, he just puts the algorithm on the board and makes a poor attempt at explaining it. Watch one lecture given by Stein on CVN and you will be inspired .. and sit for one lecture with this guy, and you will forget the little you knew before the class. His homeworks concentrate more on proving correctness than on designing algorithms and mapping problems to standard algorithms. It is a pity that a researcher of his caliber, does not have the ability or the inclination to make this class interesting. Believe me, you would be better off watching lectures on MIT OCW or stein's on CVN. You have been warned. ","The workload is high and you would have to devote about 10-15 hours a week for this course. There are 6 homeworks, a mid-term and a final.","7","Analysis of Algorithms I","COMS W4231"
"145","4079","Fri, 23 May 2014 15:20:23 GMT","29559","12932","Xi is a pretty decent teacher. Going into this class, there were no previous CULPA reviews on him and the only thing I heard about him was that he was ""not bad"". I would say Xi's a bit better than ""not bad"".

Typically, classes like Algorithms go really fast, leaving most students lost and confused. Xi is good in this sense because he teaches at a slower pace so it's easier to understand the long proofs and sometimes dense material. The drawback of his speed is that we didn't finish the syllabus. We missed 2 classes because of snow days and another 3 classes because Xi was overly ambitious to cover so much material at his teaching pace. He also posts excellent slides online so you don't have to worry if you missed something in class.

The class itself is pretty hard. The book CLRS, while excellent, is quite dense and detailed. Homework was almost completely assigned from the exercises in the book, which are nearly impossible the solve. The HW averages were pretty high (around 55/60). This is because solutions to problems from CLRS are available online if you search carefully enough. I highly recommend you don't do this since you will get screwed come exam time. Xi is super helpful in Office Hours and you should go to him if you get stuck on HW (because you will, trust me). He will walk you through any problem and give you an outline of the solution. Sometimes, the problems are so hard, that Xi himself can't solve them on the spot (not knocking on Xi; he's really smart. I'm just saying the problems are that difficult). 

The midterm was much easier than the problem sets, but still far from easy. One question on perfect hashing which worth 20 points could be solved only if you remembered a proof from his lecture slides. Most people didn't get it, so remember to read his slides thoroughly. Grading was fair, maybe a bit strict.

Final was similar to the midterm in difficulty and was a bit longer, but you had 3 hours which was plenty of time. I thought the final was easier, but I ended up getting a lower score on it than the midterm, so I don't know what to make of it.

The class had roughly 8 undergrads out of a 100 students, so be prepared to be lonely. There are PhD students in this class, so don't expect to ace it, though getting an A shouldn't be a problem if you put the effort into this class. I'm not sure if he curves undergrads separately.

Overall, it's a good class. You will learn a lot and become much better at constructing solid proofs and thinking algorithmically. I think Xi is just as good as Stein, so feel free to take this class with him.","7 Homeworks (40%) : incredibly hard, take 20+ hrs each
1 Midterm (30%) : medium-difficult, average was roughly 66 I think
1 Final (30%) : similar to midterm","7","Analysis of Algorithms I","COMS W4231"
"146","4251","Mon, 20 May 2013 22:27:48 GMT","28413","2427","This course is required of all CS, CE, and EE majors, however EE and CE majors will probably find themselves more prepared for this course.  This is because engineering students are already exposed to digital circuits in 1201, and are generally more comfortable with design at this level of abstraction.

Rubenstein's slides were very detailed, and I never once needed to look at the textbooks.  While his assignments and slides did sometimes contain errors, he fixed them right away.  He also posted several practice exams, which were very useful in preparing for the midterm and final.  

I do wish that he worked through his examples on the blackboard instead of showing them on slides.  Also, it would have been nice if he could have found more ways to engage students during class.

Overall, I'd say that Rubenstein is a good professor, since ultimately I learned a lot from his course.","Typical EE workload.  Weekly problem sets that take 3-6 hours, one midterm, and a final (Both are open book, open note).  The exams are a bit of a time crunch, so it's definitely worth it to do a lot of practice exams to prepare yourself.","7","Fundamentals of Computer Systems","CSEE W3827"
"147","4251","Wed, 22 May 2013 06:15:35 GMT","28432","2427","These recent reviews are not entirely accurate. 

I took the course this semester, and received an A-. I was likely boosted from a B+. That happened because I attended office hours each week for assistance on understanding and completing the homework. Contrary to others' claims, I learned more in the class by having the opportunity to effectively discuss the questions and solutions to the HW with great TA's and with the professor. If you showed up with relative knowledge of the material, the professor or TA's would literally give you the answer if you couldn't reach it yourself. They sought to totally set you up for success. If you didn't take advantage of that assistance, that is your fault and I don't feel bad for you. 

The criticism I have for this class amounts to concerns about interest by the professor. I don't believe Professor Rubenstein is teaching material he prefers to teach or learn. This results in a class that is less enjoyable, and is unfortunate at Columbia. His course would be 10X better if he enjoyed what he taught, and showed that. That being said, he showed he cares for his students' performance and puts in his stated time to assisting students. 

I wish I had purchased the book. I think the summaries he provided were at times challenging to understand. I also wish the course had a bit more of a clear connection and purpose between the first half of the semester and second, but we always have concerns. 

The perspective is this - We can read, understand, draw, and design circuits that do cool shit. And if you can't, you screwed up in class and I don't feel bad for you. And you also probably cheated off someone else's homework so fuck you.  



","Day to day and a half of work per week when HW's are due. 1-3 days of studying pre Mid-term or Final. ","7","Fundamentals of Computer Systems","CSEE W3827"
"148","4251","Thu, 24 Dec 2009 00:37:58 GMT","23592","2427","It would appear that Prof. Rubenstein's evil twin taught this class last semester. Don't worry -- the real Dan is back. His slides are gorgeous, his lectures are unfailingly clear, and he's eager to help out outside of class.

Apparently he's used to teaching by drawing everything on the blackboard, but he had rotator cuff surgery early in the semester and had to do everything via PowerPoint to avoid damaging the muscles. Surprisingly, I think this turned out to be a good thing. Once you get into some of the scarier-looking circuitry, I imagine that it's easy to make make mistakes drawing, and I'm certain that it takes forever. This way, we got straight to (relatively) error-free drawings and spent time talking about the big picture instead of worrying about which wires cross.

This is also one of those rare classes where the material is interesting without being difficult. Five or six people in the class got perfect scores on the midterm, and I suspect a similar number aced the final. I don't think it's that Rubenstein makes the tests too easy -- this is just really straightforward stuff.

The few complaints I have are relatively minor. I think he was still a little sensitive about the last time he taught this course (with reviews like those, who wouldn't be?) and made a point of stopping to make sure everybody was following. This was nice, but the endless refrain of ""are you with me? Raise your hand if you understand"" got a little irritating by the end of the semester. He also seemed to get a little bit confused by some of his own notes about pipelined architectures, but everything worked out in the end.

In short, don't be scared off by any review written before 2009. This is a good class with a good instructor, and I would wholeheartedly recommend Prof. Rubenstein for Fundamentals.

A side note:
The class nominally requires two textbooks. You can get by without buying either, but your life will be a little easier if you get Patterson and Hennesy. Don't bother with Mano and Kime -- it's almost completely useless.","Weekly problem sets, ranging from easy and quick to easy and mind-numbingly tedious. You'll get really good at binary arithmetic.","7","Fundamentals of Computer Systems","CSEE W3827"
"149","4251","Thu, 24 Dec 2009 23:13:39 GMT","23608","2427","Overall, I think Daniel Rubenstein was an excellent professor. Specifically, the majority of his lectures were extraordinarily clear. He had well prepared slides for every class, often with plenty of well-chosen images from the textbooks, and spent most of the class time describing what was happening in the pictures. One of his greatest strengths was being able to clearly and succinctly describe and give insight into the functioning of a circuit or architecture. He was also unusually receptive to questions during class. By and large, the students asked thoughtful and helpful questions, and as a result, he was able to clarify almost all subtleties and potential pitfalls in the material. The lectures seemed all the more engaging and participatory as a result as well.

All this praise aside, I can how see professor Rubenstein may not be a good fit for every student. Specifically, to get the most out of this course, it is best to take a very active approach. I agree with a previous reviewer that ""it's best to ask a lot of questions and make sure to make it your responsibility to clarify all the material that is taught."" As I mentioned above, one of the reasons that the professor was able to make the material so clear was that students asked questions whenever something was less than one hundred percent clear.

As for the course as a whole, it felt like a gradually unfolding adventure/mystery story. We took a thoroughly bottom-up approach, and starting from the absolute basics of binary logic, gradually added new layers of abstraction until we had essentially designed a computer out of nothing. I was always on the edge of my seat waiting to see how all the ideas we looked at unfolded and built on each other to eventually construct such an amazing machine. Some of the ideas we covered, such as latches and flip-flops, are so utterly brilliant that I think it is somewhat of a shame that we never considered the engineers and inventors who were responsible for them. More generally, I think the ideas we covered in the class could have put into a richer historical context.","My one complaint about the course was the appropriateness of the homework. The workload was relatively light, but the problems themselves could have been more interesting overall. A lot of the homework time was spent either doing tedious computations (multiplying numbers in floating point comes to mind), or delving into an annoying level of detail, such as describing what effect a small design change would have on dozens of instructions which were not all listed in the same place. He seemed to save the best questions for the two exams, both of which were fun as well as fair.","7","Fundamentals of Computer Systems","CSEE W3827"
"150","4251","Thu, 22 May 2014 20:34:28 GMT","29538","2427","Ah, Rubenstein. He spent the first lecture telling us how last year's culpa reviews were all wrong, and at first I thought it was going to be okay but then...

Okay, okay. So he's not the worst. It could always be worse. I survived the class and learned some cool stuff. And yeah, he's a nice guy and a great person. But when every sample final exam that he gives us has at least one mistake in it, and when he doesn't even know the answers to his own homework problems... It makes me pretty worried.

I actually don't think that he was that bad of a lecturer and I didn't really mind that the slides had some typos (though I'd maybe recommend not scribbling all over the whole slide in red... I heard someone got him a stylus but I don't think that helped much). He was decently helpful during office hours too, and he does seem to really care about us learning.

The main problems were the homeworks and exams. As a previous reveiwer mentioned, homeworks were posted late and graded late and sometimes tedious, but that wasn't even the worst part. Towards the end, some of his homeworks would ask questions to which he didn't even realise the answer, until a student pointed something out to him in office hours. He then tried to say that it was still an answer too but, c'mon, when the question asks ""How can you minimize stalling?"", ""you actually can't"" shouldn't be the answer.

Our own midterm had a few very significant typos in it (he gave an example of how his state machine worked and his example contradicted the instructions) and our final had a few errors too. Luckily, he grades on a pretty good curve. I didn't think I was doing amazing but I ended up with an A.

Basically, if you're stuck taking this class with Rubenstein, it's okay, just keep up with the material, go to office hours if you need to, and find some friends in the class to cry with when you can't handle it. And hope that he's a bit more organized next year. If you have a choice though, I'd recommend trying Kim.","Roughly 1 problem set every week or every other week. The homeworks weren't spaced out that well, and sometimes the homework would not be posted until a few lectures after the one that it was based on. The previous reviewer's estimate of 2-6 hrs per problem set is pretty accurate-- it's hard to say. The early homeworks were easy but tedious, while the later homeworks were difficult but only had maybe 5 problems each. 1 midterm and 1 final-- these are somewhat unpredictable.","7","Fundamentals of Computer Systems","CSEE W3827"
"151","4251","Wed, 09 Oct 2013 18:58:10 GMT","28667","4221","Martha Kim is fantastic for several reasons:

1) She is a VERY clear lecturer; she teaches directly from slides that on their own are very descriptive, and goes through them at a pace that is easy to follow. She is extremely eloquent and obviously very knowledgeable about the subject material, so it's really easy to follow and engage with what she's saying; she's not one of those awful lecturers who you have to really actively try to pay attention to for the whole class. She intentionally goes over slides with diagrams a little longer than other slides so that students who like to take notes have time to copy them down. There was one day when she had to rush through how Karnaugh maps worked, and in the next class she apologized for the lack of clarity and spent probably the first third of that class re-explaining them and really making sure everyone understood what was going on. If you go to class (and are at all awake/paying any amount of attention to her) you will understand the material. Point of the story: her lecture style is succinct and easy to follow and if you pay attention in class she will teach you the material.

2) It seems like she really genuinely wants everyone to succeed. She holds more office hours than any other compsci professor I've had and every time I've gone she is really approachable and has seemed genuinely concerned about making sure I am not confused about anything (not to mention she's just super nice). She assigns a very reasonable amount of work because she doesn't want the class to be a source of unnecessary anxiety for students. That being said, the assignments are challenging enough that they definitely do make you learn the material to do them (which I think is a good thing). This is not an easy A class. You will have to do work. But she actually wants you to do well at it, which is definitely not true for every professor at Columbia.

The only bad thing I have to say about the class is that the problem set grading has been a little haphazard - on the first assignment, the grading was really harsh, which a lot of students made a big fuss about; then on the next assignment, the grading seemed really easy. But this discrepancy in grading tolerance seems to stem from the TAs more than Martha Kim. 

Overall, she is very intelligent and also very nice and I think she's been a fantastic instructor for Fundamentals!","Pretty much what you'd expect; Nightly readings which you don't actually have to do but can be helpful for doing the assignments, which are roughly bi-weekly problem sets that take about 3-7 hours (depending on how fast/focused you work on them), a midterm, and a final.","7","Fundamentals of Computer Systems","CSEE W3827"
"152","4251","Thu, 22 Jan 2015 16:01:14 GMT","78368","4221","Professor Kim was a great, engaging lecturer. She was clearly working hard to make sure everyone in the class understood the material, and showed a level of commitment to teaching that's unusual at Columbia.   She offered very clear and thorough explanations of topics. She took many questions during lecture, and answered them quite well. She was incredibly patient, including spending lots of time in office hours answering questions.

I didn't work with the TAs much, but they seemed to all be pretty decent, and were generally very responsive on piazza.

I felt like this class was the easiest in the CS core, along with CS Theory. However it was useful and I found it kind of fun. I would have actually appreciated slightly more workload, and slightly harder exams, since a tiny mistake could have cost you a lot given the structure.

Overall I highly recommend Kim.","6 homeworks. Most of them were quite easy, one took under 30 minutes.

2 ""midterms"" this semester - I think due to her pregnancy she didn't have a final, but had a "" second midterm"" on the last day of classes. Both were easy, which very averages of like 90%+. ","7","Fundamentals of Computer Systems","CSEE W3827"
"153","4251","Sat, 18 May 2013 23:28:59 GMT","28395","2427","Let me preface this by saying I received a C in the class but it's also the only C i've gotten at Columbia in 4 years (never even gotten lower than a B). In any case take, everything with a grain of salt. 

Now there are a factors here that contributed to this that are beyond Rubenstein's control and are my fault, such as the fact that I don't really have a background in computer science, I never went to his office hours (I did attend the TA's occasionally), and I'm a second semester senior.

That being said, Rubenstein's style is that of the prototypical SEAS professor. There's a certain level of irony to this, because in his lectures he comes across as personable guy, he speaks English quite well, and he has a great sense of humor, none of which are very typical for engineering professors I suppose. However, none of that means shit if you spend all your lectures expressionlessly reading off slides, do not provide a good text book and assign cryptic error-riddled homeworks expecting people to be able to solve them purely based on what you wrote on those self-same slides. These slides, as the previous reviewer pointed out are also often riddled with errors. Moreover, they are quite repetitive and there are only a few that are truly important in every lecture, whereas the rest seemed like useless filler. Then there are topics that show up that aren't covered very well in the slides on both homeworks and tests. 

Generally speaking, I'm pretty sick of this en vogue teaching style where professors don't have to do anything except for recite from slides. It's not conducive to learning, and yet somehow the super-genius professors of SEAS still haven't figured out why people don't attend their classes. Or more likely they have, they just don't give a shit, since giving a shit about their students is not high on their priority list. This obviously wasn't the first class where this has happened, and I sincerely doubt it will be the last. The true tragedy here is that Rubenstein seemed well enough aware, occasionally stopping in the middle of his lectures to ask the class if they understood what he just said, and when less than half the class raised their hand, he would proceed to explain the exact same concept all over again in the exact same way.  This created the illusion of concern, while truly accomplishing nothing at all. 

Again, it may be harsh or nigh impossible for me to claim he didn't care when I never went to his office hours; however, generally speaking, his lecturing style came off as lazy and unconcerned, which puts him squarely in the ""average"" range for SEAS professors. As far as attending office hours goes, he said that if we could show him we knew what we were talking about in office hours it could only help our grade. Unfortunately his lectures were often so devoid of content, I actually didn't learn very much, so I truly didn't know what I was talking about and probably deserved the C. 

So I guess you should take him if you want a lecturer with an interesting personality and sense of humor and have a pretty good background in this stuff. ","Problem sets that started out fairly easy but became pretty hard near the end. Reasonable-ish midterm and tough final that were open-book and open-note. ","7","Fundamentals of Computer Systems","CSEE W3827"
"154","4251","Wed, 15 May 2013 05:32:29 GMT","28352","1637","I took this course with Edwards and Martha Kim in Fall 2012.

This is a review of Edwards.

His slides are simple and informative.  His lecture style is very straightforward: he is one of the most rational and simplistic presenters of complex material I have ever encountered.  If I had to take PLT, I would do so with Edwards.  He introduces LogiSim, which Rubenstein does not.  I told several of Rubenstein's students about LogiSim and it made their lives much easier.

But really I'm writing this review because of Edwards' personality and humor.

Edwards is a geek's geek.  Perhaps he doesn't look like one, but he dresses like one and behaves like one.  I find this enjoyable in a professor, but for some it may be an acquired taste, like Scotch whiskey.

Some co-engineers of mine have pointed out that he can be rude, surly, and dismissive.  I think these attributes seem to present themselves because he is rational above all else, and has a limited amount of time.  (~2 orders of magnitude below Temple Grandin. Let's say the average engineer is about 4 below, Vallancourt is 6 below, and the average art history major is 10 below.)

I don't think he has ever been rude to me, but in the sense of being hyper-analytical without regard to feelings, Edwards has a tendency to do this.  And I personally find it liberating, assuming I am capable of keeping my ego out of the equation.

I wouldn't say he equates human interactions to a set of logic gates, but in dealing with assignments and career advice, don't expect a lot of small talk or beating-about-the-bush.  Professor Edwards is one of the most direct human beings I have ever encountered.

If you need to prove to yourself that he has a soft/creative/dynamic side, keep in mind the following:

 * He modeled for McDonald's in Taiwan
 * He bought a vintage PacMan arcade machine and drove it to his office from AC
 * He makes bad jokes that pertain to driving even though no one drives in New York
 * He wears a fanny pack when he bicycles to and from Mudd

I may not be the most adept engineer in SEAS, but I thoroughly appreciate Edwards' awkward and dryly amusing brand of brilliant.
","Manageable and intuitive.  Exams test the basics.","7","Fundamentals of Computer Systems","CSEE W3827"
"155","4251","Fri, 19 Dec 2014 05:16:27 GMT","73150","4221","Professor Kim does a really good job with this class. If you have a decent CS background it shouldn't be too challenging -- you don't even have to go to class if you read the textbook, because she follows it very closely -- but it's pretty neat finding out what happens below the level of the level of C code. Professor Kim is a good lecturer and really good at explaining tricky concepts to the greener students.

If the class hadn't been at 10 AM (waaaay too early for this senior) I would've gone more often and likely gotten a lot out of it. When I did go, Professor Kim would mention neat factoids not covered on exams but still good to know, like (my favorite): Intel kept adding more stages to its pipeline in the '90s so it could ramp up its clock speed, and had to change its advertising strategy to deemphasize clock speed when it turned out fewer stages was optimal and clock speeds decelerated as a result.","6 reasonably easy homework assignments, lowest 1 dropped. One of them is coding in assembly.

Midterm and final, equally weighted, both fairly easy. If you paid any attention in class you should do fine on these.","7","Fundamentals of Computer Systems","CSEE W3827"
"156","4251","Sat, 20 Dec 2008 16:21:21 GMT","21867","2427","The professor is not very good. He is not really clear during class, but is very willing to help you understand the material. It's best to ask a lot of questions and make sure to make it your responsibility to clarify all the material that is taught, because you can't expect that of this instructor. He really wants to make you understand, but because he is not very clear at it, it might be harder if you don't show you don't understand and don't ask questions. So, use office hours, study from the books often, and make sure you get everything clarified.

Also, he is very poor on expressing himself. On the final exam, one problem had a mistake in it because it was worded too awkwardly and ended up contradicting itself. This ended up being a big problem because we couldn't do much of the problem until the question was clarified. I ended up kinda guessing what he meant to ask. Also, the really bad part was that this was 1 out of 5 problems, and the next 2 problems built up on the one that had the error. Generally, very unclear demands.

Unfortunately, if you want to major in CS or EE, you probably have to take this class, so you don't get much choice. But make sure you go in prepared to face a lack of clarity. So make it your responsibility to clarify everything. You will get help, but need to ask for it, because chances are information won't come to you in a organized format at first.","Homeworks every week. Midterm and final. ","7","Fundamentals of Computer Systems","CSEE W3827"
"157","4251","Fri, 15 Nov 2013 17:55:28 GMT","28711","4221","Prof. Kim really cares about the students and their learning. I appreciated her approach to midterms and homeworks - there is always ample material to help aid your studying, and she and the TAs are very responsive via email. She leaves a day to review before the midterm, and we could send in questions to help direct the midterm review session. 

Grading seems very fair, and solutions are explained in class when we receive our homeworks back. 

The material is nothing incredibly exciting, but Prof. Kim does a good job breaking it down into understandable chunks so that it's not too overwhelming at once. 

The midterm was an accurate assessment of what we were learning in class, and the average was something around a 76 I believe, with many people scoring in the 80 and 90 ranges. 

Additionally, there is no required textbook, and she only expects you to know what she covers in the slides, which was a relief when studying for the midterm.

Overall, solid class. I have no complaints.","Not too bad. 6 homeworks, lowest  grade is dropped. One midterm, One final. Homework assignments are somewhat time consuming but it is very manageable if you've been paying attention in class.","7","Fundamentals of Computer Systems","CSEE W3827"
"158","4251","Thu, 19 May 2011 00:31:51 GMT","26118","4221","This class is basically two classes combined into one. The first half covers digital design and the second covers computer architecture involving learning elementary programming in MIPS assembly.

The Good: 
Martha Kim is friendly, approachable and helpful. She willingly answers questions in class and for the most part she answers them well - especially when it comes to the computer architecture, she knows her stuff well. She teaches from slides, and what's in the slides is pretty much what you're going to be expected to know for the class. The slides are easy to read and understand and have intuitive diagrams. A lot of the pictures are taken from the textbook. I found the course material interesting and valuable.

What was wanting:
The lectures were mostly very boring. She spent a lot of time explaining trivial things that we could have understood better and more quickly by glancing over the slides on our own time. Most of the lecture was spent in teaching relatively straightforward concepts but almost no time was spent teaching us to apply them. In other words we did almost no real problems-solving or ""thinking"" in class. Any examples covered, were for the most part trivial ones. As a result, there was a gap between the lectures and homeworks and an even bigger one between the lectures and the exams. The lectures certainly prepared us very poorly for the midterm on which the mean was a 52 and which was so long that almost no one actually finished.

6 homeworks in the semester, one assigned every two weeks, about 4 questions per homework. Given that we had two weeks between hwks, it was really very little work. I spent an average of 4-5 hours on each assignment, only about 2 of the questions out of 4 actually required thinking, although these ones could be tricky. The problem was that we didn't have enough of these questions and didn't have enough homeworks so when the midterm rolled around, we got killed.

The final was non-cumulative and included everything from after the midterm. It was about the same length as the midterm but we had double the time so it was manageable. The mean was 63 - I got a 92. I recommend reading the slides and textbook very carefully. You need to have a complete understanding of the single-cycle and pipelined processors - especially the pipelined one and also get some practice coding in assembly.

","See above. 6 hwks, lowest score dropped (40%). Midterm (30%). Final (30%). Class curved to a B+ she said (and thankfully so).","7","Fundamentals of Computer Systems","CSEE W3827"
"159","4251","Sat, 17 May 2014 20:33:33 GMT","29493","2427","Rubenstein's a pretty chill guy, but not the best professor. He often gets confused by his own typo-riddled slides. You would expect a professor who has taught this class several times in the past to know his material by now and have error-free slides. While some of these mistakes were corrected, there are still plenty of typos in his lecture slides, so be aware of that when studying from them. Also, logistics are poorly organized with HWs being posted late and taking forever to be graded.

Starting with basic logic gates, the course slowly builds up towards creating a CPU. You learn about the underlying hardware behind a simple computer and how the programs you write actually work. The material in the first half of the class can be a bit boring, but you see how everything comes together when discussing the MIPS architecture, which is pretty cool. I was bored because of the slow start (I took Intro to EE and CS Theory before Fundamentals, so the first month was just a rehash of things I already knew). Hence, I never participated or really cared about was going on. Rubenstein would also give students points for discovering errors in his slides, and I felt like it detracted from the class because it ""gamifies"" education. Sometimes I would notice mistakes in the slides and not bring them to his attention because I didn't want to partake in his silly point system. Also, the homeworks were super tedious and didn't teach you much. They aren't representative of the harder yet more thought-provoking questions he asks on his exams.

The midterm was hard. It was longer than the practice tests, and it was nearly impossible to finish within the allotted time. It also had a couple of typos. His exams are open book, but it doesn't really help much because the questions he asks on exams generally require you to extend circuitry covered in class and solve problems creatively. He has good intentions for his exams. They are designed to make students think by asking non-trivial and interesting problems, but they're poorly executed because of the often long and winding questions or just because Prof. Rubenstein didn't think the solution through enough leading to a different answer than what he expected. Partly because of my attitude towards class and because of the difficulty of the test, I did pretty badly on the midterm.

In the second half of the class, I made an active effort to pay attention. I found the course much more enjoyable (may have been because the material became more interesting) and Prof. Rubenstein a much better teacher. He's pretty helpful in Office Hours, so please go to them if you get stuck. The final was better than the midterm because I actually cared about the material and also because of the extra time we had. In the end, what you get out of this class depends on how much effort you put into it. Rubenstein's not the most inspiring teacher, so unless you take the effort to ask him good questions, classes can be pretty boring. You have to push him to take an interest in teaching you.

I think, overall, it might be better to take Fundamentals with Martha Kim for now. Rubenstein's not bad, but there's a lot he can do to improve Fundamentals. (He also reads CULPA reviews, so I hope he makes the class better in the future).","8 HWs - take between 2-6 hours each (can be very tedious)
1 midterm (hard)
1 final (very doable)","7","Fundamentals of Computer Systems","CSEE W3827"
"160","4251","Sun, 12 May 2013 20:27:30 GMT","28329","2427","I have no idea how the previous CULPA reviews gave Professor Rubenstein such good evaluations. Lecture notes were riddled with errors, as were homeworks and homework solutions. Lectures themselves were very hard to pay attention to due to the multitude of conflicting information conveyed to us (Prof. Rubenstein had to correct himself and the slides during pretty much every lecture). He wrote on the board for maybe two classes, and those were probably the classes that I actually learned the most. 

Homeworks are very repetitive and students often dreaded doing them because the questions were updated with corrected versions; we still only had one week to do them, so more often then not, I chose to start later in the week waiting for all the corrections to come out. 

Also he is very terrible at answering emails (I put 3827 in the subject line of all of my emails!). Sometimes questions to homeworks would be answered after the homeworks were due. 

He has very strict extension policies. A couple of my friends just got 0s on their homeworks because they were sick/absent/had religious reasons for missing the deadline.

All in all, I don't feel like Prof. Rubenstein's teaching was effective, at least for me. But during the times I went to office hours, he was helpful. 

It seems to me that in general, he gives no shits about his students. 

He also said he reads CULPA reviews so I guess this is my honest opinion. ","1 problem set a week; each take a lot longer than you expect (40%)
1 midterm (35%)
1 final (45%)

Totals to 120% but he reduces your lowest category by 20%. ","7","Fundamentals of Computer Systems","CSEE W3827"
"161","4251","Mon, 08 Mar 2010 04:50:53 GMT","24078","2427","Professor Rubenstein was great. I think it's unfortunate that he received such bad reviews in the past, but it's clear that he's taken the feedback and changed his style of teaching - he frequently stopped and checked in with the class to see if everything was comprehensible (and it almost always was). He also did a fantastic job of scheduling the course, and he made sure there were days that existed only for review before tests.

He also is extremely helpful during office hours, although you probably won't need to go. The course is a strange combination of both fascinating and quite simple, conceptually. Most people will be learning a completely new facet of computing, but Prof Rubenstein made it both easy to understand and interesting. He takes a very bottom-up approach; you'll start with binary math, then boolean logic and gates, then designing logic circuitry, then ALUs, registers and eventually basic processors. It's a really cool course.

Also, Dan is just the man.","Totally doable homeworks once every two weeks. Took around 2 hours each, but there is a strict no-extension policy. Very doable midterm (a few got 100's) and final.","7","Fundamentals of Computer Systems","CSEE W3827"
"162","4251","Thu, 12 Dec 2013 01:14:06 GMT","28834","4221","Martha is the kind of professor who doesn't mind reteaching an entire day's worth of material if students seemed like they weren't totally clear. She is also the kind of professor who takes in student feedback about ambiguity of problem sets, sends out the clarifications well before the sets are due, and changes how the question is worded so it will be clear for future classes. (Her slide sets are like finely aged wine.)

She gives eminently reasonable problem sets and tests (1 midterm, 1 final, noncumulative) and once got off an airplane to fix a glitch in her website that students needed to access for a problem set.

She also had a great sense of style, is genuinely and adorably amused by things like slow processors, and will explain things for you in multiple different ways until you get it. She's on par with Adam Cannon and Jae in CS-prof god(/dess) status. If you get her for fundamentals, be elated.","6 problem sets, 1 midterm, 1 final. All slides and psets are accessible online.","7","Fundamentals of Computer Systems","CSEE W3827"
"163","4251","Fri, 03 Jan 2014 18:16:12 GMT","29022","4221","I agree with the review below that Martha totally puts in 110% effort to give good feedback and make sure the class runs as smoothly as possible. A further example is that when she found out that her final letter grade script had a bug in it, she sent personal emails to anyone who contacted her about it (within 24 hours on top of that) and promptly fixed the issue.

With regards to her teaching, I would say that she is not quite on par with Adam Cannon or Jae yet. However, in looking at her previous reviews and comparing it with my experience with her this semester, it appears that she has improved a good amount. My guess is that if she keeps refining her teaching skill, she can eventually teach at that level.

One thing that others have not mentioned is that you will be programming in MIPS Assembly Language for one of the psets. My suggestion would be to take AP (3157) before or at the same time as this course (I did the latter) since AP really gets you thinking in terms of lower level computing, which makes the assignment much easier. On the whole, AP and Fundamentals really seem to complement one another, so try to get AP in first or at the same time.","6 problem sets (5 theory, 1 programming) with lowest score dropped
1 midterm
1 final (non-cumulative, only second half material)","7","Fundamentals of Computer Systems","CSEE W3827"
"164","4251","Wed, 15 May 2013 01:06:24 GMT","28348","2427","There was not much I liked about the course taught by Rubenstein. The best days in class were when Edwards/Kim came in to sub for Prof Rubenstein when he was out.

The worst offenses:
* He is not prepared enough for the lectures in order to make the material engaging or easy to understand. They consist of him reading off of his overly complicated slides and often not coming up for air.
* He does not require a textbook but suggests two textbooks. His slides are basically reproductions of the books. I had the textbooks and did not think that the slides were enough to understand the material by. I think it's unfortunate that he uses two books when the course could be summed up in one book. He should drop the awful Mano and Kime book.
* His homeworks are a mixture of totally tedious repetitive nonsense (adding binary numbers excessively) which teach little, to extremely esoteric circuit creations which also do little to explore your understanding of the material. Perhaps the course is meant to test your ability in solving puzzles through building circuits - if that is the goal then I guess I've misunderstood the intention of this course.
* His homework policy is to allow for cheating. He allows people to collaborate on the assignments which in my opinion discourages anyone from doing their own work. For those that do their own work and do not compare answers before submission are just out of luck I guess. If you submit without comparing your answers and knowing you have 100% going in, I guess your'e a dope. If the whole class is allowed to collaborate why even give credit for the assignment?
* His exams are insanely unfair in my opinion. After having done reasonably well on the homework assignments I felt unprepared for the midterm/final. There are some reasonable questions but then there are those that will boggle the mind how they accurately test my understanding and knowledge of the material. But again maybe I've failed to understand the goal of this course. His exams consisted of reading a mountain of text to explain the premise of creating some new fangled circuitry. Then having questions part b through d rely on your successful understanding and completion of part a. It doesn't help that in this mountain of text it is mostly incoherent explanation of what he is trying to express. My impression is that they were overly complicated and/or error filled.
* I have had some minor experience with this course's topic before and usually find it fascinating but I found myself unwilling to participate towards the end.
* The course covers too much ground and not enough of it carefully. There seems to be a theme that a lot of what we are learning is not necessary to know. That's insane to me. Everything we learn should be at least interesting and inform our future. Cut out the small extraneous that have no relevance.

The good:
* He is a nice guy and office hours are very useful.
* When he would work out a problem manually on the board this was a very useful exercise. Often I think he would realize the absurdity of certain questions when it would take him 20-30 minutes to complete.
* He reads feedback and there was an adjustment to the pace of the class which at first was going a mile a minute for no reason.","9 homeworks
1 midterm, 1 final
20% reduction in the lowest scoring item","7","Fundamentals of Computer Systems","CSEE W3827"
"165","4251","Tue, 11 May 2010 02:30:02 GMT","24353","4221","Martha is one of the nicest professors I have met here. She takes the time to try to help out students, wants to know their names, and tries really hard to be available. That being said, she is a new professor to Columbia, and it shows. Homework lengths varied greatly, and she often seemed surprised that things took as long as they did. She corrects herself in class so many times that it is hard to know what the conclusion is when she is finished. The midterm exam, for example, arrived nearly 20 minutes late since there was an issue with the printer. Why not print it out the day before? The average on the midterm was a 50%, and she seemed happy with that (I think it was higher than last year's). Hopefully with some more experience some of these rough edges will go away, as she has a lot of potential. A friend who took this class both with her and Rubinstein said that it is definitely better to take it with her.","6 HWs (40%), of varying time requirements and difficulty with the lowest score dropped. One midterm (30%) and a final (30%) which is non-cumulative. Exams are open book, but that doesn't mean that they are easy.","7","Fundamentals of Computer Systems","CSEE W3827"
"166","4251","Sat, 07 Jan 2012 04:25:47 GMT","26849","1637","Prof. Edwards' sense of humor is really quirky. As the reviewers below noted, it could be quirky to the point of being a little bit embarrassing.

However, I fundamentally disagree that his humor took away from his teaching. He is by no means a perfect lecturer. He isn't charismatic like Gulati, thorough like Vallencourt, nor approachable like Blaer. However, he still kept the lectures interesting and got the material through to the students. It definitely could be that PLT (which the reviewers below took) and fundamentals are fundamentally different in difficulty. However, if you see yourself having to take Fundamentals with Prof. Edwards, I would say go for it, but be ready for a barrage of quirky humor from your first day.","6 Problem sets, Midterm, Final","7","Fundamentals of Computer Systems","CSEE W3827"
"167","4251","Thu, 23 May 2013 05:05:44 GMT","28444","2427","Ugh. I completely agree with the previous few reviews--Rubenstein is a really nice guy who comes to class unprepared to do anything but read off his slides. On the bright side, he gives great, challenging homeworks, and tests that you can't really study for except by doing these homeworks (a lot of people cheated on homeworks, which he acknowledged, but that became clear from the tests). I learned...something? from this class, but only from the homeworks, not from him. 

If you can, take it with Edwards/Kim. Or hope that he posts his slides online but teaches by hand on the board instead (the days he did that because of technical problems we learned, for once). 

Pro-tip: go to his office hours. He'll walk you through any problem you have, including those on the homework. He'll also boost your grade at the end of the semester if he knows your name. ","9 great homeworks. Hard midterm, hard final. Drops lowest 20%. ","7","Fundamentals of Computer Systems","CSEE W3827"
"168","4251","Sat, 14 May 2011 14:50:10 GMT","26000","4221","Like the person before me said, Martha is an incredibly nice professor. The course was well laid out with clear lecture slides that were all posted online before the class. That being said, if you miss a class (or a few) it's not too big a deal, but make sure that you go back and listen closely to the next lectures that expand on those topics because it can be easy to fall behind. Personally, on a few of the homeworks, it took me a little bit to understand what the questions were asking, but a quick conference with a friend uncovered that they were a lot simpler than what I was expecting. And if for some reason a concept doesn't stick, she drops your lowest grade. I would definitely recommend Prof. Kim optimistically to anyone who has to take fundamentals. This isn't a class to worry about and should interest people of all areas of study in CompSci, EE, and CompE with at least one topic.","6 homeworks worth 40% and a midterm and final worth 30%","7","Fundamentals of Computer Systems","CSEE W3827"
"169","4251","Thu, 16 Dec 2010 22:46:36 GMT","24991","2427","This is the first review I've ever written on culpa, but I have to say prof Rubenstein is the best professor I've ever had. I was initially hesitant to take this course because I was scared of the course material(circuits! circuits! and more circuits!), but professor Rubenstein presents does an amazing job of explaining things and his lectures are actually enjoyable. I, too, was somewhat worried after reading the old reviews, but now that I've taken a course with him, I know for a fact that those are not an accurate description of him. (Maybe his evil twin brother as someone suggested...) If you need to/want to take Fundamentals, by all means, take it with him.

He makes great lecture slides(that are actually better than the textbooks) and post them on the courseworks ahead of time. Some students just read over the lecture notes and do not attend the lectures, but I suggest not to do it because 1. the lecture notes are quite condense and hard to understand without the aid of lectures (at least for me)  and 2. it's one of the few classes where lectures are golden. His lectures are very interactive and he makes it obvious that he's enthusiastic about teaching (which can only help the students). Although the pacing can be somewhat fast at times, if a student asks a question, he'll slow down and explain to make sure the student understands the material. 

There's about one homework per each week (9 HW total). Homeworks are reasonable, but can be tough. It depends on how much background knowledge you have (If you're good at circuits, you'll breeze through the first half of the course). Start at least 3 days before it's due and go to the office hr if you're having a hard time. His tests are open book/open note, but since he asks design questions, you have to have a solid understanding of the material. There's no surprise questions and he won't try to trick you, but will test you how much you understand the core of the material. Take HW problems seriously, as they will help you tremendously. 

Office hrs literally saved me. This is the only course I attended office hrs on the regular basis. You come in with a question, and you will walk out with a full understanding of the material. If you have a schedule conflict with regular office hr, don't hesitate to email him and make an appointment. He truly cares about his students, and he'll make time for you. In fact, I never went to his regular office hr as I had another class during the time, but I never had a problem getting help whenever I needed. I got the questions that would take me 10 hrs to understand answered in 20 minutes. 

He's approachable, funny, enthusiastic, and truly cares about the students. 
Take this course with him if you can, and you won't regret it. Interesting course material taught by a great instructor, what more to ask?

","9 problem sets (1 HW per 1~2 weeks)
1 midterm
1 final

Could be challenging, but worth every effort!","7","Fundamentals of Computer Systems","CSEE W3827"
"170","462","Fri, 02 May 2014 21:40:11 GMT","29392","2941","(I'm the author of the December 17, 2013 review of CS Theory with Yannakakis.)

In general, my take on this semester is the same as my review of CS Theory with Yannakakis, though this time the lecture hall wasn't so sleep-inducing. Yannakakis is not exactly an exciting lecturer, but charisma aside, he does everything he should: he chooses a good textbook, assigns homework that reinforces and expands a bit on the material, has a TA who grades fairly, provides good lecture notes online, and so on and so forth. My only real complaint is that the class overlapped a lot for the first month with CS Theory, but given how many people were confused by really basic issues about Turing Machines, I guess that wasn't Yannakakis' fault.

I'd definitely take a third class with him if the opportunity presented itself.","Homework every other week (not terribly difficult), no midterm, a take-home final.","7","Introduction to Computational Complexity","COMS W4236"
"171","462","Sun, 18 May 2014 04:51:47 GMT","29500","2941","Computational Complexity with Professor Yannakakis is an excellent class.  This was my second class with him, the first being CS Theory in the fall, and with that said, I am confident that he is a good choice for any class he is teaching.  I will definitely take another class with him if the opportunity comes up.

While he might not be a dazzling speaker, he is always well-prepared with very structured lecture plans and does a great job presenting the material.  The material is very well-motivated and he involves the class in his lectures by frequently asking questions.  He is able to thoroughly answer any question that comes up from the class.  There are few to no errors in the lectures, and detailed lecture notes are posted on Courseworks.  The textbook is the bible for the subject and it is well-written, but he doesnt strictly follow it, so its really not necessary for the course.  

The homework assignments were also very well-written and unambiguous, and ultimately at the heart of the course.  I definitely learned a lot from working through them.  While this class is the natural follow-up to CS theory, one difference is that there are fewer formulaic problems that simply require following an algorithm.  Usually a bit of thought is required for most of the homework problems, but theyre manageable as long as you dont leave them until the last minute.  Hints are generously provided for more difficult problems.  

I agree with the previous review that the Turing Machine topic at the beginning of the course couldve been shorted.  Much of that material was familiar for CS Theory, and it was without doubt the least interesting part of this course. 
","Very reasonable.  There were 6 homework assignments, containing 5 problems each, worth 60% of the grade, and a take-home final exam worth the remaining 40% of the grade.","7","Introduction to Computational Complexity","COMS W4236"
"172","4758","Wed, 14 May 2014 17:27:43 GMT","29467","3509","First off, Jae is a fantastic lecturer. If you go to every class and pay attention (which isn't too difficult to do), you'll learn a ton about C, C++, how the internet works, etc.

The material itself is quite difficult. C is a low-level language, so you'll be doing a lot of stuff that you probably never did before (especially in 1004/1007). You have to worry about memory, how pointers specifically work, and every other minuscule detail that gets done for you in higher-level languages like Java.

It's interesting that you start at C, but build up to C++, which shows itself to be strangely similar to Java (Java was built off of C++)... so you kind of do a full-circle.

Overall, would absolutely recommend this class, but make sure you take it in a semester that you aren't too overloaded with other stuff. You will do a crapload of work, but you'll learn a lot.","10 labs, drop 1. labs=30%.
2 midterms, each 20%
1 final, 20%","7","Advanced Programming","COMS W3157"
"173","4758","Wed, 11 Jan 2012 21:52:49 GMT","26895","3509","Jae is my idol. He is such a genuine, honest, and open teacher. Jae loves his subject and knows EVERYTHING about it. Jae was very responsive to student input regarding class administration. The only reason the class was because of students who took advantage of Jae's niceness and petitioned for extensions on every lab, nearly all of which were granted.

I learned so much from this class. Judging from past CULPA reviews, it seems barely anyone has been able to do what has been deemed even a ""competent"" job teaching this course, so the fact that Jae made this class so useful and well-run while dealing with such a difficult course is a testament to his teaching ability. The bottom line is: if Jae is teaching Advanced Programming, you should take it with him. No other professor has been able to do even close to as good of a job.

Jae taught well, tested fairly, and is a generally awesome person. What more can you ask for? I wish every professor would be like Jae. Jae deserves his gold nugget rating.","typical CS workload. 10 lab assignments, one of which took a little longer (the climax of  building the web server), midterm and final based on labs. fair grading. good teaching. that's all you need, right? ","7","Advanced Programming","COMS W3157"
"174","4758","Tue, 21 May 2013 16:56:08 GMT","28427","3509","Advanced Programming is a great course which makes you a better programmer. It introduces you to C, C++ and some system programming. It also introduces the UNIX environment if you're not familiar using a shell or an editor like vim.

Jae started slow in the beginning, spending a lot of unnecessary time on C. He rushed through C++ in the end because of this. The class gets most interesting in the middle when you build a simple web server.

The labs take anywhere from 2 - 14 hours of work. Lab 7 is the longest. None of them were really hard, but he extends the deadline for pretty much all of them.

The midterm was just as hard as last semester. It's not bad though because the class average is really low (around 50), so you can get a good grade. The final was much easier than the midterm. A lot of people complain that this class is hard - it's not. It's of average difficulty and has an acceptable workload for a 4 credit course.

Jae's a great teacher, but he's not very approachable. He does care for his students, but he's very curt and to the point when you talk with him in person.","30% labs
30% midterm
40% final","7","Advanced Programming","COMS W3157"
"175","4758","Wed, 22 May 2013 15:48:32 GMT","28435","3509","I definitely wasn't alone in that I had a lot of mixed feelings about this class.  I'll start by saying that is certainly the only viable option for taking Advanced Programming.  (Sidenote: If you're even thinking about taking Shlomo Hershkop's course, you're better off dropping out of school than wasting your tuition on an insulting elaborate practical joke).  However, I wouldn't call this class an amazing one that you absolutely have to take before you graduate, unless of course it's a requirement.  It really is just a programming class.

Full disclosure: I have no plans to take OS and I'm not sure when I'm going to use C again.  The general theme of this course was ""trust me - this will all be useful later.""  As a result, the subject was as uninspiring as it gets, unless you happen to love learning about large amounts of syntax and technicalities of programing languages.  

The best part of the course was the labs (programming assignments).  They were very well written were never had ambiguities.  These assignments are the same every semester, and solutions are provided immediately after the deadline.  Though this technically makes it very easy to cheat, keep in mind that the labs are the core of this class, and there's no point in taking it if you're not interested in working through each of them.  Because they were so detailed, they could be a bit overwhelming to read the first time through, and it is very important to follow the instructions to the letter.  Ultimately, they were very enjoyable to work through, and I can honestly say I learned almost everything that I learned in this class from working through the assignments.  Rubrics were provided for each lab that clearly stated how points were awarded.  

I personally didn't find the lectures that I attended all that helpful.  The ones at the chalkboard gave good introductions to topics, and I profited the most from these.  He'd often go over something too quickly, and then be asked to repeat it three or four times more.  Occasionally, he'd repeat a large portion of the previous lecture, though it was impossible to tell when he would do that.  Ultimately, it was clear that he made the effort, but had trouble keeping everyone in the large classroom on the same page.  There were a lot of times when he'd explain something simple, or say ""you remember this from last time, right?"" and then five minutes later someone would raise their hand and ask about it.  When he did hour-long demos from the computer with the lights out, I found it very difficult to focus.  I'd always try to follow along with him, inevitably miss one step and therefore be lost for the rest of the demo.  

The pacing was also strange, as the last three weeks were the only time we spent programming in C++.  Almost the entire first half of the semester was dedicated to the C language, and the remaining time was spent on systems programming in C.  I understand that the training in C might be important for people who plan to take OS, but for everyone else it seemed like overkill.  

I really never got the point of the whole YAXing policy.  Looking back, the deadline for every lab besides the first one was extended, and roughly half were extended twice.  Sometimes, the announcement of the extension was within 24 hours of the original deadline.  Talking to previous students and looking at CULPA reviews, I see that he's been doing this same practice since he started teaching.  I can't help but wonder why.  It would make a lot more sense for him to just tell us how long we truly had for the assignment so that we could plan ahead.  At this point in teaching the class, he probably knows how long he actually plans to give the class for assignments. 

The mailing list was something about which I seemed to have the minority opinion.  I was really not a fan of it.  It might've worked better with a smaller class, but for a class of 140 students it bordered on absurd.  There was so much showing off and subtle attempts to suck up to Jae.  Some attempts were not subtle at all; for example, when the final exam solutions were mailed out, one student sent out an email saying that the exam was very well designed, and that this was the best course he had ever taken.  People would also use the mailing list to tell the class about how they went further and did additional work.  

The worst part of this class, and by far the most frustrating, was the evaluation process.  Jae said on the first day that it is very difficult to write an exam that assess what we truly know.  After seeing last semester's exams, it is clear that he is making the exams substantially more difficult by the semester.    He always said that working independently through the labs was the best way to prepare.  As someone who did just that, I can frankly say I've never felt so unprepared for exams as I was in this class.  The issue wasn't my approach to the labs, nor was it that I wasn't studying hard enough.  The midterm was about the same length as the final even though the final was given during final exam period.  There were a total of 17 questions on the final, and every single one of them was either a (very) short answer or multiple choice, with absolutely no partial credit under any circumstances (and trust me, there were plenty of places to mess up).  Questions would be asked on code fragments that were as long as 3 pages.  Single short problems would often test 5 ideas at once and carried a high all-or-nothing point value.  To add insult to injury, there would be multiple questions testing the same trick.  It seemed crazy to me that single trick multiple choice questions carried the same amount of weight as entire programming assignments.  The only reason I didn't feel worse when walking out of an exam where I had to make a semi-educated guess on most questions was because I knew that no amount of preparation would've been sufficient.  

Ultimately, the final curve is very generous, with half of the class receiving at least an A-, and this will save you at the end of the semester if you work hard and have the right amount of luck.  The grades on both exams truly ranged from 0 (yes, zero) to 100, with the median on each around a 50.","30% Lab Assignments (9)
30% Midterm Exam: Median 48 Standard Deviation 21
40% Final Exam: Median 50 Standard Deviation 25","7","Advanced Programming","COMS W3157"
"176","4758","Sun, 25 Dec 2011 22:58:54 GMT","26735","3509","Jae was an okay teacher with a fair grading scheme, but I wouldn't say he was mind-blowingly spectacular. Take my review with a grain of salt, as I got senioritis halfway through the semester and never went to office hours.

The semester started out well enough, with a lot of good explanation of pointers, C syntax, etc. But as time went on, he started to fall behind in his lectures. As a result, the lectures were less focused on explaining and teaching material and more focused on explaining what you need to know for the labs.

Labs also took a similar route. I started from knowing the functions I would need for the labs to Googling everything. Thankfully there's stackoverflow and cplusplus. He would also always extend the lab due dates to reasonable dates for everyone.

Tests were fair. He emphasizes that doing the labs on your own and understanding what's really going on will be the best preparation for the exams, and he means it. I didn't need to study much else beyond reviewing the lab solutions.

Jae also set up a course listserv in which he (Jae), the TAs, and the students could all participate. Anyone could ask or answer question, post articles related to computer science in general, etc. It's a good system, but you have to find a way to sort course e-mails from the rest of your inbox; the listserv totaled 766 e-mails throughout the semester.

Overall, someone with any initiative and the ability to adapt to CS languages shouldn't have a problem with this course, and there's plenty of resources to help you along the way if you seek them out. But don't expect to come out with god-like programming skills. It's just a CS course.","10 labs, with lab 7 taking the longest time and lab 8 being truly optional
1 midterm
1 final","7","Advanced Programming","COMS W3157"
"177","4758","Thu, 16 Jan 2014 00:33:35 GMT","29153","3509","I took this class 1.5 times. I started as a sophomore, shortly after 1004, with the mindset of ""let me just make this program work."" That mindset led me to a 50% by the time the withdrawal date came around (which would've been a B-, but I thought I was failing) so I withdrew.

I enrolled in the class again 2 years later, this time with the programmatic maturity to understand what the class was really about, and why that information mattered. Although the classwork takes the format of programming assignments, they are really about the underpinnings about C/languages (e.g. memory management, pointers, etc.). If you want to learn it well, you should break things! Rewrite your labs in different notations (e.g. array vs. pointer) to learn the differences. Become intimate with C. 

The reason I mention my backstory is to help advise students who are on the fence about taking the class now or later. Some people can handle AP early on. But two years ago I honestly didn't care about freeing memory or understanding where my variables were stored. I gradually developed that interest after taking a few more CS courses/ being asked such things in interviews, and I am very happy I had the opportunity to take AP again. I got a lot more out of it, and the class was immensely more interesting.  

The class has 10 labs, of which 1 (lab 8) is optional. In the past, Jae had a policy of only granting class-wide extensions and every lab would be extended. He has changed his policy, for the better, to allot everyone 7 penalty-free late days each, to be used whenever (with a max of 2 late days for a given lab). This is a great policy, since it allows you to manage your time a lot better.

The class also has 2 midterms and a final. The all-or-nothing nature of many of the questions means the grades are relatively polarized--you could do extremely well or extremely poorly, for missing 1 simple thing. If you get above a 90, you really know what's up.

So I mostly wrote this review to call out the author of the last post (December 2013) regarding handling of the final. To give readers some context, several people in the class missed 5 points of a 20-point question for different reasons and proceeded to somewhat aggressively mail the list-serve arguing over which wrong answer was ""less wrong"" and deserved 2 extra points. Several TAs and Jae explained the reasoning to the rubric in response. 

To insult Professor Lee's English, when he so eloquently and rationally addressed each concern from the email chain in a class announcement, is incredibly rude and borderline racist. Full disclosure: I missed 10 points of the same problem for a different reason, and though I disagreed with the severity, I had the decency to not make personal attacks.

Though I found grading in the class sometimes tough, and I did not do as well I as would've liked, I learned *a lot* and became a much better programmer. Much of this is due to Jae. He is one of the few people in the department devoted exclusively to his students. I have personally experienced how he uses student feedback to iterate on his teaching from semester to semester, in order to better serve his students. He organized a class hackathon this semester, complete with pizza, Insomnia cookies, and t-shirts, to help students connect on an informal level. He stayed there the whole time, until 5:30 am, making sure he chatted with everyone at least once before he ran off to take his son to soccer. He learned my name despite the large class size (I never attended office hours or anything either).  He is one of the best professors I have had in the department, and I would recommend taking his class to anyone mature enough (as a programmer/student/person) to handle it.","Typical of a CS class. 3 exams, 10 labs.","7","Advanced Programming","COMS W3157"
"178","4758","Wed, 10 Dec 2008 21:03:57 GMT","21659","3509","Jae does an excellent job making this class interesting and informative. He learns everyone's names and is always helpfully giving extensions for every lab assignment and responding to the class email. I learned a lot about how unix worked and how to write good c programs, including completion of a web server. The assignments are well thought out to build and each other and simulate real life programs.","Light reading with programming due every week to two weeks. Assignments take a while but if you listen in lectures should be fairly easy.","7","Advanced Programming","COMS W3157"
"179","4758","Thu, 15 May 2014 06:06:28 GMT","29472","3509","One of the better CS courses out there. It's truly inspirational how Jae teaches (Sidenote:  Chris Mulligan and Jonathan Balsano, the head TA's are also a plus for this course; they know everything and they will go the extra mile to make sure you know the way Jae wants you to know the material). The labs get progressively harder (lab 2 is particularly challenging for those that only know Java and thinks they know everything).

Jae hands out a bunch of very clear yet brief set notes for every topics. The listserv is very useful and you won't have to wait more than a couple of hours before a TA responds to your questions.

The bad part are the exams. For all the thought Jae puts into the labs and lectures, I feel he hasn't figured out a way of writing exams that aren't so unforgiving yet as challenging as the ones he cooks up. No matter how many hours you spend studying for the exams, you will be challenged. There are no easy questions. You almost certainly will need to go through an overly-complicated program that makes you follow 10-15 logical statements that intersect and go through overly-complicated loops. Almost always the questions will be either right or wrong, and there aren't many questions (usually 10 in midterms, 20 in final). Normally this wouldn't be such a problem, but each question usually tests for 3, 4 or 5 things at the same time. So even if you knew everything there is to know about 4 concepts, if you missed the one, you won't get the answer right (guessing here is really, REALLY bad) and you will probably end up losing a bunch of points. His exams are all or nothing, meaning that you won't get partial credit over anything. You truly are as strong as your weakest topic.

Then again, if you want to be a programmer or you want to do something related to programming later on, take this course. You will learn more in 3 months than you could expect in a year. If you are not a programmer, nevertheless take this course. Programming is all about getting rid of any assumptions you may have and think logically and methodically and CS3157 makes you develop those skills more than you ever thought possible.","If you are not a good programmer, ~10hrs per lab
If you are a good programmer ~7hrs per lab
2 Midterms
1 Final
9 compulsory labs.","7","Advanced Programming","COMS W3157"
"180","4758","Tue, 24 Dec 2013 06:07:55 GMT","28954","3509","I agree in general with the May 22 2013 reviewer on some of the basics (don't go anywhere near anything taught by Shlomo Hershkop, the exams are a bit of a crapshoot, details on labs can be a bit overwhelming but the detailed specs are ultimately a net positive) so go read that and then I'll focus on a few points where we differ to some degree/where things have changed:

- This not ""just a programming class."" Getting familiar with C means getting familiar with a lot of low-level system functionality. If you don't understand pointers and memory management completely intuitively, you'll never really understand what's going on in higher-level languages like Java. Jae Lee definitely gets you acquainted with pointers and memory management.

- But you will learn a lot about real-world programming. For example: I hated the listserv early on and sent the professor a frustrated email about it, but I came around eventually. A lot of the big (and small) open source projects are built around listservs and all that comes with them. This class's listserv gets you used to the number and type of emails (including repetitiveness), the personalities that appear (the noob who asks a question he could've googled, the guy who replies to everything within 10 seconds but is kind of an asshole, the Benevolent Dictator For Life, i.e. Jae Lee, etc.), and so on.

- YAXing (as many extensions as you want) is gone as of this semester. By all accounts, that's a big improvement. Also, we had two midterms this time around instead of just one.

- I felt that the exams assessed the material quite fairly, although they generally played to my strengths and I did well on them without studying, so people who studied a lot and still did poorly likely feel otherwise with good reason.

- Focus on the principles, not the details. C, C++, Unix and TCP/IP all have a really deep underlying logic and if you can wrap your head around it you're set. Everything is there for a reason. If you remember the reason you can derive the details on the exam. For example, in Unix and C ""everything is a file"" (external devices, actual files, other programs, etc.) so when you write to stdout you're writing ""to a file."" When you read from stdin, you're reading ""from a file."" Sockets can be treated exactly like a file. BUT because ""everything is a file,"" a ""pointer to a file"" (FILE *) can't possibly be an ordinary derefencable pointer -- dereferencing, after all, is the act of visiting a location in memory and reading some information out, which you can't conceivably do with a web socket -- so if you worked through that logic, you wouldn't make the mistake some people did of thinking that a file pointer can be dereferenced. So, principles, not details.

In general, I liked this class a lot, though a grading dispute on the final exam made me seriously question Professor Lee's judgment/command of the English language. However, given that I did not witness any other such problems, I'll be charitable and assume it was a truly isolated incident.","30% final, 30% labs, 20% each for 2 midterms","7","Advanced Programming","COMS W3157"
"181","4758","Thu, 22 May 2014 20:59:17 GMT","29540","3509","This class is amazing. Jae is amazing. The TAs are amazing. There's not much bad to say about it other than... Oh. Right. The tests.

Let's start with the good. Jae's lectures are interesting and helpful. I thought that he went at a perfect pace. The homework assignments can be somewhat challenging but everything is so well organized. All you need to do is pay attention in lecture, go to recitation, and give yourself enough time to do the programming. I was almost terrified coming into this course, from the horror stories that I heard from upperclassmen. I heard that the labs would get harder halfway through the course, but I didn't feel like there was that significant a change. I will, however, say that if you don't know the material from the first few labs, you will likely struggle with the latter ones.

Alright, so the tests. The tests are pretty unpredictable. All I can say is try to study as much as you can and beware of Jae's trickery. Do the practice exams to get an sense of what the problems will be like. You might not ever be fully prepared... but good luck, and hope for a good curve? (it will be pretty good.)

Somehow, despite how awful I felt when struggling through the tests, I still really enjoyed the course and I feel like I can look past those. You will definitely learn a lot either way.","10 labs total (one of them is optional). Give yourself maybe 5-12 hours (really depends on the lab). Try to start early. Go to office hours if you need to. There's also a recitation (1 hour) every week.
2 midterms. 1 final.","7","Advanced Programming","COMS W3157"
"182","4758","Wed, 19 Nov 2014 23:02:36 GMT","53565","3509","This class is legendary for a good reason. The assignments are long, the material difficult, the exams are incredibly tricky bordering on unfair. However if you get through it you will have learned as much in this course as self-taught programmers may learn in years, if ever. I write this from a perspective of someone who took this course with basically zero knowledge of computer science or programming experience coming into this class. 

What the class covers really well: C.

What the class will force you to learn by sheer force: the UNIX environment, working with a shell, basic git commands, how memory works under the hood, and more C than you ever care to know, and then some.

What is briefly touched upon: multi-threaded programming through blocking functions, sockets/networks, and basic under the hood stuff for C++.

Jae begins the semester with the claim that he'll turn students of programming into actual programmers which sounds like an ambitious task but he pulls it off fairly well. By the end of the class, you will have coded a linked list in C, written your own web server, and some minimal C++ experience, all of which isn't that impressive on paper. However, the skills you learn here will be applicable to nearly any job you hold as a computer programmer unless it's really implementation-heavy front end stuff. Even then, you will come away with experience of having to read lots of documentation with very little guidance on how to use it, which is expected of all programmers. 

If you want to do programming as a career and are debating taking this class because of the grading, take it anyway. You'll learn a lot more than you think regardless of your grade. He grades to a A- and in my semester he curved everyone to at least a C-. I did terribly on my first exam and still eked out a B+.

This is sort of a requirement: get to know your TAs really well. They are all super helpful, smart, and were probably the reason I didn't drop out after failing my first midterm. They really make or break your experience in the class. ","Heavy. 10 labs, 1 optional, 7 free-form late days, no more than 2 per lab. 
2 midterms, 1 final, all impressively crazy. 

I wouldn't take this and Data Structures at the same time if you're looking to take your programming skills to the next level. Both professors warned me not to do it; I did it anyway and I managed to survive, but I was only taking 10 credits. Still I wouldn't recommend it. Take 3134 or the honors Data Structures first before taking this class if possible.","7","Advanced Programming","COMS W3157"
"183","4758","Mon, 16 Jan 2012 11:22:16 GMT","26926","3509","Jae was a good teacher who cared about the students and put efforts in teaching, but as previous review mentioned, not mind-blowing.

He covered the C language very thoroughly and did an excellent job in teaching pointers--which may be one of the hardest part of C syntax. However, he spent almost half of the semester just teaching C language and as a result, the rest of lectures (netcat, building a web server, C++, etc) were very rushed. Many of my friends who had no knowledge of how web servers work struggled. Example codes and other references were provided but was hard to consume even after attending Jae's lectures.

Grading was fair since there was no partial credit on midterm or final, but because of that, it did not truly reflect how much a student understood the material. Median grade for almost all labs were perfect grade--so labs did not affect your grade that much if you're in the top 50%, the average grade for midterm was very high while the avg for final was around 60, which made the final exam the only differentiating factor of the grade for most of the students. Also, even though the final covered materials from about 6~7 labs, the test only focused on 2~3 labs and *everything* was one word answer with no description allowed--no coding, no partial credit, etc, which penalized students who ""almost got it"" very heavily.

One thing that made Jae's class great was its clean organization. The organization of lectures (order, increasing level of difficulty, etc), mailing list, rubric for grading each labs, lecture notes and lab manuals were all very useful and carefully crafted. Overall, it was a good class and I did learn quite a lot.","10 labs
1 midterm
1 final","7","Advanced Programming","COMS W3157"
"184","4758","Tue, 17 Jan 2012 22:37:17 GMT","26944","3509","Jay was great.  The course started a little slow and could have gone faster on the non-programming parts.  Because of the slow start and the time we spent on make and git it felt rushed by the time we got to c++ at the end.  The lectures (always sent out) were really clear and full of examples.

He set up a mailing list that ended up answering most of the tricky problems in the class.  From the questions the people in the class were split with some people advanced and a lot starting from a very very basic level.  Sometimes the advice on the list was really helpful and in depth and sometimes it just gave the answer with no explanation (or the wrong answer).  One of the TAs (Arieh) seemed to be really good and on top of the list.

It might be good to offer a weekly recitation for people who feel theyre running behind, or offer a basic and honors section of the class.  ","10 labs (one optional).  One midterm and one final.  Midterm was mostly based on the labs.  The final was two parts, one based on a lab and the other on understanding C, pointers, etc.","7","Advanced Programming","COMS W3157"
"185","4758","Wed, 14 Nov 2012 21:39:47 GMT","27633","3509","Jae's class is carefully thought out.  Assignments are meticulous and error free.  He actually teaches material in class.  So you will learn things from him instead of having to teach yourself everything.  The entire class is extremely well executed.  You learn a tremendous amount from working through the assignments.  The class is incredibly rewarding.

Jae is very detailed and his lecture notes are previded which are a wonderful summary of the book and his lectures.  He answers questions in class but does not get bogged down.  He moves through the material swiftly but does not gloss over things.

I can't say enough good things about Jae and his course.  I feel lucky to have taken it.","10 assignments which are paced well.
Midterm and Final which are difficult but not unreasonably written.  The material is all covered in class but the assignments and exams are challenging.","7","Advanced Programming","COMS W3157"
"186","4758","Thu, 20 Dec 2012 05:58:40 GMT","27769","3509","Basically I was really excited to take this class because the other reviews were raving about Jae. When I saw he was teaching again after he got his PhD, I was like YES, and now at the end, I'm just like meh. 

Well, the start was good. He set up a listserv to encourage class participation where students could ask questions and interact with TAs and other students. Everything was explained slowly for people who have never been exposed to C, but then he started to get behind on his lectures. That was sort of when things started going down hill. The labs were fun, but he would not have covered the material for them, and so he had to rush in class to cover what we needed to know on the labs, rather than take a good amount of time explaining things. Inevitably, he would have to YAX (yet another extension) them so he allowed people a reasonable amount of time to finish them. He also changed the labs from counting 40% of the course grade to 15%, which in my opinion has hurt a lot of people. We spend A LOT of time on doing the labs, which is why I think they should count more. That's where we do most of our learning, and where we can demonstrate we have an understanding of the material. 

The midterm was really hard. After he gave us the midterm from fall 2011, which seemed very doable, the actual midterm was a disaster. The average was a 50 with a standard deviation of like 23. As someone who did well on the labs, I figured I was going to be fine on the midterm, but when I saw the midterm, I panicked because it seemed incomprehensible. I feel like I could have done a lot better. 

The second half of the class felt rushed. The C++ things seemed VERY rushed. The last two labs are C++ oriented. Honestly, I'm on the verge of taking the final and still don't feel like I know that much about C++.

I think Jae was very stressed this semester with a class of almost 200 people and that detrimentally affected his teaching ability. Overall, I wasn't blown away by this class. I feel like I didn't really profit from his lecturing style, but I have to agree that the labs are very well designed. ","10 labs, lab 8 is optional (15%)
1 midterm, average in 50s with std dev of about 23 (35%)
1 final, yet to take (45%)
5% ""buffer"" points for people who actively participate in the listserv/did lab8/had beautiful code/other stuff that Jae thinks merits the 5% boost ","7","Advanced Programming","COMS W3157"
"187","4758","Thu, 30 Apr 2009 20:05:14 GMT","22643","3509","Jae's lectures are always interesting, sometimes funny, and certainly relevant and helpful for completing the lab projects. Though many of the projects are rather time-consuming, they are all quite easy if one pays attention in lecture, reads Jae's lecture notes, asks questions on the mailing list, or goes to TA office hours. Jae is sympathetic to students' difficulties due to external influences and sometimes gives class-wide extensions on the projects.

The curriculum is a quick (but thorough) overview of C, C++, and UNIX programming and is very good preparation for many of the advanced CS courses.
There are 10 lab projects (one is optional), each of which one has about a week to complete (before the inevitable extension), and a final exam.","Light reading (though you can skim)
10 lab projects (each can take several hours)
Final exam (40% of the grade)","7","Advanced Programming","COMS W3157"
"188","4758","Wed, 13 May 2009 20:09:01 GMT","22755","3509","Jae is the best teacher I have ever had, hands down, and definitely golden nugget-worthy. He is knowledgeable and approachable. He will never hesitate to review a concept that anyone is having trouble with and his explanations are unfailingly clear and highly informative. There are two required textbooks for the course, but most of us rarely had to crack either open since his syllabus and teaching ability are so great. One of the things I particularly liked was that he set up a mailing list at the beginning of the semester in which anyone could ask him, the TAs, and our peers to clarify concepts, etc. - this was extremely helpful, particularly for the labs.
He is always understanding of his students' tight schedules and tries to be flexible by granting class-wide extensions for the labs. This gets to be a little excessive by the end of the semester, and you start to depend on the high probability that you will have more time to finish the assignment, and here's a tip that took me ages to figure out: DONT!
The course covers the C programming language in depth, offers a good introduction to the UNIX environment, as well as an introduction to C++. However, he designs his lectures and labs to offer sufficient background for a variety of higher-level CS courses, so you will learn a lot more than that!
As Jae said at the beginning of the semester, his goal in this course is to take ""programming students"" and turn them into ""programmers"", and I believe he did just that.","10 labs (programming assignments), very time consuming, one of them is optional
1 final, difficult","7","Advanced Programming","COMS W3157"
"189","4758","Fri, 26 Jun 2009 18:24:15 GMT","22993","3509","Jae is a God. No, not just a god, he is a Three-Wolf-Moon shirt on steroids. Not only does he know his stuff, he knows how to teach it. Granted, this was the hardest class I'd ever taken in my life, but the long hours of work and sleepless nights have made me into a better programmer and students. 

There is a reason as to why people were basically begging him to revive the Data Structures in C class and teach it also; he was just *that* good. The classes were engaging, he would answer any question and repeat things as necessary, and really wanted to stress it all so we would understand, even if we had to go through  it multiple times. 

The most lovely thing about this class is the listserv; through email, all students in the class could give advice and help each other on the homework (code-free of course!). 

Writing your own web server was daunting but once you're done, you'll be amazed at what you've been able to accomplish. He is professor material, for sure. Columbia, be smart and make him a prof with automatic tenure; our Computer Science department needs more wonderful people like him. ","10 labs, 1 optional and for use as a make-up. Start the labs early; they take hours and days to finish. No midterm this semester but others have been different. Prepare for a butt kicking in the final. 

Multiple TA's are available to help you with your homework; the office hours are worth every minute!","7","Advanced Programming","COMS W3157"
"190","4902","Sun, 10 Jan 2010 17:44:55 GMT","23832","2427","Prof. Rubenstein is really nice person. He tries to make everything clear to you and put lot of emphasis on concepts. He prefers to write everything on board rather than using slides. His way of teaching may or may not be preferred by students. Its depend on students. Like many students including me were comfortable with board. Prof. Dan tries hard to make you fundamental clear and theoretically sound. If you attend his lecture regularly, understanding concepts of CN will not be problem for you.

The only thing that was that not much time was spent on practical and programming. You yourself has to learn socket programming. If you are doing it first time then it may take some time.

Overall a very good class. You will really learn a lot especially if you are new or little knowledge about Networks.","Workload is average. 4 Programming assignment and 4 written + one midterm and one final. Midterm and finals together make 70% of grade. So do them properly!","7","Computer Networks","CSEE W4119"
"191","4902","Wed, 12 May 2010 20:17:56 GMT","24368","2427","Rubenstein definitely takes these reviews seriously, and has improved dramatically. Don't worry about his old, negative culpa reviews, because the he is nothing like that. He is one of the best professors I have had at Columbia in CS. After having taken both Fundamentals and Networks with him, I highly recommend him.

His lectures are spread between writing on the board and going over lecture slides that the textbook made. Both are pretty good, but when he writes on the board, he can go really fast. If you don't want to fall behind in class when he's writing on the board, don't copy everything down (though I did, and I often got lost). Listen though and ask questions. The textbook might serve as a good resource. I referred to it several times, but you could probably get away with just using Wikipedia. There's no assigned reading but he does cover nearly everything in the textbook (and more).

Homeworks are reasonable. The first two programs are the hardest, but after that they just get easier (and even easier still). Do yourself a favor and do them in Java, trying to do the noble thing and programming in C just won't cut it. The first program will take 40+ hours in C, or 10 hours in Java. Your choice. You have plenty of time for the programs. The separate theory homeworks are assigned with only 1 week to do them (sometimes concurrently with the programs), so if you don't start early they can be tough.

His tests and theory problems work the same way. You learn the basic concepts in the class. Then you're asked questions that rearrange problems to something you've never seen before and are something that was covered in class. The only way you can do well is if you have a strong understanding of the material (obviously).

He is a fair/generous grader and a nice guy if you go to his office hours. Listen, ask questions in class, start the programs relatively early (and do them in Java!), know the concepts and you'll do fine. Usually the class has a low average too.

Do take this course even if it's not required for your track. Unlike some CS classes, the material is actually interesting and relevant to so many things. No abstract theoretical stuff that you can't relate to anything. All in all, an excellent course and excellent professor.","4 programs (they get easier as the semester progresses)
4 theory assignments (some easier than others)
1 midterm (too long)
1 final (reasonable, though tricky)","7","Computer Networks","CSEE W4119"
"192","4902","Fri, 07 Sep 2007 00:00:00 GMT","20317","2427","First of all, Rubenstein is a little insecure. At least that's the first impression he gave to me, and I write this knowing full well that he's going to read this review. In the introductory lecture, he spent a full five minutes explaining why the reviews of him that were posted on CULPA are unfair. 
While I've heard professors respond to CULPA reviews before, I've never seen anyone get so defensive about one. 
It leaves you with the impression that he feels like he's got something to prove, which is unfortunate since he's not a bad teacher.

Unfortunately, for all the time he spent preparing his defense of his CULPA reviews, he never really seemed to spend enough time preparing to teach the course. The fact that he doesn't like any of the books out there isn't by itself a problem, but he needs to understand that there are people who like to be able to use books as a reference, to supplement lectures. The fact that he didn't decide whether to teach the course top down or bottom up until the second lecture meant that he couldn't recommend a book that covers the material in the same order that he would. This meant that those of us who tried to use the book he suggested to help with the early material were stuck with references to things that wouldn't be covered until the end of the course. How difficult would it have been for him to take the time to make that decision just a few days earlier so that he could suggest a book that could complement his lectures?

Likewise, despite requests from several students, he never produced any kind of schedule for the course. No one had any way of knowing what would be covered, when it would be covered, or when the assignments would be due. This was especially problematic around midterms, when people are trying to budget their time, and Rubenstein decided to give out the information pertinent to assignments at the very last minute.

I don't have a problem with teaching networks from a theoretical perspective, but I wish he spent more time talking about networks early on and less time trying to justify his decision to teach the way he does. Furthermore, everyone in the class has already taken a stats course of some sort, since it's a prerequisite for the course. It really wasn't necessary to spend 3 lectures early on explaining about expected value, especially since there was no schedule that people who already understood stats could refer to so that they could skip the redundant sessions.

The assignments were the kicker. He's certainly not the first CS professor I've had who's extremely rigid about assignment deadlines, but usually the ones who are that rigid are obsessive compulsive about posting the assignments well in advance and making sure that the project specification is detailed enough to avoid problems. Instead, Rubenstein would give out assignments usually a day or three after he promised, only to have to go through several rounds of revisions to account for mutually contradictory requirements within the project. It's not that the assignments are bad, just that he doesn't seem to take enough prep time to really set them up properly ahead of time.

As for his exams, he takes great pride in making them hard, which is certainly his right. The trick is to understand that he'd always rather ask a question designed to trick people than directly test their understanding of the underlying concepts. While it's useful to understand the concepts, you need to go into his exams trying to find the places where he's trying to trip you up. Unfortunately, this means that performance on the tests is at least as much about your ability to outsmart Rubenstein as it is about whether or not you're learning about computer networks.

All told, don't go out of your way to take any classes with him. He's not bad at standing in front of a room and explaining things, but he seems thoroughly uninterested in spending sufficient time preparing to teach. As for the theoretical angle he likes to take, it's not as bad as the other review would indicate, I just wish he hadn't wasted everyone's time with remedial stats in order to do it.","Regular problem sets. Not so regular programming assignments. Don't get going too early on the assignments, since he'll change them. Midterm and final, designed to trick you.","7","Computer Networks","CSEE W4119"
"193","4902","Sun, 11 Jun 2006 00:00:00 GMT","15122","2427","My biggest disappointment with this class was how dry and uninteresting he made networking.  This modern, dynamic, complex topic that is fascinating to me in all other contexts was presented so that his students will assume they are bad at it, and will shy away from it for the rest of their career.  
The best analogy I can think of is, it was like we were starving and all decided to try sushi for the first time.  When we arrived, instead of bringing us delicious sushi, we were brought a dead fish that we had to dissect using our hands, all the while being criticized by the sushi chef for our poor technique.  We all left slightly sick to our stomachs and unlikely to try out sushi again anytime soon.

You won't get any big pictures here.  You won't learn about any actual protocols in use today.  You won't hear any of the vocabulary everyone else in the industry uses to describe network phenomena.  But on the upside, you will use all of that probability and discrete math that you thought had no real-world application.  
He says that he doesn't concentrate on details (usually after he's just been called out for getting them incorrect), but every concept we discuss is presented as a mathematical proof.  This means that you will leave his class not knowing how to use the word ""bandwidth"", but you will be able to draw the min-max fluid model of traffic flow.  
Bottom line: unless you're an EE major, don't take this class.  If you absolutely have to, at the very least, don't assume that this is all there is to networking.  Promise me you'll give it another try some other time.

","He loves curves!  The average for homeworks and tests were 15-45%.  The final grade is also influenced by how hard he thinks you worked.

About four programming assignments and four written assignments.  The hardest part about the programming assignments is figuring out what he wants you to do -- note that what you think is unlikely to match up with what the T.A.s think.  The written assignments are taken directly from his EE courses.  
Midterm had an average of 40%.  I don't know about the final.  Both were impossibly hard.
","7","Computer Networks","CSEE W4119"
"194","4902","Sun, 19 Apr 2009 04:58:01 GMT","22573","2427","Professor Rubenstein tries to do a good job, but in the end his attempt at teaching networking is not very good.  There are a few ways he can improve this class.

First of all, he teaches the class from a very theoretical point of view.  Considering this course is described as an Introduction to computer networks, he needs to focus less on the theory.  The theory he teaches is excessive to the point that its hard for me to follow how the theory relates to networking in real life.  I dont have a problem with theory, but first Id like to learn something practical so that I know how to apply the theory.

Prof. Rubenstein clearly states that he does not follow the book.  I understand that many professors do not follow the book because they need to present material that relates more closely to the course.  Unfortunately, in this situation, its a big mistake.  Based on the course description, the material in the book is better than what Prof. Rubenstein teaches.

Compared to other classes, Prof. Rubenstein also puts a lot of weight on the mid-term and final.  Based on the amount of effort Ive had to put in to the homework and programming assignments, I think the assignments should be a larger factor in the overall grade.  He barely teaches anything in class on how to do the programming assignments.  This leaves students with a lot of work although it only counts for a small portion of the grade.

I wouldve liked to learn about networking in this class, but unfortunately it looks like all Ive learned is strange theory that I have no idea how to apply to real life.  I think Prof. Rubenstein could do a decent job teaching the course if he would just read the course description one more time and realize that he doesnt need to teach anything other than whats presented in the textbook.  Save the theory for a different class, dont give it to us in the introduction to networks class.
","","7","Computer Networks","CSEE W4119"
"195","4902","Mon, 05 Apr 2010 04:01:01 GMT","24125","4210","Prof Zussman is a very smart professor with a lot of background in Networking. His lectures are very well planned (granted the slides are from the publisher). The lectures are good if you are at all interesting in networking and general informative.
The lectures are planned so well that any student asking a more advanced question or trying to correct the professor is faced with a sharp reply from the professor.
The book does a good job of giving a implementation and high level view of networking, but that is not enough for this course. Gil likes to bring his research of statistics into the classroom and sometimes supplements the book for his slides he created while at MIT. They are full of statistics and other advanced topics which are asked on most of the homeworks.
The statistics which are briefly discussed in class are a large portion of the homework and exams.
The programming assignments were time consuming, but pretty simple if you have used threads and sockets before. You can use C or JAVA.","Assignments: 6-7 written homework assignments
2 mid-sized programming assignments
Mid Term : 75 min. during class hours, calculator and one sided letter paper with notes allowed.
Final: Dec. 21, 9AM, 180 minutes, calculator and one sided letter paper with notes allowed, comprehensive.
Method of Evaluation
Assignments 30%
Midterm 25%
Final 45%","7","Computer Networks","CSEE W4119"
"196","4907","Wed, 08 Jan 2014 09:33:18 GMT","29083","3366","I would recommend this class to anyone except the following two groups:

1) You hate programming in C/C++
2) Thinking ""outside the box"" and ""thinking like the bad guy"" isn't your thing.

Otherwise, I heartily recommend the course. Professor Bellovin's lectures are entertaining -- I actually looked forward to going to the lectures. His lectures are obviously well prepared; he seems to reuse the same slides but updates them the night before to keep them relevant. The lectures are organized and lively -- with a nice touch of sarcasm. 

The assignments are mostly about building a secure program that manages files. Watch out -- just because you ""meet the specs"" doesn't mean you will get full credit (or even a good grade). Unlike other classes where the professor would promise ""you can assume you will get proper input,"" here you can assume the graders will be very creative about how they can cause your program to produce errors. You have to validate inputs like crazy. Writing the actual program isn't hard, but you will use some unusual/unfamiliar c libraries so don't start too late because you need a day or two to familiarize yourself with the documentation. Definitely do assignment 0 to get your C/C++ up to scratch (and you WILL need it for assignment 1). If you start a week early on pretty much any assignment, it will be a breeze. If you start 2-3 days before the deadline, you will be pulling consecutive late-nighters. The assignments aren't cakewalk, but they aren't complicated or ambitious either.

The midterm and final are subjective (and easy), but graded fairly. They accept a lot of answers if the justification is good. They are still published on earlier versions of the course website if you want to have an idea of what they are like. If you know the lectures, can mix the concepts together, and can ""think like a bad guy"" you will do well on the midterms with little studying. If you pay attention in lecture and go over the slides, you will do well on the test. 

Overall, this is a really solid course, interesting, and not burdensome. I recommend it.
","On a scale of 1-10 with 10 being the hardest, I'd say 3-5 depending on your background and how interesting security is to you.","7","Security Architecture & Engineering","COMS W4187"
"197","4907","Thu, 25 Dec 2008 20:23:01 GMT","21960","3366","This course is fairly simple, and a good bet if you are trying to improve your GPA.

4-5 fairly easy, (written + programming) assignments (50%) that will be as simple or as complex as you want them to be; however, putting in extra effort to write an extraordinary program will not fetch you extra credits.

Easy mid-term (20%) and finals (30%) that contain only open-ended, ""open to interpretation"" questions. There are no right or wrong answers to most of the questions. You are supposed to integrate all your knowledge to answer the questions, but basically the answers are so downright simplistic (and amusing) that they might not strike you at all. That is, if you have a rough idea of what has been taught in the class, and use appropriate terms from the slides and suggested reading materials while answering, and mention that your answer assumes ""so-and-so"", you can hardly get it wrong. 

The whole course is about applying common sense. I have to say that I didn't learn anything spectacular in this course. I goofed up in the midterms because I didn't apply ""enough"" common sense, and did very well in everything else. And I got an A- with a 92%, so that should say it all.
","Low to medium.","7","Security Architecture & Engineering","COMS W4187"
"198","4907","Tue, 15 Jan 2008 00:00:00 GMT","20818","3366","Professor Bellovin is an engaging and well-prepared lecturer.  He's got a good sense of humor, he can draw you in to the material, and when he does he explains it very clearly.  Of course, the material is intrinsically interesting, varied and with a strong focus on real-world security incidents.

I'd recommend the course, but there are some caveats.  There's no single textbook and the readings, while usually interesting, vary greatly in terms of how thoroughly they cover their subjects.  On top of that, while lecture notes are posted online, they usually provide only a broad outline of what Bellovin says in class, so it can be hard to find reference material for homeworks or for studying if you missed a class or didn't take good notes.

Also, Bellovin appears to be something of a big shot in the computer security world outside of academia (eg., helped write Usenet back in the day, won the 2007 NIST / NASA security award).  This is kind of cool, but involves him missing a relatively large number of classes to travel to conferences and so on.  When he's gone, classes are taught by the TA, and at least in our case, the TA was a non-native English speaker and a bad lecturer.","4 homeworks, which make up 50% of the grade, plus a midterm and a final.  The midterm and the final are relatively easy if you've gone to a reasonable number of the lectures and done a reasonable amount of the reading; the questions are straightforward.  Each homework has a written part and a programming part.  The homeworks are moderately difficult and time-consuming, about the average for a Columbia comp sci class, but are graded particularly harshly.  There is also a tough lateness policy, and no freebies / dropping lowest grade / etc.  If the class is curved, it doesn't change much.","7","Security Architecture & Engineering","COMS W4187"
"199","4956","Wed, 04 Jun 2014 05:06:27 GMT","29612","375","This is an acceptable course, but I have mixed feelings about it. Let's establish some baseline. Dr. Gravano is undoubtedly a capable lecturer, able to explain concepts lucidly. He occasionally told jokes that made the classroom laugh (sometimes). I'm pretty certain he genuinely cares for his students. You will almost certainly learn a lot of new and useful stuff while taking this course. Overall, the course was planned and executed well.

If you are on the NLP or ML track  or you have a strong interest in search engines or big data, you should certainly take this course. This course definitely falls squarely in that domain (I mean hey, the free textbook was on the NLP part of Stanford's website...). I suspect the facts you will learn will be very relevant to you. However, if you are on the software track taking this course just because it has good reviews and fulfills a requirement, I'd suggest giving other courses stronger consideration. I don't exactly regret taking this class, but I think I could have chosen better.

Dr. Gravano curves the median to a B+ or A-. You may be thinking Sure, I'll just score above average! but in a 90 something class full of smart people and easy assignments and tests, this is tricky to do  and there is a good component of luck involved.

The two tests which comprise 50% of your grade are themselves comprised of about 40% (each) true false questions. That's 20% of your grade roughly!  I felt that some of them were vaguely worded and it's pretty hit or miss if you remember the specific fact the question tests you on.

You'll either need a very good memory or be very planned and careful how you review the lectures, because you really could get tested on any bullet point in them. It's fair and doable, but that's not my style. I'd rather be tested on my ability to apply what I learned to solve problems than my ability to simply remember details about stuff I could recall by referring to the textbook or my notes (neither of which are allowed on the exams).  Oh, and the readings are often straight torture. Thankfully, I don't ever remember seeing a question that was in the reading but not the lecture. Much of the writing was by authors showing off their ability to encrypt simple concepts into Latex strings. Dr. Gravano's lectures blew the textbook out of the water.

The rest of the tests involve manually carrying out an algorithm he discussed in the lecture. The tests are easy, but I'm really not a fan of easy tests because mistakes will cost you a lot more. But that's obviously my opinion... you might think otherwise. 

The HWs (java or python) certainly aren't trivial, but they aren't complicated either. The class generally averaged 9/10 on them with a very small standard deviation. I think I learned more about Python than I did about search algorithms or the subject matter of the class while doing the assignments. The first and last project implemented an algorithm that is probably only a step or two above the complexity of what you would encounter in an undergraduate data structures class at a reasonably competitive school. The second project mostly involved string formatting and learning how to use the API to google's open knowledge database. Personally, I found it pretty tedious. 

This is not to say the assignments can be finished in two days. The API in the second project took forever to figure out, but I'd really rather invest my energy somewhere other than learning an API I won't use again in the foreseeable future. 

In the grand scheme of things, this is not a bad class. Good for some people, less so for others. As you can tell by the other positive reviews, some folks do enjoy it. I see where they are coming from. Some of the things I don't like about the class are a matter of personal taste. I hazard to say you will likely get your tuition's worth on this class. If you are NLP or ML I think you almost certainly will. I'm just saying this class isn't for everyone.","The workload is medium-light. If you are taking some insanity classes like OS or cloud computing, this might be worth using to pad your credits to full time so you don't overstress yourself but still learn a few things -- but again, give other courses some consideration.","7","Advanced Database Systems","COMS E6111"
"200","4957","Sat, 26 Dec 2009 02:08:16 GMT","23628","3409","I'm no compsci genius, but an A in this class wouldn't have been much more trouble from the A- I got. 

He's a really good teacher, and even though waking up to get to a 9 am lecture was hard... I learned something every time I went (and didn't fall asleep). He'll walk you through pretty much everything and is really nice if you have questions- he was probably one of the friendliest professors I've ever had. 

Matlab itself isn't very hard, and there are TONS of resources on the internet to help you if you have trouble...

In all I would definitely recommend this professor and this class. As long as you're resourceful and willing to put in a little bit of effort, this class will be a breeze.","~6 psets, first and last are really easy
1 midterm
1 final

the homeworks are tough, but you have 2 weeks to do them
the tests are definitely doable, especially if you've gone to class and understand the logic behind writing code... 
generally the tests are much simpler than homework problems... they're just ridiculously long. ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"201","4957","Wed, 05 Mar 2008 00:00:00 GMT","21029","3409","To be honest I didn't go to class very often but when I went I found his lectures very clear and engaging. The subject matter was relatively easy. I think this is the least rigorous choice for the SEAS computer science requirement. Matlab is incredibly useful so if you know you don't want to pursue computer science then you should take this class. ","Programming Assignments, Midterm and Final- Nothing too difficult and a very generous curve as far as I know (I got around the average on both tests, did relatively well on my programming and got an A) ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"202","4957","Wed, 18 Jan 2012 20:32:13 GMT","26950","3409","When I registered for MATLAB class, I was inspired by good reviews on Culpa. However, in my experience not all of them turned to be true. 
If you are really new to programming, there is no way you can get an easy A in this class. Though, you will not fail if you show your effort. Pr. Blaer is relativly an easy grader, but he grades only part of midterm and final, TAs do the rest. So go to his office hours and make sure he remembers your face out of other 100 people. 
I am in no way saying it to discourage you, I learned a great deal in this class. However, even after putting increadible amount of time and effort, I can't say ""I can programm now"". 
Peace of advise, do yourself a favor and find homeworks from previous semesters or keep a friend who knows programming,then you easily will be close to the high average of 84%. 
I think problem is in description of this course that has no prerequisites and ""assume no prior knowledge in programming"", you need to know a great deal of Calculus and MUST understand basic programming for this class.
Good luck!","5 homeworks: you have 2 weeks to complete them, but don't full yourself and start early. They tend to take a lot of you time. By a lot, I mean more than 15 hours in total for each homework.
1 midterm. Easier than home works, but it doesn't change a fact that questions are connected and if you were wrong in first question, you can't be wright for the following 5. Though, have to addmit you do get a partial credit.
1 final. Extremely long, and has lots of easy questions that you wouldn't expect, so do yourself a favor and review everything. ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"203","4957","Wed, 16 Dec 2009 23:57:06 GMT","23487","3409","I had never taken a comp sci course before, and let's just say it was rough. Homeworks took me roughly 10-15 hours to complete (boy did I hate the computer labs in Hartley and Mudd after this course), granted I usually did them the weekend before they were due, but it was painful. 

Professor Blaer moves very quickly in his lectures, flipping back and forth between Editor and Workspace so it was often difficult to write down what he had typed before he switched windows. He would also go back into code and edit what he had originally to create a new example, easy to do on a computer but almost impossible to write down the whole code again with the change (usually very small but really important to his point) by hand before he switched back to the workspace. 
 
I went to every lecture but got lost during histograms and plotting and never really recovered until the last homework. I still don't understand the whole image-histograms-plotting thing, which bodes well for the final tomorrow. An unfortunate fact about matlab; not many people take it unless they are comp sci majors or bme kids (or need to fill the comp sci requirement for seas like me), so help around campus is limited. 

My advice? If you've never taken comp sci before then find yourself a study/homework buddy in either your class or as an upperclassmen who has taken matlab before. Go to lecture. Get used to the idea of spending hours at a time in the computer lab (bring a sweatshirt, it gets cold in mudd). If you get to a point in the homework where you just can't handle it anymore, it's ok to just turn it in (especially if it's past 3am). Ask for help if you've sat in front of the computer for more than an hour without making any progress. Seriously. It's not healthy.

Good luck.
","Six homeworks (upwards of 10 hours each, especially from #3 - #5, granted he does warn you) every two weeks or so. One midterm (generously curved, thank goodness) and one final (tomorrow, woo). ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"204","4957","Mon, 05 Jan 2009 10:44:23 GMT","22108","3409","Blaer is amazing! I was convinced that I would hate computer science and that I would probably do poorly in it.  Thinking that MATLAB would be a practical way for someone interested in research to fulfill the SEAS programming requirement, I was less than enthusiastic at first about the course.  However, Blaer made the course interesting and I loved it- probably my favorite course last semester.  I did the work (it wasn't that much) and got an A.  I highly recommend taking comp sci with paul blaer--he is engaging, funny, a really nice guy, and a great instructor to boot! I would consider being a cs major after this course (except of course that the fact that I am a sophomore and I took 1005 instead of 1004 makes this an impossibility).   ","not much at all.  5 assignments throughout the semester, a midterm and a final that were pretty straightforward with a generous curve.  ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"205","4957","Fri, 07 Jan 2011 02:41:24 GMT","25370","4057","This guy may be a genius in programming, but has no concept of how to teach properly. He can't finish one sentence without stuttering, loves to pick on students during lecture to make them feel embarrassed, and gives poor/dismissive responses to students' questions and concerns. Good luck surviving his useless, boring lectures - you'll be staring at the room's clock almost every second, dreadfully hoping and praying that the class gets dismissed early or ends soon enough (which takes like a millennium). Time dilation effect, anybody?

You will definitely come out of lectures more confused about the concepts than before - attending them was almost a complete waste of time and do nothing to help with his crazy problem sets, in which you're not even allowed to discuss/brainstorm any ideas with classmates before submission. This would make sense if the homeworks were doable alone, and didn't incorporate higher level comp sci topics like recursion and GUI that no other computer science teacher covers in an intro course (for non-cs majors!!!).

Ultimately, this may possibly be the most horrible experience ever at Columbia with a professor (not friendly and gives terse replies to emails). Avoid him at all costs or prepare to suffer like never before. Very mentally draining and the only salvation is when the course finally ends (but not everybody can make it to the finish line unscathed). Don't do this to yourself, unless you're a genius at MATLAB of course; even then, I would still think thrice about choosing Pe'er, for he turns a potentially fun class into a complete torture and disaster due to the lack of organization. It's not healthy!!!

","Weekly psets 40% -> hours and hours of pain, without much progress in the end, so make sure to start really early (i.e. almost as soon as the assignment is posted) and attend the office hours of TAs, who were nice and generally helpful, particularly in debugging written code.
Midterm and Final (25%, 35% respectively) - multiple choice and code modification questions (on paper) that were full of tricks. Partial credit was given, but doing well is determined by chance and the arbitrary grading. Heavily curved though.","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"206","4957","Thu, 27 Jan 2011 04:23:36 GMT","25610","4057","HORRIBLE lecturer (cannot complete a sentence without stuttering and ""ehhhh"" every other word). Also, he put his one office hour on Tuesday mornings at 8:30-9:30 am. First of all who is gonna wake up that early... not to mention the comp sci building doesn't even open til 9am. So good luck getting help from him in person, and his responses to email were often curt and unhelpful as well. The TAs were alright... nothing amazing and when they made a program to check our programs A LOT of people had to go for regrades that weren't very liberal at all. Most of the grading was done without taking into account how horribly written and ambiguous the problem sets were. 
Covers recursion and GUIs... which are definitely NOT supposed to be a part of the intro class curriculum. I didn't bother buying the book for the class and ended up with an A-...
But that A- was the result of literally 20+ hours each week on the problem sets. And I guess I got REALLY lucky on the midterms and final... Be happy if you can stay average in the class. The class started out with over a hundred students and ended with only 60ish students.

In short... try your best to avoid this class at any cost. And if you must take this teacher, don't be afraid to harass the TAs with questions and give yourself PLENTY of time to finish the problem sets!

","Weekly problems sets (about 20 hours per week to complete); midterm and final (class averages were usually in the 40s)... and he forces ppl at lectures to participate so don't get caught sleeping.","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"207","4957","Fri, 24 May 2013 21:07:24 GMT","28457","3409","Best professor I've run into at Columbia so far. 

About me: Took AP Comp Sci in High School, had Art of Engineering the previous semester so I knew some rudimentary Matlab. 

I found his lectures really clear and if you take good notes you shouldn't find anything a surprise in the midterm or final. Also he uploads the things he ran in Matlab at the end of lecture so you see what you kinda covered during the lecture. Definitely go to class. 

No textbook required: i managed without it. You can also find a lot of the things on the Matlab website. 

Workload: He has 6 problem sets and drops one. You should not wait until the day before its due because some will take a bit of time. Start early and do a little each day and workload isn't bad at all. Also, he often extends the due date for things which is always a plus for you procrastinators but don't try to rely on that. 

Exams: He reviews what will be on it and reviews the exam after. 

Exams go for ""breadth rather than depth."" Exams weren't too difficult at all. You shouldn't have an awful time. He's also quite friendly and approachable. I found he answers emails in an appropriate amount of time. 

Overall I recommend this professor! ","6 Problem sets (1 dropped)
1 Midterm
1 Final
Overall not too bad at all. Completely do-able. ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"208","4957","Thu, 21 Oct 2010 05:35:09 GMT","24785","4057","This class is terrible. If you're in it, you should probably just curl up in the fetal position while listening to Justin Timberlake's ""Cry Me a River""--you'll get the same grade that you would have gotten if you had gone to every lecture and slaved your ass off. Unfortunately, while Itshack appears to be a computer science genius, his command of the English language appears to be worse than my command of the Matlab programming language (which thanks to his terrible lecture skills and general lack of teaching abilities, is only slightly better than William Hung's English). He mutters under his breath and seems to be unable to articulate his words beyond mumbles and sighs. 

Once upon a time, there was a class called Matlab, which was supposed to be for non-computer science majors. However, the material in this rendition of W1005 is comparable to what Stephen Hawkings does for challenge problems.","CRAZY. IMPOSSIBLE problem sets every week (even the TAs can't complete them). ","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"209","4957","Sat, 25 Dec 2010 09:34:01 GMT","25201","4057","All you really need to know about this class is that it's awful. The class started off like this: too many (easily over 100) students crammed into a room struggling to stay awake as Pe'er tries to explain simple programming concepts (like binary and the way computers represent integers) in convoluted terms. The homework started out so easy that nobody really seemed to mind. 

After a few weeks, though, he transitioned to horrendous weekly homework using MATLAB in ways that no one ever intended. Going to class won't help, and asking the TAs won't help. All you can really do is beat your head against your keyboard for hours on end until a mostly-functioning program comes out. Don't even think about asking your classmates for help; late in the course several people were picked out to complete a special assignment as punishment for cheating.

How are the exams? For the midterm he gives you 12 trick multiple choice questions about the fine details of MATLAB syntax followed by 3 pieces of code to correct. The code correction is generally straightforward, but good luck knowing how well you did on the rest!

The real tragedy here is that Paul Blaer is the other instructor for this course. Avoid any non-Blaer instructors at all costs, at least for this class. You'll save yourself many a headache.","Cruelly long problem sets assigned weekly with arbitrary and harsh grading. Taking the exam is like playing at a casino: you might get lucky, but in the end the house always wins.","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"210","4957","Mon, 20 May 2013 21:07:01 GMT","28411","3409","I took this class having little prior programming experience, having only learned a bit of MATLAB in Art of Engineering. For SEAS and particularly BME students who are required to take this class, having the background in MATLAB from AoE is pretty useful and allows you to slide through the first couple of weeks easily. However, as the class progresses you start discussing Big O notation, structs, object oriented programming, functions like varargin and varargout, and recursion, which were not mentioned in AoE but are really useful to know and require some more time. Later in the course when Blaer talks about histogramming images, you can again use some of the code you wrote in AoE in the homework for this class. Anyway, Blaer is a great professor. He's easily approachable immediately after class or in his office hours. Blaer holds review sessions before the midterm and final, which are really helpful. He tells you what he's going to test over, explains challenging concepts, and in some cases tells you the exact questions. The best advice I can give is to go to class, because Blaer's teaching really clarifies the concepts asked about in the homework. Often you will be able to modify code he wrote in class to solve homework problems. Furthermore, nobody usually goes to TA office hours, but they're really helpful if you're having trouble with a particular problem on the homework, even if you have to go to the crowded Comp. Sci. lounge to utilize them. 

Other notes:
*You don't need the textbook for this class. Just take good class notes or get them from someone else. Blaer also posts all the code he writes on his website. 
*Also, you don't need any calculus for this course, but any coding experience will help.
*Just go to class. It makes everything easier... Blaer always asks if people have questions at the beginning of class.
*Blaer also tells funny stories about things like cat whiskers and building robots, another reason to attend class.","5 homeworks, each about 2 weeks to do, 6th homework is extra credit (a one question assignment involving GUIS). The first homework is super easy, average is 100. HW 3 and 4 are pretty hard, certain problems can take you a few hours to solve. Nothing too serious though.
1 midterm that's after spring break. Pretty hard, 150 points, 90 is curved to B+, ~120 for an A.
1 final, easier than midterm, 250 points.
I got an A without too much stress, and you can too.","7","Intro to Computer Science- Programming in MATLAB","COMS W1005"
"211","6038","Thu, 15 Dec 2011 03:26:19 GMT","26585","46","Nowick puts a lot of effort in this course and he is very disciplined, organized and nice person. However, be prepared to spend ample of time on projects and homeworks if you are planning to take this course. He doesn't make jokes in the class and not a very dynamic professor. Another negative side is, sometimes he will just introduce with a new topic briefly and then he will make suck a homework problem or project that you will need to learn everything by yourself to confront it. Having said that, he is very approachable and if you are lucky then you might get some good TAs to use some help from them. I would say, it's not a dead hard course and it's possible to get good grades if you work hard. Also, if you are good with logic design fundamentals then it will be smooth. 

If anyone is interested to work on digital logic design/ hardware design, then I would recommend to take this course. ","5 homeworks, one final project, midterm, final (we had to do 2 projects and 4 homeworks).  ","7","Advanced Logic Design","CSEE 4823"
"212","663","Thu, 11 May 2006 00:00:00 GMT","14765","39","I would not say that Prof. Feiner has a harmonious relationship with teaching, but it's hard to be more specific than that. He is careful to be organized and to cover material on schedule; yet he obviously hasn't edited the material he teaches in years - it's old and mostly irrelevant, although the final 3 weeks of class finally had some traction. He tries to be a good guy (I guess) by telling you how to prepare for exams and then says ""do all the voluminous, outdated reading and review your class notes,"" as though that's helpful -- and then asks a couple of questions on the exams that are calculated to punish all but those who memorized the course material. 40% of the midterm, for example, was based on a topic covered by 3 pages in the text and a couple of his slides -- all of which seems faintly  sadistic.  The individual HW's were interesting; there could have been more of them. The team projects, as always, were an aggravating waste of time. I think that if, as a start, Feiner updated 60% of his course material and learned how to relax, both his and his students' attitudes would improve.","Not bad unless you consider reading hundreds of pages of 20-30 year old ACM articles a waste of time.","7","User Interface Design","COMS W4170"
"213","663","Fri, 04 Jan 2002 00:00:00 GMT","1706","39","Why does this Prof. even bother to teach, it's so obvious that he hates it and has contempt for students. There is too much reading for the class, as in addition to the textbook (not bad) he assigns copious amounts of PHD disertations that are total BS. The subject is interesting, but he berates his TAs and they then grade the projects harshly.","3 2 week programming assignment, 1 3 week final programming projcet, midterm,final","7","User Interface Design","COMS W4170"
"214","663","Sat, 18 Jan 2003 00:00:00 GMT","4411","39","I will admit that his lecturing style is pretty bad. But he does make time for his students in office hours, and looks like he genuinly wants to talk to you. You meet with him once, and he will remember your name. So that is one good part of this professor that shoudl be remembered. Workload in the class is not that bad. ","","7","User Interface Design","COMS W4170"
"215","663","Mon, 18 Jul 2011 19:57:40 GMT","26304","39","The class is very well organized but the lectures are really boring. The assignments in this course are all based on Flash Builder with 3 assignments(2 individual) and a final project. The theory exams are totally theoritical. If you have a really good memory, you can do very well in the exam. Just read everything from the textbook as well as his slides thoroughly, as questions can come from anything: Be it a single line mentioned in the slide or rather a random paragraph from the tetxtbook. ","Easy course. Not too time demanding!","7","User Interface Design","COMS W4170"
"216","663","Mon, 20 Dec 2010 21:12:35 GMT","25025","39","This class is great for someone that is planning to go into UI research. For everyone else, not so much. It should actually be called ""The History of User Interface Analysis and Research."" Feiner spent many of the lectures describing, in laborious detail, research projects and ideas from 15 to 30 years ago.

As the review before mine points out, the tests are sadistic. Unless you have a photographic memory, you are not going to do well. The midterm's questions were based on less than 1% of what was covered in the lectures, textbook, and articles he asked us to read. For example, 20% of the test was based on one random paragraph from one of the many articles. Another 20% was based on a topic he spent literally 5 minutes talking about during a lecture. Why is this a bad idea? It rewards students that have better memories or, to a lesser degree, that happen to get lucky because they studied the 1% of material that shows up on the tests. Studying for Feiner's tests is essentially a game of roulette, but with much a lesser chance of success.

Oh yeah, and Flash Builder 4 is terrible.
","2 individual assignments and 2 group projects. Time consuming, but not particularly hard. 

Sadistic midterm and final.","7","User Interface Design","COMS W4170"
"217","663","Thu, 19 Dec 2002 00:00:00 GMT","4089","39","Never in my life have I seen a professor hold so much contempt and disdain for his students.  Feiner's lectures are flat out boring and .  He has you read one or two of around 25 long research papers, and then just stands in a corner and writes sloppily on an overhead projector while discussing it.  He is impossible to approach, because he seems to believe that students (and their questions) are below him.  The three homework assignments here were not hard (about 15 hours each, roughly), but the final project was tough only because of the demo.  Doing a demo with Feiner is basically him apathetically saying ""mm hm"" every two seconds to your explanation, and then bringing up every bad aspect of your program to you that he can find in the 5 minute span and grilling you on it.  Tests are tough, too.  Feiner holds you responsible for those research papers on his tests, which are entirely essay form.  The bottom line: unless you enjoy reading insane amounts of research papers, steer clear of Feiner.","Three homework projects (not hard), one final project with demo (hard only because of Feiner's demo practices), midterm and final, based on an unbelievable amount of REQUIRED reading","7","User Interface Design","COMS W4170"
"218","663","Fri, 03 Jan 2014 18:07:15 GMT","29021","39","Feiner seems to be passionate about user interfaces. His lectures, however, betray this notion because they are extremely boring. I found his assignments to be great tools for learning Javascript and how to interact with APIs. The final was ridiculous. He basically asked random questions about anything from the lectures to the grossly large amounts of assigned reading. If you wish to do well on his exams, MEMORIZE EVERYTHING, otherwise you are screwed. I find it to be of poor taste when professors give assignments and exams that are completely unrelated and that rely, not on applicative knowledge, but pure memorization. He seems to be a man of habit, so I'm not counting on this ever changing.","Relatively easy compared to most computer science classes. Probably 3-4 programming assignments with detailed descriptions. Some are group assignments. We only had a final but you might have a midterm, both of which would require large amounts of reading and memorization. ","7","User Interface Design","COMS W4170"
"219","663","Mon, 10 Apr 2006 00:00:00 GMT","14439","39","A word of caution. Feiner seems to have a predanatural power to remember faces. His class will bore you to tears, so few people show up. However he still knows who people are, and for those that are on this floor a lot (CEPSR 6), this is a big problem. I mean either that or scowling glares are the norm in his lab.

PS: The material covered is common sense. Any basic design class (in any field) will teach you everything this class does (and then some). The biggest problem with way this class is presented is that there are 200 billion different rules and guidelines, which all together sound like superstitious drivel. The field has few (important) pricinples, all of which are presented in the first week. The rest is a waste of time.","a few nights worth of coding. Really, really unpleasant coding.","7","User Interface Design","COMS W4170"
"220","663","Sun, 19 Jan 2003 00:00:00 GMT","4423","39","Since you really have to take Feiner if you want to ever take UID, you need to just ignore his poor ability as an instructor; just use this opportunity to read a lot of textbook material and research papers in this field. It is a field that is completely ignored in ALL other classes, and it is quite important. Unlike most courses in the department  it actually practical and applicable to anything you'll ever program. I do agree with all previous (bad) reviews. However, the problem with the allegedly harsh grading of the homework is that most of the grade is not based on functionality. Your program may follow all specs, but still get a C. It is the USER INTERFACE that gets you most of the credit. And you can only start thinking of user interface AFTER you completed all specs, which is usually around 5am the night before it is due. And that is truely a big problem with this class. But as you know from the previous reviews, you get some penalty-free late days to use on any combination of the first 3 (!!!)assignments. Another major problem is that there is a lot of reading, and it is all asked about in the midterm and final. As a rule of thumb, if there is a formula of some sort in any of the papers, it will appear eventually on a test. You will probably have to state it and explain it. Nothing too fancy, but you do need to memorize a bunch of them like it's a high-school history test. Not the end of the world, though. 
It is true, this class feels more like a Humanities class that a regular CS class. You have to read a lot papers, and there are never problem sets (only programming projects with minor explanations of ""why did you choose the interface that you did""). It is, though, not the hardest class you have taken or will take in the department, and it opens a window to a very neglected (and again, practical) area of compters. Lets face it, in the real world, your boss/client is much more likely  to care about the interface of your program. And like in this class, they are going to take the functionality as a given.","Never in groups . 3 programming assignments, a final programming projet + a demo (ALL graded for user iterface rather than for functionality), a midterm, and a comprehensive final. Also, A LOT of reading. While the book can be somewhat skimmed, you do need to know the major concepts of every chapter. As a rule of thumb, after reading every chapter ask yourself 5 feasible questions he can ask. It's pretty obvious. There is no way around reading all research papers, and don't fool yourself you will have enough time to read even a quarter of them during finals.  However, like in every class like this, nobody has time to do all the reading and there's a curve. The midterm and final consist only of essay questions. The trick is that if you understand the general theory (mostly from the book) and use ""the UID language,"" you can totally b/s and get some partial credit on occasion. Finer travels a lot, so there are many occasions that there is a gust lecture, some of them really cool.","7","User Interface Design","COMS W4170"
"221","663","Tue, 27 Jan 2004 00:00:00 GMT","7983","39","I mostly agree with what's been said by earlier reviewers, but wanted to point out some ways in which the class was different in the fall of '03 compared to earlier years:

Professor Feiner makes extensive use of powerpoint nowadays, as well as videos, some overhead slides, etc. The powerpoint slides aren't especially comprehensible in isolation, though; when reviewing for the midterm, have the notes in one window and google open in another to look up terms that aren't explained directly on the slides.

Apart from that, I don't feel like I really learned the vocabulary and concerns of interface designers working in industry; the class focused more on academic UI research, past and present. I plan to redress this by doing a fair amount of independent reading this term.","I found the programming workload for the course to be staggering. Part of this can be attributed to the lack of written problem sets or assignments that were strictly design assignments; for all four we had to handle design _and_ implementation. The first three assignments built on each other (though the final project was unrelated), but assignments 2 and 3 both required significant reworkings of and extensions to what came before. I don't think that an advanced undergraduate course should require its students to produce more than 2000 original lines of code or so, and I wrote much, much more than that.","7","User Interface Design","COMS W4170"
"222","663","Sat, 01 Jan 2000 00:00:00 GMT","45","39","User Interfaces contains useful, if somewhat obvious, material. He basically follows the book without adding a huge amount. He has a fair lateness policy, but seems unable to deviate from it when student's circumstances require it (i.e. sickness).","","7","User Interface Design","COMS W4170"
"223","663","Tue, 19 Nov 2013 20:43:53 GMT","28733","39","User Interface Design w4170

I took this course in my first semester as a grad student. And I learned how well coffee does at keeping you up. Most people doze through his classes or do their own work and he doesn't seem to mind that. Some lectures do get interesting but mostly there's not much interest generated by the professor.
But the assignments are really cool. Most of them use some form of APIs along with javascript and you get to build pretty neat stuff. You can look up the previous year assignments and projects. And you do see that there is some common sense required while building UIs and the common mistakes to avoid.","The lightest course ever. Gotta write a lot of reports and explain why you did something the way you did it. That's what matters.","7","User Interface Design","COMS W4170"
"224","664","Wed, 22 Jan 2003 00:00:00 GMT","4566","47","Professor Ross has a cool Australian accent.  That's pretty much what kept me going to the classes, though he does teach mostly out of the book.  Either you go to the lectures and understand the material, or you read the book.  You can take your pick.  Also, the first half of the semester covers the more interesting stuff, while the second half can get way over your head.  Make sure not to slack off mid-semester.  You're probably better slacking off for the first month or so.","2 projects to be done with partners (with various parts due every two weeks), midterm, final","7","Introduction to Databases","COMS W4111"
"225","664","Tue, 04 Mar 2008 00:00:00 GMT","21025","375","Professor Gravano is tied for my favorite computer science professor.  He generally follows quality texts in his lectures and easily outperforms them in terms of the ease with which the material is presented.  His homeworks and exams are reasonably challenging but also completely fair -- don't worry if you get a 60% on an exam because it will come out in the curve.

Furthermore, he always knows what he's talking about (more than some professors) as a result of an expansive knowledge of all aspects of databases thus far.  Now that I have gotten to know him better, it seems this stems from a more passionate interest in the subject than I've seen with others in their respective fields and it leads to a genuine desire to help students really master the material.

I would definitely recommend taking the 6111 course if 4111 was at all interesting.","Reasonable workload, but group projects are easily do-
able on one's own.  Homeworks can be tricky and are a fair extension of concepts in class.  Exams are generally pretty difficult, but it shows in the curve.","7","Introduction to Databases","COMS W4111"
"226","664","Sat, 30 Dec 2006 00:00:00 GMT","17363","375","Prof. Gravano is great as a person, and puts much effort on teaching, but for reasons I can't even try to understand, he also puts great effort in making even the most basic concepts ungraspable and obscure - obscure in the sense that they appear like irrelevant details that won't help you one bit in getting through the course, let alone a job interview.

The first half of the course dealt with DB design and SQL coding, and was relatively easy,
thanks in great part to the self-explanatory, standard flow charts used for DB design and to the equally obvius SQL code. The second half deals with DB I/O cost analysis, and was difficult enough for Prof. Gravano to turn into - take your pick - Derridean post-modern literary theory or Martian rocket science. Even in the project assignments the most obvious concepts were mangled into research paper theory filler - my project team mate, who sailed through the course, kept wondering why on earth the guy would go to such lenghts to turn the clear and easy into the hermetic and impossible. 

Again, I never had any doubt that Prof. Gravano was putting more than enough effort on the class, considering that as a top scientist on the field he had a busy enough schedule, but the obscurity of his explanations made lectures a tough going, until by the second half he was making jokes about everyone falling asleep. The blank looks he was getting by then contrasted with the sincere interest everyone had on the course material before the midterm, when his challenges and questions started such debates, he had to stop and ask people to quiet down. 

This is one of the few courses in which the difficult textbook proves more useful than the overflowing PP slides or the teacher's talk. The TA I was assigned for the project appeared to get kicks out of taking points for the most trivial mistakes, but then again, it is difficult to blame the teacher for such things - in fact he was the one who had to ask her to take it easy with the grading. ","The hw's were doable, the projects only passably difficult, but the tests were horribly difficult - unless you have a good memory, when rote memorization of concepts will make it possible for you to float through.","7","Introduction to Databases","COMS W4111"
"227","664","Tue, 09 Dec 2003 00:00:00 GMT","7040","375","My opinion: the course is not hard, the prof is good.
Course covers all the basic db stuff. Most of the material is from the textbook. If you don't know programming you'll have a tough time so make sure you have the prereqs. The first project is a standard web/db app (what most db classes make you do). The second one is a number-cruncher type deal, it sounds kind of complex, but really is easy once you figure out the concepts.
Gravano is approachable and easy. Great in office hours, explained the 2nd project very clearly, I had no trouble running right into the lab and finishing it up. He also responds promptly to email. All in all, a kind soul like the other review said, tries to help you out as much as possible.","5 homeworks, 2 projects, midterm, final","7","Introduction to Databases","COMS W4111"
"228","664","Tue, 09 Dec 2003 00:00:00 GMT","7038","375","Here's the bottom line on the prof and the class. The class is more than a standard db offering in terms of workload: you got to do two projects, a web based db app and another theory-type number cruncher (most db classes make you do that one big app as a term project). There's also homeworks, mostly easy, with an occasional twist. If you go to class, do the projects/homework and score above avg in the exams, you're guaranteed a B+. One caution sign I'd post is: don't ignore the prereqs. You *need* to know how to code, and you *need* to know some data structure stuff. Don't screw around on this one, or you'll run into trouble in the projects. Gravano is basically a good guy. He does his best to help you out (even tho he appears touchy in class when cellphones ring, laptops ping etc, and you got to get used to the self-deprecating humor bit.) He's cool in office hours and email too (he gave several important hints on the second project ... this was a *huge* help after I spent like a whole weekend going blind on the numbers.) Overall, low stress class and he's a decent guy.","2 projects, 5 homeworks, midterm, final","7","Introduction to Databases","COMS W4111"
"229","664","Tue, 22 Dec 2009 05:35:04 GMT","23566","375","Professor Gravano is a phenomenal instructor. He presents the material so clearly that at times you'll be bored to death because everything seems so simple! Don't be fooled, though -- this is only because he teaches so well (I made the mistake of being lulled into a state of overconfidence and skipped out on a few lectures, and I'm paying for it now just before the final!). 
Gravano clearly knows his stuff and can answer any question you might have - if you ever have a doubt, don't hesitate to ask him a question because after he's through explaining, you'll wonder how you were *ever* confused.","Two group projects (two teammates) - quite time-consuming, but definitely help you learn the material
Four homework assignments - tough but fair and good for learning the material (which is useful because these are good indications of exam questions!)
A midterm and a final - if you attend lectures and review all of the concepts before taking them, you'll be fine. I've heard the curve is great, too.","7","Introduction to Databases","COMS W4111"
"230","664","Mon, 07 May 2012 23:13:35 GMT","27264","375","Professor Gravano is definitely one of the best professors I've had. His lectures are clear, precise, and occasionally humorous. He's very receptive to questions in class and often responds to questions both via e-mail and the discussion board, which is rare in my experience.

He uses slides (available online) for much of the introductory portion of the course, but often switches to the blackboard to work out particular examples. The latter half of the course was taught almost entirely on the blackboard. 

Corresponding book sections are listed for each lecture, but going to class or having a friend to take notes for you is important, as he sometimes he covers more or less material than is presented in the corresponding book chapters. The textbook (Ramakrishnan + Gehrke, 3e) is quite good, despite the many reviews you'll find online saying otherwise.

While you will get a project mentor for your two projects, in reality there will be very little interaction with the TAs unless you seek it.
","4 equally-weighted homework assignments (15%)
1 large project + demo (15%)
1 small project (5%)
1 midterm (25%)
1 final (40%)

The homeworks are light and occasionally add to the concepts covered in class. Projects are done in groups of two. The first project has multiple phases and takes place over a large span of time. The second project is short.

The majority of the class obtains perfect or near-perfect marks on the homeworks and projects. The exams will be the differentiating factor.
","7","Introduction to Databases","COMS W4111"
"231","664","Sat, 01 Jan 2000 00:00:00 GMT","54","47","The information is useful, but the class is boring. Professor Ross tends to give way too much homework much of which isn't necessary for understanding the material.","","7","Introduction to Databases","COMS W4111"
"232","664","Fri, 04 Jan 2002 00:00:00 GMT","1707","375","Really nice Prof. Really good in office hours if you need a concept explained further. Interesting first project, second project in C++ is boring, takes it right out of textbook. The material is reasonably mixed with real world examples and theory. Grading is fair, although midterm and final are overly weighted towards theory. ","5 homeworks 1 group project in Java 1 individual project in C++, midterm, final","7","Introduction to Databases","COMS W4111"
"233","664","Sat, 01 Jan 2000 00:00:00 GMT","557","375","One of the kindest souls in the Comp Sci dept. There aren't that many profs that post on the web board as often as he does. His lectures may not be the greatest (in fact, you could do most of the learning by using the textbook and the lecture notes he posts online), but his homeworks and tests are pretty well designed. Has a tendancy to delay assigning homeworks until he has covered the material in class.","5-6 homeworks with 3 grace days, 1-2 projects (in groups of 2), midterm, final.","7","Introduction to Databases","COMS W4111"
"234","6676","Tue, 21 Jan 2014 22:39:17 GMT","29178","2480","One of the best, and also one of the hardest, most time-demanding classes I have ever taken. Grinspun is a very well known and accomplished professor who is passionate about his work, as well as an enthusiastic and organized lecturer. Take this class late in your CS career - the more programming experience you have, the better.

Homeworks are difficult, but you are provided with a code base that provides visual debugging tools, as well as a grading script with numerous tests that gives you an accurate idea of the performance (and final grade) of your code. All homeworks come with a PDF explaining the physics concepts behind the code for that week, and although there were some errors, the PDFs were for the most part very helpful, especially if you happened to miss a lecture. (In the case of mistakes in the PDF, extensions were often given)

To prepare: learn linear algebra, refresh your knowledge of differential calculus (mandatory), be a strong C++ programmer, and, although it is not listed in the course requirements, I STRONGLY recommend some kind of physics background. While Grinspun does go over this material in class, if you start with at least one college-level physics class under your belt, the lectures and homeworks will be much more comprehensible, and you won't waste time learning elementary physics.

Grading: I include this section to discuss some grading policies I disagreed with. 85% of the homework grade comes from the ""bot"", or the test suite mentioned earlier. The other 15% comes from a mandatory creative scene, built by you to showcase the elements developed for that weeks milestone. At the beginning of the class, Grinspun said you do not need artistic skill to succeed in this class. However, I disagree. If your code works 100% according to the script, you could still get a B on the assignment if you fail to produce a good creative. These creatives are then judged by your peers, who determine the remaining 15% of your grade. Humorous creatives can outweigh visually pleasing creatives, so if you're in a time crunch, go for that. The professors and the TA's weigh in on these grades, so they may give you more points if they see technical ability not easily recognized by your peers.
Extra credit is awarded for the top 5 creative scenes, and sporadic extra credit is offered throughout the semester on the homeworks (when it is offered, it is a lot! Do it!)

Exams: None. There is a final project worth the weight of two ""milestones""/homeworks, which is left up to you. You could modify the code base to produce an extravagant creative, implement a technical paper, or implement algorithms from the class in an external software - whatever you want.

Bottom line: If you have any interest in computer graphics or animation, take this class. It will either weed you out, or light a fire under you to go farther in the field. It's a love-it or hate-it class, since you will have to really commit, but if you want to be in this field, you cant miss this opportunity.","Heavy. Weekly homework assignments, containing a program and a creative. The programming assignments tended to take me 4-5 days, and the mandatory creative scenes took up the rest of the time until the deadline. Obviously, the more time you spend on the creative scene, the better your assignment grade, so this system favors students who can complete the assignments faster. It is not easy to get an A in this class, but it is possible. Grinspun only gives A+ grades to exceptional students who he believes have gone above and beyond.","7","Computer Animation","COMS W4167"
"235","6676","Sat, 23 Nov 2013 17:18:18 GMT","28754","2480","This is the BEST course I've ever taken. Prof. Grinspun is talented, not only on his research, but also on teaching. It seems he can see through your mind, find your weekness and try to fix it with all the material he provides. This course is MUST for students who is in the graphics track or want to enter either the graphics industry or academia after graduation. In addition, I think this course is also a MUST for who want to be a professor in computer science to learn how to be a good lecturer and how to organize your material well in a 1.5-hour presentation.

Besides coding and graphics, the course covers a lot in physics, linear algebra and differential geometry. Everything is self-contained so you can start this course even your math is only at high school level.

","Light at the beginning, but heavier as time goes. Fortunately the assignments have a lot of fun and extremely clear. Each assignment contains some coding job, and designing a demo scene. Usually each assignment will cost you 1~2 days if you want to get an A+. You would become an experienced C++ coder after finishing this course even you don't know how to write a Hello World at the beginning of the term. The grading is partly democratic, say, your classmates will be in charge of evaluating your demo scenes in a double-blind manner, and the remaining part is graded with a robot checking your result.

No exam!","7","Computer Animation","COMS W4167"
