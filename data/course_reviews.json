[
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 12 Apr 2001 00:00:00 GMT", 
      "id": 1019, 
      "professor_ids": [
        595
      ], 
      "review_text": "Thank god they opened up an introductory computer science course for the non computer science major. If you're not planning on majoring in comp sci, I advise taking this introductory course as opposed to CS1007. At the beginning of the course I thought Prof. Leslie was the worst teacher on the face of the earth, but then I realized that Comp Sci is just the worst subject on the face of the earth and that she is actually a pretty good teacher. She clearly presents ideas that are very complicated to understand. Her lessons are very structured and she makes the material as simple to understand as it can possibly be. Don't be alarmed if your a bit confused for the first 2 or 3 weeks, because if you've had no comp sci background (much like I had none when taking this course) it takes a little while to get used to the concepts. Prof. Leslie is an excellent teacher, although she is a bit nervous up there (i.e.: she laughs a lot when she talks and she writes EVERYTHING she says on the board!!!!! (in other words, if she says, \"It's sunny today\" you better believe it'll be up on the blackboard\")). She is also very approachable and extremely understanding. So besides needing to relax a little, she is a great teacher, and she made comp sci bareable for someone (aka: me) who HATES comp sci with a passion.", 
      "workload_text": "6 homeworks: 1 due every 2 weeks. (they are long, but doable, so start early) COUNTS AS 50% OF YOUR GRADE SO TAKE THE TIME TO DO THEM WELL!!!! One midterm: 15% of grade and the final: 35% of grade. Fair tests."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Fri, 21 Dec 2001 00:00:00 GMT", 
      "id": 1643, 
      "professor_ids": [
        766
      ], 
      "review_text": "Basically, I would say Sklar is a bit above a mediocre teacher....I wasn't bored in class often, (she actually showed bits of relevent comp sci videos every once in a while) but I wasn't enthralled either (remember, it is computer science)...... The class has increasingly difficult homeworks, but I found the tests nomt too bad at all.... very doable...... I would say I got a solid backing in the JAVA language after the class.... Its not a class designed to break you, (I think data structures is for that), so you dojn't end up with an incredible programming ability, but I would say more than enough...... If your interested in COMP SCI, this was a a solid class, definatley worth taking just to get your feet wet...", 
      "workload_text": "2 midterms, 1st was easy, 2nd moderately difficult, FINAL, which was also not too bad (she says she makes it easy b/c she understands how crazy finals are. Homework every week or so...They go from easy to very difficult.......i would say at the begining i spent about 4 or 5 hours on the homeworks, and at the end it took up to 13 or 14 hours (all nighter) -- sounds like a ton, i guess it is, but other classes have more work.....and all comp sci classes are like that..."
    }, 
    {}, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 08 Dec 2003 00:00:00 GMT", 
      "id": 7019, 
      "professor_ids": [
        515
      ], 
      "review_text": "Out of the 25+ professors I have had, Professor Cannon is probably one of the WORST professors I have ever had.  He's a very nice person but he is awful at instructing and clearly explaining the course material.  He does not provide a syllabus, which I feel is helpful when reviewing for the course.  This course is an INTRODUCTION course which means NOT EVERYONE enrolled in the course has has prior experience with Computer Science.  He quickly covers each topic providing a few very easy examples and then excepts you to be a professional programmer on the projects and exams.  Stay away from this class unless you have to take it for a requirement . . . I did the mistake of taking this class because I thought it would be \"interesting.\"  I haven't learned anything!  ", 
      "workload_text": "Five HW assignments -- pretty difficult and you don't feel prepared for any of them . . . unless of course you have had experience with Computer Science before.  One midterm exam and one final exam (comprehensive), again , difficult if you have no background.  He does curve grades.  "
    }, 
    {
      "course_ids": [ 
        3807
      ], 
      "created": "Wed, 24 Dec 2003 00:00:00 GMT", 
      "id": 7365, 
      "professor_ids": [
        1891
      ], 
      "review_text": "DO NOT TAKE THIS CLASS!!! This was the first semester of Prof Aho's experiment in teaching programming and computer science concepts at the same time. Classes were very confusing and tried to teach you material that encompasses complex computer science matter, the book sucks, and whatever you learn in class doesn't help in any way with the programming assignment. Thank god the TAs were awesome, that's how I can say I walked out of this class feeling that I can actually write a program. Their assignment were very interesting and they (the TAs) were available to help virtually 24/7. I am very disappointed with the theoretical part of the class however, and the theory problem sets (aside from the programming assignments!) were not only ridiculous but impossible and unmanageable.", 
      "workload_text": "Very, very time-consuming. Weekly programming assignments but the really bad part were the written homeworks. Grading is fairly good though. Professor Aho's curve was such that 30% of the class got A's in the end, even though the midterm mean was 60 and the homework mean was like 65."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 24 Dec 2003 00:00:00 GMT", 
      "id": 7367, 
      "professor_ids": [
        1892
      ], 
      "review_text": "Maryam was the Java programming TA for Prof Aho's Intro to Comp Scie class. Awesome lady! I was in her Java labs, and she is the only reason I can say I learnt something in this class. She was very helpful whenever I got stuck with my programs and was available to help by email or in person even during the weekend. Sign up for whatever class she is teaching, and if she is a TA in one of your classes, make sure you make your way into her lab!", 
      "workload_text": "Weekly programming assignments, very interesting, quite challenging but not impossible. The only problem was that the programs were assigned on Wed and due Sun night of the same week, so that fucked up everyone's weekend, BUT I guess we must be grateful to Maryam and the other TAs because prof Aho originally wanted the programs to be due the same day as they are assigned! "
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 17 May 2004 00:00:00 GMT", 
      "id": 8823, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Janak is a great guy! He attended Columbia so he can relate to our classes. He really cares about the students and tries to be as exciting and fair as possible. You will learn a lot in his class and also receive a good grade if you put forth an effort!", 
      "workload_text": "Homework (both theory and programming) every other week, 6 in total..midterm (very easy), final (somewhat challenging)..midterm and final open book and open notes!!"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 02 Dec 2004 00:00:00 GMT", 
      "id": 9820, 
      "professor_ids": [
        2244
      ], 
      "review_text": "Professor Stavrou took the sting out of learning how to work with computers.   I recommend this class to anyone that wants to learn how to create web pages or really use Microsoft Excel on a higher level.  He's a fair grader and extremely patient with those of us that are not very computer saavy.  He responds to emails promptly, offers extra credit opportunities, and is generally available to students for extra help.  He will work with advanced students and create more challenging projects for them if the rest of the class is holding them back.   Although this is the most basic CS course offered at Columbia, we're writing Javascript Programs already.  This class has given me great practical skills that I will utilize in the workplace after I graduate.   ", 
      "workload_text": "Midterm (not exactly easy) and Final Exam.  BiWeekly Homework Projects."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 28 Dec 2004 00:00:00 GMT", 
      "id": 10332, 
      "professor_ids": [
        1891
      ], 
      "review_text": "He is very nice and interesting, but I feel that everything he says in class is posted online  which makes coming sort of pointless.  His midterm was very easy and the final was very hard.  The homeworks ranged from easy to hard.  There was not much of a curve in the final grade.  ", 
      "workload_text": "Homeworks are 25 percent of grade, problem sets are 25 percent, midterm is 25 percent and final is 25 percent.   This class should take up a LOT of your time (all you first years will not need to worry about being bored)"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 24 Jan 2005 00:00:00 GMT", 
      "id": 11382, 
      "professor_ids": [
        1891
      ], 
      "review_text": "This class was absolutely rediculous.  I'm lucky I passed.  The homwork was so hard that sometimes the TA's couldnt help.  He expects a lot from you and because he is so smart, his whole level of thinking is way beyond us humans.  He's a genius robot that shouldn't be in the class room.  I respect his mind, but hes a bad professor.  ", 
      "workload_text": "Excessive bi-weekly assignments, hard midterm, harder exam.  Bad curve."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 17 May 2005 00:00:00 GMT", 
      "id": 12146, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Like everyone else has said, Janak is really great. He doesn't try to screw you over on the midterms and finals - all the work is very much doable with little difficulty (if not, it's not hard to get help). He also gave out extra credit assignments in class. He genuinely wants people to do well. If you're going to take this class, Janak is definitely a good choice.", 
      "workload_text": "6 HW's (every other week, total 150 points), 1 midterm (50 points), final (100 points)"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 18 May 2005 00:00:00 GMT", 
      "id": 12180, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Janak is one of the most student-friendly professors at Columbia, and a very good teacher.  The class is essentially half introductory theory, and half intro to java programming.  Janak designs it to be the kind of class that ANYONE can succeed in easily as long as they try.  Just go to class, take decent notes, and you will have everything you need to do the homeworks and tests without breaking a sweat.", 
      "workload_text": "6 Homeworks, the last two of which were pretty difficult.  The homework counts for 50% of the grade.  Midterm and final were somewhat predictable and not too rough."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sat, 21 May 2005 00:00:00 GMT", 
      "id": 12237, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Janak is by far the best professor I've had at Columbia. Not only did he take the time to learn practically everyone's name, he also was an excellent lecturer. His class is very understandable and helpful in both the basics of computers and in begining to think about how computers operate. As an added bonus, he brought in doughnuts on the day of the final to makeup for the 9:00am exam time.", 
      "workload_text": "Six homeworks worth 50% of the grade, more like small projects with both a written and a programming part. A midterm (17%) and a final (33%) both moderatly difficult. Grading is fair, and extra credit opportunites exist."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 07 Jun 2005 00:00:00 GMT", 
      "id": 12408, 
      "professor_ids": [
        1891
      ], 
      "review_text": "This is supposed to be an intro class, but Aho made it too hard for people with out experience.  He is a brilliant man, but unless you already know a lot about comp sci, you are about to get totally screwed over.  TA's didn't even know how to solve all of the hw problems.  This class was torture to me.  ", 
      "workload_text": "Too much.  Way too much."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 07 Sep 2005 00:00:00 GMT", 
      "id": 12751, 
      "professor_ids": [
        2616
      ], 
      "review_text": "I had this class with Aho, who is I'm sure a really brilliant guy, but is also the head of the dept and used to teaching grad students, so he had no idea how to come down to my level and teach an INTRO course.  The TA was AMAZING. saved my life. he's really helpful, teaches better than the teacher, and really puts his all into helping you understand and get your programs to work. Also holds good final reviews.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 30 Mar 2006 00:00:00 GMT", 
      "id": 14364, 
      "professor_ids": [
        515
      ], 
      "review_text": "Prof. Cannon is awesome. He tries to make the course interesting and makes a ton of jokes. He wants everyone to do well and really makes it easy for you. The TA sessions are really helpful. If you put in the work you can def. get an A and you might even find yourself more interested in comp. sci. after a course with him", 
      "workload_text": "homeworks-- not bad and if you do them they count a lot and can help your grade.\nmidterm/final, pretty straightforward with no suprises"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 08 May 2006 00:00:00 GMT", 
      "id": 14704, 
      "professor_ids": [
        1671
      ], 
      "review_text": "I don't think the previous two reviews are fair, Shlomo is one of the few teachers that I've had who really cares about improving his class and helping students. Although some lectures can be a little bland, I found the homeworks to be pretty interesting and helpful getting to know how to use CS skills in more useful applications than 1004. ", 
      "workload_text": "6 homeworks (but only ended up having 4 assigned), fair midterm and lots of extra credit."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Fri, 12 May 2006 00:00:00 GMT", 
      "id": 14781, 
      "professor_ids": [
        2616
      ], 
      "review_text": "I can only echo the other reviewer.  Chris was the difference between dispair and hope, sobbing and solace, cursing the darkness and compiling code.  He was ever patient and a true gentleman.  Half the students would come to his office in a panic, at the last minute, having not attended classes, with code that bore little relevance to the class assignment, he would work with them and make them understand and pull through.", 
      "workload_text": "This is a course with what seems on the surface a reasonable amount of work.  That is, until you spend man-days on non-compiling code."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Fri, 12 May 2006 00:00:00 GMT", 
      "id": 14783, 
      "professor_ids": [
        1891
      ], 
      "review_text": "This class was a huge time sink.  I was up all night for three of the programming assignments, and I did not miss class (although most did).  Professor Aho does have difficulty explaining things in a way that varies from his lesson plan.  He did cover the material, that is about the best you can say.", 
      "workload_text": "HIGH.  Nuff said."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 22 Jan 2007 00:00:00 GMT", 
      "id": 18132, 
      "professor_ids": [
        2616
      ], 
      "review_text": "chris' lecture is not interesting but not bad either. all Comp sci TAs suck except for a chinese guy named matt. hard to get good grades. They assume you know about computer science before you start the class, although it's an intro class.\n", 
      "workload_text": "a lot... but chris cannot do much about workload though."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 16 Apr 2008 00:00:00 GMT", 
      "id": 21139, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Paul Blaer is a master in his field. He knows exactly what he is doing, and can answer damn near any question you can come up with. The homework assignments are not extremely difficult, but do take time and actual mastery of the subject. He makes himself very available if you need help, and has knowledge of Computer Science that extends far beyond Java. The workload is not serious, and you do not really need to attend lecture if you're keeping up with the book. However, it doesn't hurt your grade at all to attend lecture, as he often gives clarification on confusing topics and a myriad of extra information which could help you out on the midterm and final.", 
      "workload_text": "Five (5) homework assignments, each worth 10% of your grade. They are not difficult. One (1) midterm, fairly difficult, make sure you know your theory. One (1) final."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 17 Dec 2008 16:52:32 GMT", 
      "id": 21801, 
      "professor_ids": [
        515
      ], 
      "review_text": "I was very happy to see Professor Cannon has a star, which I think he deserves.  COMS W1004 could be one of the best courses at Columbia.  I would recommend this course to any strong student up for a challenge, even one who does not need COMS as a requirement.  Professor Cannon says it is not easy and tells us which assignments are especially hard, but CS will teach you a new way of thinking about the world.  Professor Cannon covers the basics of both hardware (the physical structure of the computer) and programming, so by the time you're done with the course you will probably know which topic you like better.  Lectures supplemented the readings and helped clarify which aspects of the materials were the most important.  One of Professor Cannon's strengths was making complicated concepts understandable.  He is willing to go over the same idea more than once, even at the expense of glossing over a few simpler programming concepts that I would have liked the lectures and assignments to cover a bit more thoroughly.  The final was DEFINITELY harder than the midterm, although neither was excessively difficult.\r\n\r\nIt's a good idea for people without a very strong programming/hardware background to take W1004--you learn quite a bit about both and are a much more fluid programmer by the time you reach the more advanced courses.  Professor Cannon was very good at introducing us to the academic organizations and resources the CS department offers.\r\n\r\nThe fact that there are many TAs means that you should be able to come to a good TA's office hours (in my experience, decent to good TAing was the rule rather than the exception).  Professor Cannon is also accessible and reasonably flexible.", 
      "workload_text": "THIS COURSE IS NOT A JOKE!!!  For me, the workload was 5-18 hours a week.  Start readings, assignments and exam studying at least 4 days early, because you don't know how long it will take to understand a concept or get a program to work."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sun, 11 Jan 2009 13:08:41 GMT", 
      "id": 22185, 
      "professor_ids": [
        515
      ], 
      "review_text": "The first day of class Professor Cannon told us we should expect to be spending at least 10 hours a week doing work for the course. I thought he was joking. HE WAS NOT. This is a great class and he's pretty good at explaining concepts (if you pay attention), and he's understanding about extensions and going over certain topics more in-depth if the class needs it. But the weekly assignments were pretty difficult and/or very time-consuming. You MUST start each assignment at least 4-5 days before the due date, because you will run into problems with your programs and you need time to meet with the TA's. I found that many students taking the class had prior programming experience and they found it easier (and messed up the curve). But for the rest of us it was a grueling learning experience. I'm glad to have taken it but you need to invest time, no joke.", 
      "workload_text": "Weekly assignments, alternating between theory and programming. One midterm and one final. The average for the midterm was like 87 or something. The final was harder. STUDY."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Fri, 06 Feb 2009 22:52:33 GMT", 
      "id": 22414, 
      "professor_ids": [
        595
      ], 
      "review_text": "Ms. Leslie is a very sweet teacher. She's very young, and she's very approachable. She will give you all the time in the world if you need help understanding something. She presents all her lessons well, using powerpoint presentations. Good speaker. I took the class with no programming experience as a freshman, and got an A. I did, however, go to her office hours every week, so she got to know me and I did get extra review. But I wouldn't do the assigned readings, and usually didn't pay good attention in class. Programming is fun, but sometimes frustrating when you don't see your mistake. She will extend deadlines if everyone is behind.\r\n", 
      "workload_text": "moderate"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 20 Aug 2009 04:17:03 GMT", 
      "id": 23082, 
      "professor_ids": [
        515
      ], 
      "review_text": "This class the truly Terrible and unbelievably hard! It says that it is an into level class, but its not. This was the most time consuming, annoying and frustrating class I have ever taken. If you have taken AP comp sci, or have a better idea of java you will be struggling, but if you have none DO NOT TAKE! It was impossible with out outside help. \r\n\r\nCannon is a funny man, and class was not boring, but the subject is just impossible. The theory stuff is easy and understandable but the java is very very hard and is not taught at all, its more teach yourself everything or find someone who knows what they are doing and have them teach you. \r\nI learned ALOT, but in the end, not worth it. \r\n", 
      "workload_text": "4 Programming Assignments, all pretty much impossible, but very rewarding when you finish them. Don't expect to do that well on them (close to 20 hours of work for each). 4 theory problem sets, more managable but still time consuming. Midterm and final, easier than programming assignments but still VERY hard and painful. "
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sun, 15 Nov 2009 21:09:17 GMT", 
      "id": 23289, 
      "professor_ids": [
        515
      ], 
      "review_text": "A good teacher. I had zero comp sci background and am doing fine in the class, he's awesome at office hours and explains things really well. A lot of people who complain about the workload also start the assignments really late, which is a bad idea. A great class and a funny teacher, i enjoyed it. ", 
      "workload_text": "can be a lot at times, take his advice- if you haven't made in progress in half an hour stop and get help.\r\nbook questions can be a drag but are pretty easy"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 23 Dec 2010 20:48:26 GMT", 
      "id": 25165, 
      "professor_ids": [
        515
      ], 
      "review_text": "Cannon is awesome. With a couple of masters degrees and a phd, you know he's incredibly smart, but he also keeps the class moving well with his wit. Class attendance is typically helpful, but you can get by for most topics by simply doing the assigned reading. If you do attend class, supplementation with assigned reading is still ideal. The texts for the class are pricey so get them from a friend or rent them if possible. Only one of the two, Big Java, will really be useful after the course is over, so if there's one to buy, that's it. The books are thick, but the course does not cover nearly all the chapters in them.", 
      "workload_text": "This class necessitates a tremendous amount of effort and time, but it's totally worth it. The satisfaction of realizing the efficiency and power of a program you've just designed and built is unbelievable after you've spent hours debugging it. The class alternates a theoretical problem set from the book every other week with a programming project every other week. The problem sets are generally pretty simple and graded fairly, with the programming assignments much harder but graded fairly easily. The midterm and final were extremely easy, and the class is curved to something like a B+ average."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 28 Dec 2010 02:38:23 GMT", 
      "id": 25261, 
      "professor_ids": [
        515
      ], 
      "review_text": "This is the class that made me want to major in Computer Science. At first I only took it because it was a requirement, but Adam Cannon is a skilled lecturer. He knows how to make confusing material digestible, and his classes are enjoyable.\r\n\r\nI would recommend going to office hours - the TAs are generally pretty helpful, and it's useful to get feedback on your code before you submit it.\r\n\r\nThe programming assignments were a lot of fun, once you get into them. The book assignments (the theoretical ones) can be a pain, but they're necessary to grasp the material fully.\r\n\r\nIt's not necessarily the easiest class that you'll take at Columbia (unless you're already a programmer and therefore shouldn't be taking this class anyway). But it's also not the hardest - and it may even be the best and most important one you take. Make sure you take this class.", 
      "workload_text": "6 assignments, each with a programming part and a theoretical part. One midterm and one final (both easier than they could be, but you still need to study for them - means are in the 70s). Mean is curved to a \"high-B, not a B+\" (in his words)."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 20 Jan 2011 23:25:44 GMT", 
      "id": 25578, 
      "professor_ids": [
        515
      ], 
      "review_text": "Cannon is a great lecturer. He's very clear and has the wonderful ability to see things from a student's perspective. I believe he's been teaching this class for several years, every semester and so the class is well-planned and thought out.\r\n\r\nI would recommend going to all the lectures, you'll really learn a lot and also you probably won't have to spend much time reading Big Java for the assignments if you attend class. Plus Cannon always goes on random CS-related tangents every once in a while and these are generally fun and informative.\r\n\r\nAs for the class, it's got two components; theory (Intro to CS) and programming (Intro to Java). Theory and programming homeworks alternate from week to week. Theory homeworks are not too bad, they can be done just from reading the relevant chapters in the book. Programming ones can be challenging and take varying amounts of time (depending on who you are) but you will certainly learn how to program at the end of it.\r\n\r\nMidterm and final aren't all that bad if you've been keeping up with the lectures and the homeworks. They're a bit on the memorization side of things - especially the final which asked some pretty obscure questions which is why it's good to attend lecture because he often mentions random things that I noticed ended up on the test.\r\n\r\nI should mention that although this is intro CS, it's a pretty high level intro so don't take the class for the granted - you'll have to put in some work to get an A.\r\n\r\nAlso there are lots of office hours and for the most part the TAs are great so I would highly recommend popping in if you have question regarding your assignment; even if you code works, you might wanna just make sure with the TAs that your design, etc. is okay.", 
      "workload_text": "See above."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 25 Jan 2011 03:36:08 GMT", 
      "id": 25601, 
      "professor_ids": [
        515
      ], 
      "review_text": "Cannon is a phenomenal teacher.  If you're not interested in computer science, go to class just because it's fun.  Since it is an INTRO course to computer science and java, he does a really great job at explaining concepts, etc. and will happily answer any question.  You will learn so much more from being in class than by reading the textbook.\r\n\r\nThat being said, read the textbook and make notes!  The midterm and final both include a vocabulary section - where you have to write a definition for the given words (note, Cannon gave us a list of 100 possible terms for the final and tested us on 10).\r\n\r\nThe midterm is really easy if you're prepared.  Do the work, meet with TA's, etc. etc. etc.\r\n\r\nThe programming assignments will take a lot of time, so definitely do NOT start the night before they are due.\r\n\r\nLet me say again - Cannon is a phenomenal teacher.  He is an amazing lecturer and makes class fun.  He always has a good story, funny / snide remark, or riddle / brainteaser to share. ", 
      "workload_text": "An assignment every week alternating between a written assignment (problems in the textbook) that is generally quite easy - and a programming assignment that is generally quite difficulty.  One midterm, one final."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 05 Apr 2011 16:51:49 GMT", 
      "id": 25698, 
      "professor_ids": [
        515
      ], 
      "review_text": "I am not a computer science major or a computer science person at all; I'm not a math or science or logic person in any sense of any of those terms. My mind just doesn't work that way, and I struggled with this class more than I've struggled with any other class.\r\n\r\nThat being said, it was probably my favorite class thus far. Cannon is just a wonderful man who makes the lectures interesting, fun, and clear. He is incredibly welcoming ad supportive, so absolutely take advantage of his office hours. Talk to him about any concerns that you have - whether it's a specific coding problem or worries about the class in general - and he will help you. \r\n\r\nIf you're not a computer science person, there is a lower level class that provides a lot of the background for this class, which I didn't know about, and could have done much better had I taken it. This is not an easy class, but it's very fulfilling. It's something I never could have seen myself doing, but I would absolutely recommend taking it. ", 
      "workload_text": "It's pretty tough. You definitely have to put the work in. Everything is doable, even if you don't have the familiarity in programming that a good majority of the class does. You'll be surprised at how capable you become, and this is one of the few classes where you are actually proud of your work and have something to show for it.\r\nTests are absolutely straightforward but you need to have a very deep understanding of the material. If you do all along, you won't need to study much, but if you are struggling, you'll need to put in a lot of time."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 22 Dec 2011 15:38:48 GMT", 
      "id": 26685, 
      "professor_ids": [
        515
      ], 
      "review_text": "Cannon is great. He's an interesting lecturer (hilarious, and also super passionate), very receptive if you ever want to meet, has tons of office hours, and is always very fair. Also, he has tons of (useful) TA's, so basically there is always someone available whenever you need help on homework, including weekends. \r\n\r\nI had some experience with programming before taking this class, but I had to put a sizable amount of work into this class--the programming assignments take time. (But really, start early. The TA's can basically help you through any problems you're having if you go to office hours.) \r\n\r\nThat being said, this class made me want to be a computer science major. It's incredibly fun and satisfying, and was definitely my favorite class this semester.  \r\n\r\n\r\n\r\n", 
      "workload_text": "An assignment every week alternating between a problem set, which should take maybe an hour or two, and a programming assignment, which can take between 2-10 hours. This class really is manageable, as long as you start early and get help--people who say it took them 20 hours a week probably started homework due Monday on a Friday.\r\n\r\nOne midterm, one final, both very straightforward---if you do the readings and understand what he's talking about in class, you'll be fine."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Mon, 26 Dec 2011 02:41:13 GMT", 
      "id": 26744, 
      "professor_ids": [
        515
      ], 
      "review_text": "When you enroll into this \"Intro\" to Java class, you are signing yourself up for a scheduled butt-kicking every time a programming assignment is due. \r\n\r\nDo yourself a favor and start the programming assignments early, and write down all your questions so that you can meet with the TA's during office hours to sort it out. \r\n\r\nCannon is a fantastic teacher and he is very talented at keeping the entire class attentive during lecture. Take notes during class, because he only covers the important material, which makes sense, because that is exactly what appears on the midterm/final.", 
      "workload_text": "Homeworks worth 40% (2-3 from one Textbook, 2-3 from another Textbook, and 5-6 programming assignments), a midterm worth 25%, and a final worth 35%."
    }, 
    {}, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 19 Jan 2012 19:49:55 GMT", 
      "id": 26971, 
      "professor_ids": [
        515
      ], 
      "review_text": "This course was difficult for sure.  There was a lot of learning on one\u2019s own simply because there was so much material, but there were resources there for use that could make one\u2019s life a whole lot easier, such as TAs.  This is where I have to disagree with the previous reviewer.  Madhavan was a standout TA.  He stayed after his office hours by as much as three hours one time because people needed help.  When he was in the TA room attending office hours for his own CompSci classes, he would help 1004 kids who needed help.  No matter how many people came he would individually go through his students\u2019 code to find problems big and small.  He also didn\u2019t treat students who didn\u2019t know things like idiots which is more than can be said for some others of the TAs.  I would know, I went to pretty much every TA\u2019s office hours.  Madhavan was not an easy grader, but that\u2019s because he knows his stuff and demands a high standard; if you don\u2019t want to be held to a high standard, don\u2019t go to Columbia.  The TA Matt was also awesome though he wasn\u2019t my primary TA so I don\u2019t know his grading style\u2026  Cannon was helpful but impersonal, class of 300\u2026  You will feel accomplished after taking this class, but don\u2019t expect to sail.  But classes like this are why you come to Columbia, you work hard as hell, and then you get a ton out of it.", 
      "workload_text": "Punishing, but worth it.  Alternating problem sets and programming assignments.  Exams are straightforward and managable.  You do the time, and you will be ok.  Don't assume you are smart and will be fine.  Cannon says the first day of class, Engineers are made not born..."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sun, 29 Jan 2012 20:06:45 GMT", 
      "id": 27008, 
      "professor_ids": [
        515
      ], 
      "review_text": "I actually took this class last year, spring semester but haven't got a chance to review it yet. Let me just say that there aren't many classes I'd actually feel obligated to review, but this is definitely one of them.\r\n\r\nThis is so far the best class I've taken at Columbia. This class gives you a great overview of Computer Science, and an unmatched introduction to programming. Somehow Cannon manages to fit in a ton of material while still giving a good sense of each topic. The only exception to this would be the section of the class on computer networks, which I honestly feel could have been narrowed down to just the information about internet protocols. \r\n\r\nLearning object-oriented programming has a learning curve, but once you've got it, you're just coasting from then on. That's not to say projects don't take a while -- you'll spend hours trying to find bugs in your program. But in general, I think there's only a few concepts in this class that are difficult to learn, the main one being OOP. Nonetheless, Cannon and the TAs make themselves pretty available to you, and the assignments are not unreasonable. That being said, pay attention to what Cannon says: if he wants you to understand a concept by a certain homework (e.g. what objects are) you should do it, and you'll be fine.\r\n\r\nI think the main idea I want to convey with this review is that the work you do, while heavy, is very meaningful, and you'll learn a lot about algorithmic problem solving and programming in Java.", 
      "workload_text": "As mentioned, pretty heavy, but the work you're given is very meaningful, and you'll have a far elevated understanding of programming and CS by the end of the course. Tests have tricks here and there, but if you understand the concepts they're pretty easy. I finished the final in about half the time."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 12 Apr 2012 04:15:52 GMT", 
      "id": 27128, 
      "professor_ids": [
        515
      ], 
      "review_text": "Well, he already has his silver nugget, but let it be said: Cannon deserves it. His lectures are fun to go to, and he tries really hard. I usually feel bad when people don't laugh at his dumb jokes so I laugh pretty hard to give him some credit. I usually enjoyed going to lecture. I never brought my computer, though, because all his example code is posted on courseworks anyway. You can do your note-taking just as well in a traditional notebook, and if you know that you are easily distracted, I'd recommend not bringing a computer. The two lectures that I did bring one I may as well not even have showed up because I have no idea what happened.\r\n\r\nThe course itself is hard, for sure. This class is an introduction CS and programming class, so if you never took AP Computer Science in high school, you're going into a topic that you've literally never seen before, unlike most of your other classes. It's pretty satisfying, though, when a few weeks in you're already writing simple programs that can do tasks that you couldn't do a few weeks before.\r\n\r\nThe programming assignments are tough, especially compared to the homework which literally take maybe 1-2 hours tops. Programming takes probably 10ish hours. The singular most important advice is go to the TA office hours. There are like 8 TAs for the class. Obviously the TA hours the day before your assignment is due are going to be packed, so try to go earlier if you can. The ones in the middle of the week are literally empty so you could have one-on-one time to do your work with a TA sitting right there who sole purpose is to answer any questions you have and help with your programming.\r\n\r\nCannon also sets up an account for the class on this website, Piazza.com, that is basically a messaging board where people can ask questions and the TAs, other students and Cannon (occasionally) can answer questions. This is a really good resource because your question has almost always been asked by someone else, and you can ask questions anonymously.", 
      "workload_text": "1 programming assignment every other week (10 hours give or take 2 or 3), 1 homework every other week (1-3 hours), 1 midterm, 1 final. Midterm is multiple choice, definitions, a section of code to debug, and an algorithm with questions about it. Final from what I understand (class isn't finished yet) is the same as midterm with more multiple choice."
    }, 
    {
      "course_ids": [ 
        3807 
        
      ], 
      "created": "Thu, 11 Oct 2012 14:24:29 GMT", 
      "id": 27577, 
      "professor_ids": [
        12357
      ], 
      "review_text": "Literally the best TA in the world.\r\n\r\nI've been fortunate enough to have him as a TA for three of my computer science courses, and every time I've needed help, he's been extremely responsive and helpful. He'll help you debug your code and patiently explain theory over and over if you need it.\r\n\r\nDon is very patient during office hours. He was also the only TA in my COMS 1004 course who wasn't trying to make us all get Cs. His TA office hours are always packed because it's pretty known what a great TA he is.\r\n\r\nI pretty much love him.", 
      "workload_text": "None, he's a TA."
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 29 May 2013 15:45:17 GMT", 
      "id": 28476, 
      "professor_ids": [
        515
      ], 
      "review_text": "Funny in class. Kind of mean in office hours. A fair grader. TAs in this class really care and are helpful. However, going to a TA other than the one who is going to grade your problem set is usually a waste of time because the open-ended short answer problems are subjectively and sometimes harshly graded. For programming assignments, all the TAs are amazing and Cannon gives good advice during class. \r\n\r\nAlso there is a generous curve at the end, which is to be expected in a class of 200+ people", 
      "workload_text": "Heavy. Start early. Do all the reading. This class has more reading than two science classes combined, but the book is really helpful. If you do not read, you will not do well on the midterm or final. "
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Thu, 26 Dec 2013 02:09:34 GMT", 
      "id": 28972, 
      "professor_ids": [
        515
      ], 
      "review_text": "Adam Cannon is a pretty solid teacher. He knows his stuff, and is very organized when teaching. With this in mind, Intro to Java is probably one of the most challenging and time-consuming classes offered at Columbia. Unless you have to take this class for your major, be sure you REALLY want to take this class. There are much easier ways to learn coding and Java. When Cannon tells you at the beginning that this class will take at least 10 hours of work per week, he is telling the truth. Many times, the work requires a lot more than 10 hours/week. \r\n\r\nThere is a lot of information that Cannon tries to teach in this course. You will learn both theory and programming in this class. Because of the amount of info he tries to teach, Cannon skips over a lot of basic stuff that he expects you to learn on your own. I had no experience in programming coming in so I wish he would not have skipped over stuff. For this reason, I would only recommend this class to someone who has some experience or background in coding. Talking to many who were in the same boat as me, we had to play catch-up throughout the semester. This class is already considered difficult to those with coding backgrounds, so it makes life even more miserable when you have to put even more work into an already difficult class.\r\n\r\nThe TAs for the class are usually pretty helpful. I would recommend getting help from the TA that grades your assignments since some of the grading, especially the written assignments, can be very subjective. I also went to Cannon's office hours. He does not come off as the nicest or most personable person ever, but he does try to help you out. He definitely does not try or care to get to know students (at least in this class). I will give him props for his cheesy jokes that lighten up the class.\r\n\r\nIn the end, you really have to decide if you are willing to do the work for the class. If you just want to take this class because you think coding will be \"fun\" to learn, do not take the class. Learn coding on your own at a pace where it can be fun, exciting, and addictive. Besides those who are majoring in CS, only those who are serious about learning Java and the theory of programming in a rigorous and often cutthroat setting should take this class.", 
      "workload_text": "The HW alternates between a programming assignment and written assignment. 1 midterm and 1 final. At least 10 hours/week is needed to do well in the class. Make sure you read the textbooks since he glosses over some stuff in class. Attendance is not mandatory, but you're only screwing yourself over if you skip classes.\r\n\r\nHeavy Workload"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 15 Jan 2014 18:43:15 GMT", 
      "id": 29145, 
      "professor_ids": [
        515
      ], 
      "review_text": "If you're only going to take one Comp Sci course take Java with Professor Cannon. He is fully aware that most people have never coded before and provides very structured ways to allow people to easily understand coding. He doesn't start off too quickly and provides tons of sample code which is usually very similar to the homework he gives. He is very open to peoples comments and asks for questions. Probably one of the best classes I've taken at college so far. ", 
      "workload_text": "Alternating programming problem sets and written problem sets every week. Anywhere from 2-8 hours for the programming problem sets depending on how comfortable you are with the topic. About 2-3 hours for the written problem sets"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sat, 03 May 2014 22:07:49 GMT", 
      "id": 29398, 
      "professor_ids": [
        515
      ], 
      "review_text": "I was apprehensive about taking this course since I had no experience with programming or computer science.\r\n\r\nAs I look back on this semester, I have come to the conclusion that yes, it is possible to take this course without prior knowledge of programming. However, it will require a lot of work on your part. If you're up for a challenge, this is the course for you.\r\n\r\nIn terms of personality, Cannon is quite friendly and cracks pretty good jokes in lecture. In his office hours, I found Cannon to be quite helpful and not at all sarcastic, in contrast to what other reviewers have said (but that might be because I came on a day in which very few students were asking him for help). \r\n\r\nCannon is a decent lecturer, although he goes through concepts and examples very quickly. If you don't ask questions or follow up his lectures with your reading, you will get left behind. Be sure that you keep up at all times! (also, the textbooks for this class are quite helpful).\r\n\r\nFor problem sets and programming projects, do not procrastinate! They take much more time than you think they do (he's not kidding when he says that the class will require at least nine hours of work per week). If you get stuck, go to office hours, ask a CS friend, or use Piazza (the online messaging board) to get your questions answered. \r\n\r\nOverall, I'm glad that I took this course. It was challenging and I might not get the grade I want, but I'm glad that I learned something new. ", 
      "workload_text": "Each problem set is due after a week and each programming project is due after two weeks. Get started ASAP and make sure you do a little bit of work each day!\r\n\r\nMidterm and final are difficult. Make sure you review the code presented in class (he might present a different version of a concept than in the book, so that's an added incentive to go to class) and read the books!\r\n\r\n"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 21 May 2014 18:22:38 GMT", 
      "id": 29519, 
      "professor_ids": [
        515
      ], 
      "review_text": "If you've never had any programming/Computer Science, your first class will be a bit rough, but Cannon warns his students of this. For me, the first month or two were not too challenging, but mid-semester I hit a wall. Try to to the TAs before you feel confused, and if you feel the slightest bit confused, definitely go the TA or get a tutor. Makes life much easier in the long-run. Cannon is a great lecturer (especially for python!) and throws in a good number of jokes (that are actually funny!!) He is approachable and tries to make his introductory classes challenging for all but also accessible to people who aren't taking his class for the major. He also stresses the importance of improvement, and is willing to work with you if you scored really badly on the midterm as long as you improve on the final. The TAs for both intro. classes are great! For Java, study your vocab. A LOT.", 
      "workload_text": "Programming Project or Problem Set (only in Java, not Python) every two weeks. Midterm and Final. "
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Fri, 23 May 2014 12:43:20 GMT", 
      "id": 29556, 
      "professor_ids": [
        515
      ], 
      "review_text": "If you are taking computer science first time and have had very little or no experience with programming, you will have a tough time in the class. Cannon's lectures on the programming component aren't helpful at all; the best way to deal with programming assignments is to start early, read the Big Java book, and attend office hours. \r\n\r\nHis lectures on the conceptual component of Computer Science are useful, though reading the book would give you the same information, but it can be more time consuming since it has a lot of unnecessary information.\r\n\r\nHis first midterm includes a lot of memorization and not a lot of programming examples. The programming component isn't related to the assignments at all but to the simple principles of object-oriented programming. The other component was mostly memorization. (There were questions asking the size of the 'short' data type, for instance.) The final has less questions based on memorization and can help you bump your grade since it's as long as the midterm.\r\n\r\nHe makes a lot of trashy jokes that most people seem to like. He also wastes a lot of time on unnecessary questions such as \"I would like to major in Computer Science; when should I take Discrete Math?\" in class. His lectures are very unfocused, and you can do fine even if you skipped some lectures. How you do in the class depends more on you and very little on lectures.\r\n\r\nI still do not understand why he is in charge of all the introductory computer science classes when he cannot clarify basic but important concepts.", 
      "workload_text": "6 problem sets - very hard to get full points on\r\n5 programming assignments - takes a lot of time, TAs will pay attention to silly things like whether you used spaces\r\n1 midterm - lots of memorization\r\n1 final"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Tue, 09 Dec 2014 06:32:37 GMT", 
      "id": 65736, 
      "professor_ids": [], 
      "review_text": "You'll spend half of the class learning Java, which is pretty easy if you put time into it. The other half is more theoretical, though it shouldn't be a big problem if you're competent in math.\r\n\r\nThe workload is manageable. Again, the amount of time you'll spend outside of class studying and working on the problem sets really depends on 1) your aptitude in math, which many CC/GS kids - I'm sorry to say - lack, but more importantly, 2) how much you enjoy CS and learning about algorithmic thinking and problem solving. If you fit into both categories, you'll breeze through this class; if you're merely good at math but spend no time studying, you can expect to get a B-/B, and if you're not so good at math but really enjoy the subject or spend a shit ton of time studying, you can probably walk out with at least an A-.", 
      "workload_text": "6 problem sets and 6 programming projects\r\nA very easy midterm (for me anyway) and probably a slightly more difficult final "
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Sat, 20 Dec 2014 07:00:09 GMT", 
      "id": 73898, 
      "professor_ids": [
        515
      ], 
      "review_text": "I imagine this class would be very difficult to succeed in with no programming background.  I took AP Computer Science in high school, so I expected Cannon's class to be cake.  However, it still did require a good deal of effort and I felt appropriately challenged throughout the semester.  As past reviewers have mentioned, the learning curve is pretty steep, with problem set 1, and programming projects 2-4 being among the most stressful.  Cannon is not kidding when he says that the programming projects will require 10+ hours of work -- they really do!  Your best bet would be to start early on the projects and attend TA office hours whenever you hit a major rut.  \r\n\r\nLectures are helpful, but only as a brief summary of what you need to know.  To rely on lectures alone would leave you poorly prepared for the assignments in this class, but I think that for any technical class this goes without saying.  The two recommended textbooks are both very good resources and will be relied on heavily throughout the course.  I found that the lectures and problem sets were representative of exam content.  The programming projects, however, were not.  \r\n\r\nThe class is well organized, with a very clear outline of covered topics and assigned grading groups to expedite grading.  There is an entire army of TAs who rotate on a schedule to grade your problem sets/programming projects and who send you detailed grade reports VIA lionmail (more on the TAs later...).\r\n\r\nOverall, I think the course does a good job at its ambitious task of introducing students to the fundamentals of computer science and programming in Java.  In addition, you will also be introduced to software like: Pico, CUnix, CyberDuck, Eclipse, Vagrant VirtualBox (maybe), and Gimp.  Professor Cannon has a good sense of humor and tries to make even the duller aspects of computer science interesting.  If you commit yourself to doing all the work, the takeaway is enormous.  My only major complaint:\r\n\r\nTHE TAs (well, some of them):\r\n\r\nThe TAs are a mixed lot.  Some are truly wonderful and are willing to help you with all your NullPointerExceptions, while others seem plain butthurt about losing points for inane reasons back when they were COMS W1004 students.  Between the 6 problem sets and 5 programming projects, you'll come into contact with at least 11 of the TAs.  \r\n\r\nAs I mentioned earlier, your grade reports are sent to your lionmail by your TA of the week.  Frequently, students will respond to the grade report emails to ask for suggestions or for a more detailed explanation of how to improve code.  As I have heard from other students, and as I have experienced myself, this sometimes results in the TAs correcting your grade to a lower score.  What I mean is this: when the TA sees your grade report again in your reply email, they might see that they made a mistake in grading you and then will lower your score by the appropriate amount.  \r\n\r\nUntil the TAs start grading things without error, or until some sort of \"grade-is-set-after-sending-to-student\" policy is put into place, you should not ask the TA who graded you for pointers.  I repeat DO NOT ASK THE TA WHO GRADED YOUR ASSIGNMENT ABOUT THE ASSIGNMENT--THEY MIGHT SPOT SOMETHING THEY DIDN'T TAKE OFF POINTS FOR AND THEN PROCEED TO TAKE OFF POINTS FOR IT.\r\n\r\nTo me this seems rather messed up.  Isn't the best person to learn from the professional who was paid to read through every line of your code?  As things currently are, it is impractical to talk to this person because they could easily spot a mistake in their grading and then make a last-minute change on CourseWorks.  In no other class I've ever taken in my academic career have assignment grades been so impermanent.  I overheard other students in the help room speak of \"avoiding\" the TA that graded their most recent assignment in fear that they could have points deducted.  I hate to think I could have done better in this class by NOT asking the person who graded my assignment for help...", 
      "workload_text": "6 problem sets (cover various aspects of computer science) - take about 2-4 hours \r\n\r\n5-6 programming projects - take 15+ hours (not including time spent on the optional extra credit portions) \r\n\r\nfamiliarizing yourself with Pico, CUnix, CyberDuck, Eclipse, Vagrant VirtualBox, and Gimp - time varies\r\n\r\n~50 vocab terms to memorize for midterm\r\n\r\n~100 vocab terms to memorize for final (lots of overlap with midterm terms)\r\n\r\nmidterm exam with vocab terms and multiple choice q's\r\n\r\nfinal exam with vocab terms and multiple choice q's"
    }, 
    {
      "course_ids": [
        3807
      ], 
      "created": "Wed, 07 Jan 2015 00:59:24 GMT", 
      "id": 78264, 
      "professor_ids": [
        515
      ], 
      "review_text": "Be warned: Cannon does not hold your hand. He assumes that everyone in the class is wicked smaht and tailors his lectures, assignments, and exams accordingly.\r\n\r\nBut I strongly disagree with the reviewer below. I walked into Cannon's class with no programming background, but I found his class enjoyable and occasionally challenging. The only prerequisite you need to succeed in Cannon's class is good time management.\r\n\r\nStart on your assignments early, and ask questions on Piazza or during office hours when you get stuck. Read the assigned chapters BEFORE you go to lectures: Cannon does an excellent job clarifying tricky material in class.\r\n\r\nAim for comprehension - make a serious effort to understand difficult concepts as well as your mistakes on the assignments - and you will do very well in this class.\r\n\r\n--\r\n\r\nI do agree about what the other reviewer said about the TAs. The VAST majority of them, especially Zoe and Anusha, are just the sweetest people you'll meet on this planet, but yes, a few of them are unbelievably rude and disgustingly condescending.", 
      "workload_text": "6 Problem Sets, 5 Programming Projects, 1 Midterm, 1 Final"
    },
    {
      "course_ids": [
        4957
      ], 
      "created": "Wed, 05 Mar 2008 00:00:00 GMT", 
      "id": 21029, 
      "professor_ids": [
        3409
      ], 
      "review_text": "To be honest I didn't go to class very often but when I went I found his lectures very clear and engaging. The subject matter was relatively easy. I think this is the least rigorous choice for the SEAS computer science requirement. Matlab is incredibly useful so if you know you don't want to pursue computer science then you should take this class. ", 
      "workload_text": "Programming Assignments, Midterm and Final- Nothing too difficult and a very generous curve as far as I know (I got around the average on both tests, did relatively well on my programming and got an A) "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Mon, 05 Jan 2009 10:44:23 GMT", 
      "id": 22108, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Blaer is amazing! I was convinced that I would hate computer science and that I would probably do poorly in it.  Thinking that MATLAB would be a practical way for someone interested in research to fulfill the SEAS programming requirement, I was less than enthusiastic at first about the course.  However, Blaer made the course interesting and I loved it- probably my favorite course last semester.  I did the work (it wasn't that much) and got an A.  I highly recommend taking comp sci with paul blaer--he is engaging, funny, a really nice guy, and a great instructor to boot! I would consider being a cs major after this course (except of course that the fact that I am a sophomore and I took 1005 instead of 1004 makes this an impossibility).   ", 
      "workload_text": "not much at all.  5 assignments throughout the semester, a midterm and a final that were pretty straightforward with a generous curve.  "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Wed, 16 Dec 2009 23:57:06 GMT", 
      "id": 23487, 
      "professor_ids": [
        3409
      ], 
      "review_text": "I had never taken a comp sci course before, and let's just say it was rough. Homeworks took me roughly 10-15 hours to complete (boy did I hate the computer labs in Hartley and Mudd after this course), granted I usually did them the weekend before they were due, but it was painful. \r\n\r\nProfessor Blaer moves very quickly in his lectures, flipping back and forth between Editor and Workspace so it was often difficult to write down what he had typed before he switched windows. He would also go back into code and edit what he had originally to create a new example, easy to do on a computer but almost impossible to write down the whole code again with the change (usually very small but really important to his point) by hand before he switched back to the workspace. \r\n \r\nI went to every lecture but got lost during histograms and plotting and never really recovered until the last homework. I still don't understand the whole image-histograms-plotting thing, which bodes well for the final tomorrow. An unfortunate fact about matlab; not many people take it unless they are comp sci majors or bme kids (or need to fill the comp sci requirement for seas like me), so help around campus is limited. \r\n\r\nMy advice? If you've never taken comp sci before then find yourself a study/homework buddy in either your class or as an upperclassmen who has taken matlab before. Go to lecture. Get used to the idea of spending hours at a time in the computer lab (bring a sweatshirt, it gets cold in mudd). If you get to a point in the homework where you just can't handle it anymore, it's ok to just turn it in (especially if it's past 3am). Ask for help if you've sat in front of the computer for more than an hour without making any progress. Seriously. It's not healthy.\r\n\r\nGood luck.\r\n", 
      "workload_text": "Six homeworks (upwards of 10 hours each, especially from #3 - #5, granted he does warn you) every two weeks or so. One midterm (generously curved, thank goodness) and one final (tomorrow, woo). "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Sat, 26 Dec 2009 02:08:16 GMT", 
      "id": 23628, 
      "professor_ids": [
        3409
      ], 
      "review_text": "I'm no compsci genius, but an A in this class wouldn't have been much more trouble from the A- I got. \r\n\r\nHe's a really good teacher, and even though waking up to get to a 9 am lecture was hard... I learned something every time I went (and didn't fall asleep). He'll walk you through pretty much everything and is really nice if you have questions- he was probably one of the friendliest professors I've ever had. \r\n\r\nMatlab itself isn't very hard, and there are TONS of resources on the internet to help you if you have trouble...\r\n\r\nIn all I would definitely recommend this professor and this class. As long as you're resourceful and willing to put in a little bit of effort, this class will be a breeze.", 
      "workload_text": "~6 psets, first and last are really easy\r\n1 midterm\r\n1 final\r\n\r\nthe homeworks are tough, but you have 2 weeks to do them\r\nthe tests are definitely doable, especially if you've gone to class and understand the logic behind writing code... \r\ngenerally the tests are much simpler than homework problems... they're just ridiculously long. "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Thu, 21 Oct 2010 05:35:09 GMT", 
      "id": 24785, 
      "professor_ids": [
        4057
      ], 
      "review_text": "This class is terrible. If you're in it, you should probably just curl up in the fetal position while listening to Justin Timberlake's \"Cry Me a River\"--you'll get the same grade that you would have gotten if you had gone to every lecture and slaved your ass off. Unfortunately, while Itshack appears to be a computer science genius, his command of the English language appears to be worse than my command of the Matlab programming language (which thanks to his terrible lecture skills and general lack of teaching abilities, is only slightly better than William Hung's English). He mutters under his breath and seems to be unable to articulate his words beyond mumbles and sighs. \r\n\r\nOnce upon a time, there was a class called Matlab, which was supposed to be for non-computer science majors. However, the material in this rendition of W1005 is comparable to what Stephen Hawkings does for challenge problems.", 
      "workload_text": "CRAZY. IMPOSSIBLE problem sets every week (even the TAs can't complete them). "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Sat, 25 Dec 2010 09:34:01 GMT", 
      "id": 25201, 
      "professor_ids": [
        4057
      ], 
      "review_text": "All you really need to know about this class is that it's awful. The class started off like this: too many (easily over 100) students crammed into a room struggling to stay awake as Pe'er tries to explain simple programming concepts (like binary and the way computers represent integers) in convoluted terms. The homework started out so easy that nobody really seemed to mind. \r\n\r\nAfter a few weeks, though, he transitioned to horrendous weekly homework using MATLAB in ways that no one ever intended. Going to class won't help, and asking the TAs won't help. All you can really do is beat your head against your keyboard for hours on end until a mostly-functioning program comes out. Don't even think about asking your classmates for help; late in the course several people were picked out to complete a special assignment as punishment for cheating.\r\n\r\nHow are the exams? For the midterm he gives you 12 trick multiple choice questions about the fine details of MATLAB syntax followed by 3 pieces of code to correct. The code correction is generally straightforward, but good luck knowing how well you did on the rest!\r\n\r\nThe real tragedy here is that Paul Blaer is the other instructor for this course. Avoid any non-Blaer instructors at all costs, at least for this class. You'll save yourself many a headache.", 
      "workload_text": "Cruelly long problem sets assigned weekly with arbitrary and harsh grading. Taking the exam is like playing at a casino: you might get lucky, but in the end the house always wins."
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Fri, 07 Jan 2011 02:41:24 GMT", 
      "id": 25370, 
      "professor_ids": [
        4057
      ], 
      "review_text": "This guy may be a genius in programming, but has no concept of how to teach properly. He can't finish one sentence without stuttering, loves to pick on students during lecture to make them feel embarrassed, and gives poor/dismissive responses to students' questions and concerns. Good luck surviving his useless, boring lectures - you'll be staring at the room's clock almost every second, dreadfully hoping and praying that the class gets dismissed early or ends soon enough (which takes like a millennium). Time dilation effect, anybody?\r\n\r\nYou will definitely come out of lectures more confused about the concepts than before - attending them was almost a complete waste of time and do nothing to help with his crazy problem sets, in which you're not even allowed to discuss/brainstorm any ideas with classmates before submission. This would make sense if the homeworks were doable alone, and didn't incorporate higher level comp sci topics like recursion and GUI that no other computer science teacher covers in an intro course (for non-cs majors!!!).\r\n\r\nUltimately, this may possibly be the most horrible experience ever at Columbia with a professor (not friendly and gives terse replies to emails). Avoid him at all costs or prepare to suffer like never before. Very mentally draining and the only salvation is when the course finally ends (but not everybody can make it to the finish line unscathed). Don't do this to yourself, unless you're a genius at MATLAB of course; even then, I would still think thrice about choosing Pe'er, for he turns a potentially fun class into a complete torture and disaster due to the lack of organization. It's not healthy!!!\r\n\r\n", 
      "workload_text": "Weekly psets 40% -> hours and hours of pain, without much progress in the end, so make sure to start really early (i.e. almost as soon as the assignment is posted) and attend the office hours of TAs, who were nice and generally helpful, particularly in debugging written code.\r\nMidterm and Final (25%, 35% respectively) - multiple choice and code modification questions (on paper) that were full of tricks. Partial credit was given, but doing well is determined by chance and the arbitrary grading. Heavily curved though."
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Thu, 27 Jan 2011 04:23:36 GMT", 
      "id": 25610, 
      "professor_ids": [
        4057
      ], 
      "review_text": "HORRIBLE lecturer (cannot complete a sentence without stuttering and \"ehhhh\" every other word). Also, he put his one office hour on Tuesday mornings at 8:30-9:30 am. First of all who is gonna wake up that early... not to mention the comp sci building doesn't even open til 9am. So good luck getting help from him in person, and his responses to email were often curt and unhelpful as well. The TAs were alright... nothing amazing and when they made a program to check our programs A LOT of people had to go for regrades that weren't very liberal at all. Most of the grading was done without taking into account how horribly written and ambiguous the problem sets were. \r\nCovers recursion and GUIs... which are definitely NOT supposed to be a part of the intro class curriculum. I didn't bother buying the book for the class and ended up with an A-...\r\nBut that A- was the result of literally 20+ hours each week on the problem sets. And I guess I got REALLY lucky on the midterms and final... Be happy if you can stay average in the class. The class started out with over a hundred students and ended with only 60ish students.\r\n\r\nIn short... try your best to avoid this class at any cost. And if you must take this teacher, don't be afraid to harass the TAs with questions and give yourself PLENTY of time to finish the problem sets!\r\n\r\n", 
      "workload_text": "Weekly problems sets (about 20 hours per week to complete); midterm and final (class averages were usually in the 40s)... and he forces ppl at lectures to participate so don't get caught sleeping."
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Wed, 18 Jan 2012 20:32:13 GMT", 
      "id": 26950, 
      "professor_ids": [
        3409
      ], 
      "review_text": "When I registered for MATLAB class, I was inspired by good reviews on Culpa. However, in my experience not all of them turned to be true. \r\nIf you are really new to programming, there is no way you can get an easy A in this class. Though, you will not fail if you show your effort. Pr. Blaer is relativly an easy grader, but he grades only part of midterm and final, TAs do the rest. So go to his office hours and make sure he remembers your face out of other 100 people. \r\nI am in no way saying it to discourage you, I learned a great deal in this class. However, even after putting increadible amount of time and effort, I can't say \"I can programm now\". \r\nPeace of advise, do yourself a favor and find homeworks from previous semesters or keep a friend who knows programming,then you easily will be close to the high average of 84%. \r\nI think problem is in description of this course that has no prerequisites and \"assume no prior knowledge in programming\", you need to know a great deal of Calculus and MUST understand basic programming for this class.\r\nGood luck!", 
      "workload_text": "5 homeworks: you have 2 weeks to complete them, but don't full yourself and start early. They tend to take a lot of you time. By a lot, I mean more than 15 hours in total for each homework.\r\n1 midterm. Easier than home works, but it doesn't change a fact that questions are connected and if you were wrong in first question, you can't be wright for the following 5. Though, have to addmit you do get a partial credit.\r\n1 final. Extremely long, and has lots of easy questions that you wouldn't expect, so do yourself a favor and review everything. "
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Mon, 20 May 2013 21:07:01 GMT", 
      "id": 28411, 
      "professor_ids": [
        3409
      ], 
      "review_text": "I took this class having little prior programming experience, having only learned a bit of MATLAB in Art of Engineering. For SEAS and particularly BME students who are required to take this class, having the background in MATLAB from AoE is pretty useful and allows you to slide through the first couple of weeks easily. However, as the class progresses you start discussing Big O notation, structs, object oriented programming, functions like varargin and varargout, and recursion, which were not mentioned in AoE but are really useful to know and require some more time. Later in the course when Blaer talks about histogramming images, you can again use some of the code you wrote in AoE in the homework for this class. Anyway, Blaer is a great professor. He's easily approachable immediately after class or in his office hours. Blaer holds review sessions before the midterm and final, which are really helpful. He tells you what he's going to test over, explains challenging concepts, and in some cases tells you the exact questions. The best advice I can give is to go to class, because Blaer's teaching really clarifies the concepts asked about in the homework. Often you will be able to modify code he wrote in class to solve homework problems. Furthermore, nobody usually goes to TA office hours, but they're really helpful if you're having trouble with a particular problem on the homework, even if you have to go to the crowded Comp. Sci. lounge to utilize them. \r\n\r\nOther notes:\r\n*You don't need the textbook for this class. Just take good class notes or get them from someone else. Blaer also posts all the code he writes on his website. \r\n*Also, you don't need any calculus for this course, but any coding experience will help.\r\n*Just go to class. It makes everything easier... Blaer always asks if people have questions at the beginning of class.\r\n*Blaer also tells funny stories about things like cat whiskers and building robots, another reason to attend class.", 
      "workload_text": "5 homeworks, each about 2 weeks to do, 6th homework is extra credit (a one question assignment involving GUIS). The first homework is super easy, average is 100. HW 3 and 4 are pretty hard, certain problems can take you a few hours to solve. Nothing too serious though.\r\n1 midterm that's after spring break. Pretty hard, 150 points, 90 is curved to B+, ~120 for an A.\r\n1 final, easier than midterm, 250 points.\r\nI got an A without too much stress, and you can too."
    }, 
    {
      "course_ids": [
        4957
      ], 
      "created": "Fri, 24 May 2013 21:07:24 GMT", 
      "id": 28457, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Best professor I've run into at Columbia so far. \r\n\r\nAbout me: Took AP Comp Sci in High School, had Art of Engineering the previous semester so I knew some rudimentary Matlab. \r\n\r\nI found his lectures really clear and if you take good notes you shouldn't find anything a surprise in the midterm or final. Also he uploads the things he ran in Matlab at the end of lecture so you see what you kinda covered during the lecture. Definitely go to class. \r\n\r\nNo textbook required: i managed without it. You can also find a lot of the things on the Matlab website. \r\n\r\nWorkload: He has 6 problem sets and drops one. You should not wait until the day before its due because some will take a bit of time. Start early and do a little each day and workload isn't bad at all. Also, he often extends the due date for things which is always a plus for you procrastinators but don't try to rely on that. \r\n\r\nExams: He reviews what will be on it and reviews the exam after. \r\n\r\nExams go for \"breadth rather than depth.\" Exams weren't too difficult at all. You shouldn't have an awful time. He's also quite friendly and approachable. I found he answers emails in an appropriate amount of time. \r\n\r\nOverall I recommend this professor! ", 
      "workload_text": "6 Problem sets (1 dropped)\r\n1 Midterm\r\n1 Final\r\nOverall not too bad at all. Completely do-able. "
    },
    {
      "course_ids": [
        2906
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 820, 
      "professor_ids": [
        515
      ], 
      "review_text": "Professor Cannon is your classic young, nice guy professor, who just wants to get in good with his students. Despite having over 200 students, if you reach out to him, he'll never turn the cold shoulder. He is willing to stay in his office until all hours of the night, waiting until every single student has received attention. Bearing a bit of a resemblance to Dave Matthews, he does happen to be a really cool guy. He also exudes a real enthusiasm for the subject, which is a bit of a breath of fresh air. Unfortunately, this comes at the expense of really knowing the material very well. He forgot the JAVA syntax frequently, and occasionaly was at a loss for an answer to a student's question. For people without any programming experience at all, expect to be really lost for the first month or so - Professor Cannon has a hard time getting fundamental concepts across in a coherent manner. Luckily, if you're willing to go to his office hours, and if you attend recitation, these things really do get cleared up, and by the end you really do have a strong grasp of JAVA. I would absolutely recommend him to anyone considering taking computer science.", 
      "workload_text": "Bi-weekly assignments which can be killer if you leave them for the night before. From what I'm told, his assignments are actually easier than the ones previous 1007 professors have assigned. LONG midterm, and a relatively easy final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 06 Apr 2001 00:00:00 GMT", 
      "id": 972, 
      "professor_ids": [
        515
      ], 
      "review_text": "Amazing! Has a wonderful sense of humor and keeps the class flowing and interesting -- keeping in mind that this is a CS class, that's unbelievable. He actually incorporates such devices as comedy, wit, and humanity into an intro to CS class. A CS class! He is absolutely a must take for CS. Cannon is fabulous! Any class he teaches is worth taking. Any professor whose computer's DOS command line reads: is a must take! While first time CS students may struggle at the beginning, it's largely due to the sheer bombardment of new material that has to be absorbed when learning to program for the first time (many students don't take Cannon's studying suggestions seriously -- as he says he expects since he wouldn't have listened to himself when he was an undergrad). The workload is very do-able though, especially compared to what Data Structures is alleged to laden you with.", 
      "workload_text": "Biweekly assignments. Every other one is a \"hard\" assignment. Fairly easy midterm if you know what you're doing."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 15 Nov 2001 00:00:00 GMT", 
      "id": 1415, 
      "professor_ids": [
        766
      ], 
      "review_text": "Teaching is not bad. Puts her lecture notes online which is convenient for people who don't go to class. But as she said a few times, \"the notes are no substitute for going to class\" and so be prepared for some questions in exams on materials covered in lectures. First exam was extremely easy and about 50 people (that's one third of the class) got 98 or above. Second midterm was like 99 times harder and many people handed it almost empty exams. My feeling is that she felt she needed to distinguish between the good students and the very good ones, but she definitely overdid it. She doesn't seem very experienced in teaching and sometimes (just sometimes) forgets basic stuff (like converting a base 10 number to its binary equivalent). But overall she's fine and she tries to make classes interesting by showing random stuff such as video clips and cracking silly jokes. Personally she's the no-bullshit type, looks tough (every time when she comes into class and drops her apparently very heavy backpack onto the podium (bang!) i think, wow she's some lady). She is (I think) a less friendly than other _young female_ professors. In short, people who use excuses like \"my grandma died\" for late homework shouldn't be hopeful. Graduated from Barnard so knows Columbia well. Majored in CS and English, so is pretty literary and definitely not illiterate like some other CS professors. Overall not bad, above average. Would be pretty good if she made just a little effort to be nicer. (But to be fair perhaps that's hard when you're teaching a class of 150....)", 
      "workload_text": "Homework slightly less frequent than weekly. Shouldn't be hard for people with some programming background, but people without would be totally lost in the beginning. She doesn't usually teach the exact same stuff the hw questions ask, so you have to really understand everything and use it flexibly and not depend on route memorization of commands. If programming doesn't feel natural to you you probably will need quite some help from the TAs, especially in the beginning. Make sure you don't think you understand the materials when you're actually just reciting, cuz that way you won't survive as the course progresses. Two midterms and a Final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sat, 22 Dec 2001 00:00:00 GMT", 
      "id": 1658, 
      "professor_ids": [
        766
      ], 
      "review_text": "Not a bad class. Sklar tried very hard to be friendly (via silly humor and a penchant for telling stories about her drunken, class-skippin' days at Barnard) and was generally quite accessible. Class started off very slowly -- we were told what variables were five or six classes in (for those without programming experience, they're an absolutely essential part of programming), and by the time the first midterm came, there was essentially nothing to test us on. Things sped up later, and some things were glossed over quickly (searching, for instance). For the most part, though, Sklar's lectures (which are quite heavy on blackboard-scrawled code) were clear and straightforward. She posted lectures notes on the class web site, which was extremely useful, and also made attendance quite optional. Overall, a competently-taught class.", 
      "workload_text": "A fairly easy class. Seven homework assignments, ranging from laughable (#1) to easy (#2-#5) to challenging (#7) to evil (#6). Two midterms: #1 was extremely easy; #2 was challenging. The final was 30 multiple-choice (!) questions and as such was pretty simple."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 13 Jan 2002 00:00:00 GMT", 
      "id": 1754, 
      "professor_ids": [
        766
      ], 
      "review_text": "Prof. Sklar's class was by far my favorite of the semester. Easy to understand and very helpful, she was also reasonable especially when it came to homework extensions. Even experienced programmers will learn something in this class, she tries to make it interesting (whether or not she is sucessful depends on who you ask.) Her exams aren't too difficult, if you go to lecture and do the homework you will get an easy B+ in this class, at least.", 
      "workload_text": "usually manageable, except for one or two -huge- homework assignments"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 22 Jan 2002 00:00:00 GMT", 
      "id": 1859, 
      "professor_ids": [
        766
      ], 
      "review_text": "Prof Sklar's class wasn't boring at all. She was aware of that some students in the class had minimal programming background, so she tried to accommodate them. Her lectures notes, which were put up online, were extremely useful (as a summary, of course, because lectures were much more detailed) when it came to exam times. She's really into robot soccer games, so many assignments had something to do with that theme. As othere reviews said, first midterm was unbelievably easy, and most people didn't even finish the second midterm. She admitted that she only wanted to make it harder than the first one, but overdid it. Overall, a good class to take especially if you have limited programming background.", 
      "workload_text": "7 assignments, 2 midterms and 1 multiple choice final. one sheet of notes (front and back) is allow for all exams. relatively fair grading"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 04 Feb 2002 00:00:00 GMT", 
      "id": 2029, 
      "professor_ids": [
        515
      ], 
      "review_text": "Adam Cannon is the best teacher I have had at Columbia. He is a really cool guy and an awesome person. He has a great sense of humor..his jokes are funny and he is so cool. All the people I've talked to about him think hes a great teacher. His lectures are really good...he's great at explaining complex ideas. He is always willing to help. He sincerely cares about his students and how they do in his class. He's a great teacher and I've also heard that many of his female students have had crushes on him. ", 
      "workload_text": "It's a CS course so there is alot of work, but he's always willing to help."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 27 May 2002 00:00:00 GMT", 
      "id": 2804, 
      "professor_ids": [
        515
      ], 
      "review_text": "Take any class with this man!! Absolutely great. One of the nicest ppl you will ever find and he does anything to help his students. He is a dynamic prof. who even makes smthing dry like cs funny! A rare gem in the otherwise mediocre cs dept. Why can't every prof at Columbia be like him?? ", 
      "workload_text": "Really fair workload. Generous grader. "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 21 Jul 2002 00:00:00 GMT", 
      "id": 2959, 
      "professor_ids": [
        766
      ], 
      "review_text": "Prof Sklar was pretty nice and understanding... I was sick for the midterm, and she actually had multiple makeup sessions which made it really easy for me. Her lectures are quite organized and easy to follow along, and she makes a good effort in keeping the class awake. The homework is easy until like the third/fourth one... I felt a bit lost at the end especially. The TAs try to give partial credits which was helpful. An advice: learn to use debugger (Forte or JBuilder)! cuz the cunix system only gives you syntax error, and if you're stuck somewhere logically, then good luck trying to figure out the problem. She won't talk at all about debugger, but I really wish she'd told me earlier! Midterms (multiple choice, T/F, and coding) and Final (all multiple choice) weren't too bad if you know the basic stuff. Overall, not too bad of a class.", 
      "workload_text": "Homework about once every 2 weeks with increasing difficulty, midterms (not too bad), final (pretty easy)"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 23 Jan 2003 00:00:00 GMT", 
      "id": 4612, 
      "professor_ids": [
        766
      ], 
      "review_text": "As compsci professors go, Sklar is a pretty good one.  She's got a sense of humor that keeps things somewhat interesting, and helps make the material a little less dry.  She speaks softly, so sit towards the front.  Her understanding of the material is very good - her lectures might be boring to non-geeks, but she explains stuff very precisely and everything's in a logical order.  Available help for her classes was very good, and she was even pretty flexible about things like late homeworks.  It gets a lot worse than Elizabeth Sklar.", 
      "workload_text": "6 homework projects, a midterm and final.  Exams are simple if you knew what you were doing on the homeworks.  Class wasn't curved."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 31 Jan 2003 00:00:00 GMT", 
      "id": 4698, 
      "professor_ids": [
        766
      ], 
      "review_text": "Nice person and nice teacher. Her method of teaching involves going through slides on the projector, and making frequent extra notes on the board. Cracks jokes frequently, and gives the class a very relaxed atmosphere. On Halloween, she played Shrek on the projector and gave out candy for all of us. I definitely recommend her.", 
      "workload_text": "6 Homeworks of varying difficulty. 1 midterm, 1 final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 10 Feb 2003 00:00:00 GMT", 
      "id": 4742, 
      "professor_ids": [
        1511
      ], 
      "review_text": "First of all, I don' t understand why the GS program even forces us to take such a ridiculous class.  It should be an optional class that is highly recommended (which I don't anyways) but certainly not a requirement.  Second, it's hard to figure out what the grading standard is with this instructor.  This is one of those classes where you have to write the way the instructor wants you to write to get a half way decent grade.  This class teaches you absolutely NOTHING about writing so to all incoming GS students...grit your teeth, suck it up, and try to ignore everything the lousy instructors try to brainwash you with.  You're gonna write flowery little exercises that are pointless and will be graded strictly on how much butt you can kiss in class.   This class (at least with this instructor) allows absolutely NO creative freedom and this instructor seems to think that expository writing can only be dry, boring, and witless.  Of course, this instructor lacks any sense of humor so that makes it even worse!  You think i'm just some singled out rebel?  HA!  I've talked to a few students in my class who would more than agree but we all play his game for the grade.  TO ALL INCOMING GS STUDENTS : I FEEL YOUR PAIN.  I KNOW THIS CLASS IS ABSOLUTELY RIDICULOUS.  WHEN YOU SEE THIS GUY'S NAME ON YOUR SCHEDULE...RUN FOR YOUR LIFE.  ", 
      "workload_text": "The only positive aspect of this class : The workload is agreeable...but bring a pillow."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 12 Mar 2003 00:00:00 GMT", 
      "id": 4861, 
      "professor_ids": [
        515
      ], 
      "review_text": "Professor Cannon was one of my favorite instructors at Columbia. He's really nice, and he makes learning about what some consider to be a difficult subject much more easy. During his first lecture, Professor Cannon said that students shouldn't be intimidated by the fact that he works at Los Almos because he \"isn't creating Terminator.\" Definitely an interesting class, I learned a lot to prepare me for 1004", 
      "workload_text": "about 7 homework assignments, text reading, midterm, final"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 29 Dec 2003 00:00:00 GMT", 
      "id": 7448, 
      "professor_ids": [
        515
      ], 
      "review_text": "On the first day of class Cannon said that this course required hours of frustration in front of the computer, and he was telling the truth.  Projects are difficult and long, but they do a good job of teaching java.  If you do the projects and attend lecture, exams aren't too painful, and he will look over poor exam grades if you do well on the projects (get them to work).  The curve is very generous reflecting the heavy workload.  Overall, this course can be hell while you are in it, but in the end your knowledge of computer science is extensive.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 04 Jan 2004 00:00:00 GMT", 
      "id": 7520, 
      "professor_ids": [
        515
      ], 
      "review_text": "Professor Cannon was great. He was very approachable. If office hours didn't work out for you or if he felt you needed extra help, he would make time for you outside of his normal Office Hours. He is also extremely witty (even obscene and completely politically incorrect at times). However, the content of the course was too difficult. I am not a ComSci major, but this was even tough for someone majoring in the topic. He warned us that we should consider switching into 1004 if we didn't feel up to the challenge. I took 1007 because I wanted to study with Professor Cannon. I took his 1001 class and loved it. I should have swallowed my pride and took the easier class. If you are looking for an easy-A, this is not the class for you, but if you are looking for a challenge and struggle, have fun. His wit and humor could be worth the trouble.", 
      "workload_text": "5-6 programming projects, every other one is considered \"difficult\" (but they were all difficult). Plan on spending many hours in TA Office Hours trying to figure out what to do. If you do not complete all of the assignments, Professor Cannon warns you that you cannot pass."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 07 Jun 2004 00:00:00 GMT", 
      "id": 9068, 
      "professor_ids": [
        515
      ], 
      "review_text": "Awsome guy, very aproachable in and out of class. Often in his office and not to upset if you stop buy. He is a fun charcter, his unix prompt displays \"Command me baby:\" which everyone got a chuckle from. The class is easy if you are into comp sci and a nightmare if you are not. Great intro to java course though, highly suggested for all people considering a computer science major. I decided to do it because of this course as well as a friend of mine. ", 
      "workload_text": "Heavy for non geeks, Geeks are fine. Midterm, final, 4-6 homeworks take a long time though on the homeworks."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 18 Nov 2004 00:00:00 GMT", 
      "id": 9745, 
      "professor_ids": [
        1891
      ], 
      "review_text": "DO NOT!! I REPEAT DO NOT!! TAKE THIS CLASS...if you know whats good for you..you will stay away.  THE WORST PROFESSOR I HAVE EVER HAD...seriously....he doesn't explain anything...all he does is read the lecture notes online.  He expects us to know theory and concepts that even the TAs learned just a few weeks ago.  The TAs were the only good thing about this class...all of them were extremely helpful", 
      "workload_text": "6 homeworks, 1 dropped.......6 programs, 1 dropped, midterm, final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 13 Dec 2004 00:00:00 GMT", 
      "id": 9922, 
      "professor_ids": [
        515
      ], 
      "review_text": "he's so nice and very relaxing while teaching\napproachable... he's willing to have an appointment with you if you can't make it to his\noffice hours\ntake his class!", 
      "workload_text": "5 hws 1 midterm 1 finalthe homeworks are pretty tough, and take long time to finish it"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 30 Dec 2004 00:00:00 GMT", 
      "id": 10394, 
      "professor_ids": [
        515
      ], 
      "review_text": "Prof. Cannon was simply amazing!  He had this way of explaining difficult concepts in a way that made it easy to understand, and he didn't mind going over the same concept over and over again until everyone in the class was clear.  He also made it very easy to go to office hours (he encouraged it every week).  \nProf. Cannon warned us in the beginning of the class that CS1007 is a rigorous introduction to computer science and that students who had no previous programming experience should consider taking CS1004.  I had no previous programming experience, but I decided to stay in CS1007 because I knew that I would learn more in that class. Prof. Cannon said that students without prior programming experience would find the class difficult (even those who had a lot of programming experience had a hard time), but the class is do-able and Prof. Cannon made sure to say that he would be as supportive as he can.  And he was.  He also made class fun -- he is funny and witty and actually makes you want to go to class (and you should go.  Many times he covered concepts that weren't in the textbook, and we needed to know those concepts for the exams and to complete our homework assignments).\n\nIf you're looking for an easy A in computer science, then CS1007 is not for you.  Take Professor Cannon's advice and take CS1004 (though I'm not sure what the workload is in that class.  I know it's easier than 1007, though).  But if you're looking for a class that will challenge you and make you proud of all that you've learned, then be brave and take CS1007 and make sure to take it with Prof. Cannon.  He is one of the best professors I've encountered so far at Columbia.  You will learn a whole lot of programming and will be surprised about the things you learn to do.", 
      "workload_text": "5 homework assignments each consisting of 2-3 parts (a problem set and 1-2 programming projects).  Every other assignment is considered difficult (they were all difficult to me.  And homework#2 was a KILLER!) There was also a midterm and a final.  Class attendance is required."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sat, 01 Jan 2005 00:00:00 GMT", 
      "id": 10559, 
      "professor_ids": [
        515
      ], 
      "review_text": "I totally agree with the other reviews. He's a great professor, so take his class. What I found the greatest about him is that he taught more than the course material. Like, he told us in the beginning of the semester that what he emphasizes in class and the vocab definitions he writes on the board are probably going to be on the exam. Such hint is so useful when you are bombarded with tons of vocabs and info that you encounter in the textbook; because then you know which the primary and important stuff are and which are not. Also, he explicitly provided studying strategies for the midterm, which, of course, can be used in other classes. However, I didn't find him all that helpful when it came to seeing him during office hours or through email; so I got help the TA's who were simply great (I had Rachel Goldman, Cheryl Lau, and Lauren Wilcox). They basically saved my life, rather than the professor (yet that's just me; other students maybe didn't need as much help). However, I really liked prof. Cannon; it's worth taking his class and getting to know him.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 19 Jan 2005 00:00:00 GMT", 
      "id": 11283, 
      "professor_ids": [
        1891
      ], 
      "review_text": "Insane.  Who cares about machine language?  I just want to learn the basics of programming.  The homework problems were impossible, although the programming was hard yet doable.  This professor needs to understand that anybody interested in compsci as a major would be scared away by this course.  Comp sci is not this hard.  An intro level course has no need for 0 and 1 machine language programming.  \"1000000100000100   // R0 = M[5]; load memory location 5 into R0\" Well thanks I'll remember that next time i have to tell the machine how to load numbers into the CPU!\n\nHonestly one of the worst classes I have ever taken.  Need I even elaborate on the fact that close to nothing was ever taught in class that could later be used in homeworks or programming assignments?\n\nAnyways, I'm done venting.  Take my advice: If he is teaching any kind of intro class, flee it and take another one.  This was ridiculous.", 
      "workload_text": "Weekly HW set (so useless and timeconsuming) or programming assignment (usefull and doable), midterm and final will leave you pissed off.  Don't wait to drop this class.  Do it now!"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 25 Jan 2005 00:00:00 GMT", 
      "id": 11416, 
      "professor_ids": [
        515
      ], 
      "review_text": "Believe what you read/hear about this guy. He is AMAZING. He is nice about extensions (he's willing to give you extra time on one of the five assignments- meaning you just can't do it all the time). If you attend lectures and understand the material you will do very well on the tests. I knew some java before the class, so that made it easier, but Prof. Cannon will help you- if you're working on it, so is he. He makes himself and the TAs very available to you for help. In class he always stops and attempts to make sure everyone really understands. His lectures are generally pretty interesting and he is really a find. I am a computer science major, however, so perhaps that skews my opinion.", 
      "workload_text": "5 assignments, 1 midterm, 1 final. You do need to spend time on the assignments, do not leave them to the VERY last minute. Curve not too generous, but if you work you can do very well."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 22 May 2005 00:00:00 GMT", 
      "id": 12251, 
      "professor_ids": [
        515
      ], 
      "review_text": "A great professor. He is nice, invites commentary and feedback during class, and even cracks a few jokes here and there. His lectures are generally clear except things got a little confusing during the data structures section, when we covered a top that our book did not handle at all (red-black trees). He likes to make things challenging but not impossible. Good office hours.", 
      "workload_text": "6 programming assignments of increasing difficulty. These can take a long time to complete, so try to start early. Midterm and a final. The midterm was easier than the final, which had some fairly difficult questions on it. "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 20 Feb 2006 00:00:00 GMT", 
      "id": 14236, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Professor Hershkop is a terrible teacher. He is a nice guy, and seems to like the subject, but he just can't teach. There are always typos on his slides and in his assignments, even in the code he gives us to use on projects. He never adequately answers questions and even though I attended all of the classes, I never learned anything. Reading the book during class would've been a better use of my time. He often taught this intro class as if it were Data Structures and expected us to know what he was talking about. Nice guy, but avoid taking a class with him if at all possible.", 
      "workload_text": "Though fair in his grading of labs and homeworks, the assignments were often difficult and poorly explained."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 15 Mar 2006 00:00:00 GMT", 
      "id": 14301, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Hershkop is a bad teacher.  The lectures are too general, too specific, or have nothing to do with the assignments.  Too many times the slides are examples from the book.  The midterm and exam didn't reflect what we were supposed to be learning in the class.  He is a fair to generous grader.  Don't take a class with him if you don't have to.", 
      "workload_text": "Midterm, Final, a few programming projects.  He told us there were going to be more than there actually were, so don't count on later ones to boost your grade.  Usually lots of opportunity for extra credit."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 31 Dec 2006 00:00:00 GMT", 
      "id": 17396, 
      "professor_ids": [
        42
      ], 
      "review_text": "At first, he seemed like a very professional, no-nonsense sort of teacher who would teach a lot but give the most boring lectures ever.\n\nIn reality, he is a very professional, no-nonsense sort of teacher with the most entertaining lectures ever. You learn a lot and have a bit of fun with the class too. \n\nGreat intro to the CS department. He's a great professor.", 
      "workload_text": "5 Assignments, 1 Midterm, 1 Final"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 02 Feb 2007 00:00:00 GMT", 
      "id": 18380, 
      "professor_ids": [
        515
      ], 
      "review_text": "I wish I had met the Adam Cannon everyone else seems to be talking about.  Adam Cannon's class was horrible and the class was anything but an introduction.  \r\n***********ATTENTION**************\r\nIf you do not have a computer science background and don't consider yourself a computer science guy, DO NOT TAKE THIS CLASS.  Take 1004 instead.  \r\nHe lies to you at the beginning and says that even if you've never touched a computer before you can do well in this class.  Nonsense! I assure you even if you have a decent CS background you WILL SUFFER.  \r\nI made the stupid decision to take 1007 because I thought I had enough computer science background to ace the class.  Turns out my 2 years of CS background in high school (which I had easily aced) in no way prepared me for this class.\r\n\r\nDespite what he says, this class is INTENDED for CS majors so if you're not a CS-major don't make my mistake, stick with 1004 or an easier CS intro class.  I wasn't the only one who had a horrible time in this class either, I know plenty of people who suffered through it and many others who dropped out altogether.\r\n\r\nAgain, take my warning, if you're not a CS-major DON'T take this class.", 
      "workload_text": "Many homework assignments, the first 2-3 were easy but soon they'll become impossible to do.  If you're not a CS guy you will NOT be able to do them anyway."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 12 Apr 2007 00:00:00 GMT", 
      "id": 19660, 
      "professor_ids": [
        2616
      ], 
      "review_text": "Technically Chris was a TA when I took the class but since he was pretty much awesome and taught his own section I'm considering him a professor. He's young and funny and classes aren't too boring. He makes the material very accessible even for people who are entirely unexposed to computer science. The class itself is okay and while the material may not be too challenging at times, the exams (which were actually written by professor Canon) can be a bit more difficult than expected.", 
      "workload_text": "Basically weekly homework alternating between written theory questions and programming. Exams should be studied for at least a little bit. Grading was pretty fair."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 23 Apr 2007 00:00:00 GMT", 
      "id": 19759, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Very interesting professor, just go to class and enjoy, very funny guy and makes class very enjoyable, tests aren't that hard and assignments are pretty decent. Nothing is hard and he makes class very fun. just make sure you go to class. ", 
      "workload_text": "3 assignments, 3 tests"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 06 May 2007 00:00:00 GMT", 
      "id": 19843, 
      "professor_ids": [
        2508
      ], 
      "review_text": "If there was ever a man who enjoyed teaching object oriented java, it would be Prof Pasik. Him frustrated is just him smiling more and getting happier. Without seeing his website, it was difficult to tell if he had a curriculum planned out for this class. Lectures past the first few consisted of him explaining example code off of his laptop and the projector. You probably won't see what's on the screen if you aren't sitting front and center and have 20/20 vision (though he posts the code online as well). It's disconcerting to hear him say you aren't supposed to learn something in this class but he's going to teach it to you because your assignment directly relates to it. Goals-wise, the assignments are a bit too open-ended for a low level class like this. The exams are straight forward but tend to have an air of scariness to them (mostly because you aren't sure if your answer will fit his requirements since he likes to tell you not to worry). \n\nHis class essentially is about putting in effort. He gives bonus points which are not counted into the curve so anyone who actually does the extra work will get the \"better\" curve.", 
      "workload_text": "3 assignments and 3 midterms. 1 assignment and 1 midterm per month. He weighs everything equally except the last midterm which is weighed slightly more. There is no final for his class.\n\nThe last midterm of Spring 2007 was a doozy. It was all coding though he doesn't expect you to get it perfect in the 75mins you have to take it.\n\nThe assignments will take you anywhere from a few hours to an entire weekend depending on how worried you are about it. He may write the assignments, but its the TA's that will grade them. The TA's are nice since the assignments are vague."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 08 May 2007 00:00:00 GMT", 
      "id": 19863, 
      "professor_ids": [
        2508
      ], 
      "review_text": "I have to say, I'm really not sure where the previous posters are coming from. Maybe Pasik liked the material in the other classes better which would be highly understandable.\n\nI'll admit, Prof. Pasik taught concepts well. He definitely oversimplified a lot of material though (recursion, abstract classes etc). There was no real textbook for the class. Everything was essentially from lecture but only 1/3 of the class went anyway.\n\nYou only had 2 case studies: A rational number calculator, for which Pasik made his own random classes rather than using standard Java classes like Number, and Scopa, an Italian/Sicilian card game. Everything was based off of those two (and I mean everything.)\n\nWord of warning: he doesn't accept code that doesn't compile on CUNIX nor does he take late homework assignments (Each was 15% of your grade so don't save it to the last night). Also, don't think that AP Java AB will help you. Some concepts may be easier but watch out for his random implementations while you scratch your head because you know there is an infinitely more efficient algorithm out there. You have to use his code.", 
      "workload_text": "HW: 3 long assignments. Don't save them for the last minute. Quizes/Tests: None. Everything else is based on Midterms x 2 and Final. Everything is worth 15% except the final which is 25%."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 11 Dec 2007 00:00:00 GMT", 
      "id": 20556, 
      "professor_ids": [
        515
      ], 
      "review_text": "Professor Cannon is an awesome teacher. The class has a really heavy workload, though. Most of what he teaches in class is in the book, but he clarifies it and makes it easier to understand. You have to learn all of Java code on your own though and it can be really frustrating because many times you won't know where to start. The TAs are EXTREMELY helpful, though. I highly recommend that you go to office hours at least once a week because they usually teach you Java concepts and code. The class may be hard and the workload tough, but its a class worth taking because you learn A LOT. ", 
      "workload_text": "There are 6 homeworks-but each homework has two parts, theory and programming. The theory is due a week from when it was assigned, and the programming is due two weeks after it was assigned. The workload is pretty fair in the beginning of the semester, but it gets heavy with the third homework.\nMidterm and final--hard but okay if you study well."
    },  
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 24 Apr 2009 20:44:34 GMT", 
      "id": 22624, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Professor Blaer seems to know anything and everything there is to know about the Java programming language, and practically lives and breathes CS.  He's always happy to explain the finer points of Computer Science to us.  His office hours, immediately after class, are held at an unusually convenient time for most students and even if it takes him more time than he thought it would, we rarely go away with our questions unanswered.  In addition to holding his posted office hours, he vigilantly monitors the course discussion board.  His board posts are essential (and appreciated) given the difficulty of his assignments.\r\n\r\nThe 6 assignments can be quite time-intensive for people who are less than overqualified, including top students from the recommended prerequisite course (COMS W1004).  A substantial number of students have a much stronger background than this, and some have practically taken COMS W1007 beforehand.  These may be the people who would call the workload \"not too bad.\"  The rest of us just get a lot of programming practice.  Fortunately, the grading and grading curve are generous.  The median grade is usually B+, and this semester it might be A-.  \r\n\r\nLectures are understandable and thorough.  Professor Blaer sometimes talks so quickly that note taking becomes a bit difficult, but most of the material is from the textbook anyway.  The textbook, _Object-Oriented Design and Patterns_ by Cay Horstmann, explains concepts reasonably clearly but provides inexcusably buggy solutions to exercises.  Exams are long and information-intensive, but manageable if you've studied.\r\n\r\nProfessor Blaer LOVES to make fun of students who procrastinate (he never singles out individual people but talks about Columbia students as a group).  He is also merciful toward those who do procrastinate, because of his liberal extension policy.  Sometimes he says things about the average student's level of organization (i.e. our lack thereof) that aren't true.  I hope his lectures get put on CVN because they are so good, but those parts are cut because they reflect badly on Columbia University and are a lie.  Most students are doing well this semester, and our organizational skills are one of the reasons. \r\n\r\nI highly recommend this course, but only if a student has taken COMS W1004 or the equivalent beforehand.  Otherwise they might get buried in coursework.", 
      "workload_text": "Watch out!  The biweekly assignments can easily run to 20+ hours, or even 30 hours."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 24 Apr 2009 21:15:05 GMT", 
      "id": 22625, 
      "professor_ids": [
        9351
      ], 
      "review_text": "Mitchell was a superstar undergraduate student in COMS W1007 and it shows.  He is very knowledgeable about the course materials, and can answer questions concisely and thoroughly.  His grading of assignments is prompt and relatively precise, and he monitors the discussion board extremely well.  Mitchell is one of the best TAs I've had, and I always look for him when I need to attend office hours.", 
      "workload_text": "N/A--Mitchell was not responsible for this part of the course."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 24 Apr 2009 21:16:30 GMT", 
      "id": 22626, 
      "professor_ids": [
        9352
      ], 
      "review_text": "Lakshmi is a competent TA.  She is unusually responsive to our questions and very responsive to our discussion board posts, prompt in grading assignments and exams, and dedicated to teaching the course.  However, even though she tried she could not always answer questions about fine points of the subject material--we had to send these questions to the professor.  In assignments, she also overlooked correct answers at times, so her work sometimes needed to be regraded.  Her explanations, when she had them, were quite clear.", 
      "workload_text": "N/A--Lakshmi was not responsible for this part of the course."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 14 May 2009 19:42:17 GMT", 
      "id": 22777, 
      "professor_ids": [
        3409
      ], 
      "review_text": "As one of the students that has \"practically taken this course before\" mentioned below, I should preface this review by noting that if you have any kind of Java experience beyond the AP CS AB level, you should really try to test out of it. I asked about skipping the class and was strongly discouraged by everybody in the department that I talked to; in the end, I think that was a mistake.\r\n\r\nThat being said, a class that by all rights should have been an unbearable repetition of things I'd already taught myself turned out to be a reasonably good experience. Blaer is a really engaging lecturer and an all-around smart, friendly guy -- he was happy to entertain various questions I had about side projects totally unrelated to the course material, and is really accessible outside of class.\r\n\r\nThe homework turns out to be enjoyable as well -- there's enough freedom and flexibility in the assignments, particularly the middle few, that you can have fun playing around within the constraints.\r\n\r\nAll in all, I highly recommend Blaer (and would happily take any other course he teaches), but be wary of signing up for 1007 if you come from a CS background.", 
      "workload_text": "6 homework assignments, due every 2 weeks, that take 2-4 hours to complete if you have a good grasp of Java (and, I'm told, many more hours if you don't).\r\n\r\n1 midterm, 1 final, both fairly predictable and not too difficult."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 17 Jul 2009 17:20:43 GMT", 
      "id": 23022, 
      "professor_ids": [
        3409
      ], 
      "review_text": "As one of those students NOT coming from a strong CS background, I just have to put it out there that each homework assignment took me roughly 10-15 hours to complete. As for Prof. Blaer, I thought the textbook was just as good a teacher as he was, since he mostly repeated what was in there with some additional reinforcement and examples. He is fairly accessible and does a decent job of presenting the material, but ultimately Java is something you learn mostly by yourself. I certainly learned a lot through the programming assignments. Overall I would recommend him just because he's so helpful and cares about the students doing well.", 
      "workload_text": "6 programming assignments, the first and last were somewhat easier than the middle ones."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 10 Sep 2009 15:33:28 GMT", 
      "id": 23146, 
      "professor_ids": [
        42
      ], 
      "review_text": "Professor Kender knows his stuff.  His lectures are not the most engaging and gripping, but they are eminently useful--pay attention!  His homework assignments are extensive and fair, clearly utilizing the skills taught in the previous unit.  He has an abrupt personality, but respects the course, the students and teaching in general.  Tests are difficult and graded harshly, but the class is curved at the end of the semester.", 
      "workload_text": "5 assignments (one ever two weeks, approximately 8 hours long.  Time required depends mostly on your experience with programming), one midterm and one final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 09 Dec 2009 18:55:29 GMT", 
      "id": 23397, 
      "professor_ids": [
        42
      ], 
      "review_text": "I studied Java for the first time during my senior high school year. Though I felt like I learned how to program in Java and I was confident in programming, this class even challenged me to the next level of profession both in Java and in general. This class taught me enormously amount of knowledge of Design and Object-oriented programming. It was mainly because the assignments were time-consuming and they demanded dedication, and also the ability of Prof Kender to succintly pointed out all crucial aspects of Java and OOD.\r\n\r\nProf Kender is very good-natured. He looks tired sometimes but he is full of energy when it comes to lecture time. He is very approachable, and he answers all questions you have in mind. He is very funny in his own way. And above all those, he is a very, very fair grader. (And of course TAs in this course are just like that.)\r\n\r\nThose who wants to master in programming will not regret taking this class. You will learn much more than the Java itself; you will encounter a lot of situations where you have to decide in terms of design and strategy. You will be ready for the next level of programming, which is in bigger scale and more complicated. I would say that I appreciate this class so much, both from Prof Kender and from the class itself.\r\n\r\nBeware though, the class is a little tough.", 
      "workload_text": "Five assignments. Two weeks for each.\r\nAn assignment composes of two parts: theory and programming.\r\nUsually an assignment would take your whole weekend -- i'm kidding -- just about 20 hours for me. (If you manage to work for your assignment as early as you can, you will surely survive.)"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sat, 02 Jan 2010 04:13:51 GMT", 
      "id": 23731, 
      "professor_ids": [
        42
      ], 
      "review_text": "Kender is one of the best (and most intimidating) professors I've had here. Lectures were very well-structured and easy to follow without being simplistic, and although the material was occasionally a bit dry (idiom memorization is not exactly thrilling), Kender's understated and offbeat sense of humor kept things interesting. He puts the material into perspective--the class is taught only in Java, but he explained the language's current (and rapidly shrinking) place in the field and how it differed from other languages (often in the form of deadpan disparagements). While he spent a good portion of the first few weeks of class waiting for students to answer questions, eventually the class began to respond and lectures became more smooth and interactive. Despite a scant four-month programming background, I felt comfortable with the material largely due to the clarity and thoroughness of the lectures.\r\n\r\nWhile the first assignment was difficult, Kender polled the class on our experience and modified the next assignment based on the responses (similar polls happened after all assignments and the midterm), which I really appreciated. He took pains to keep the class fair despite challenging material.", 
      "workload_text": "Five assignments of varying difficulty and length (all took me 15+ hours), graded quite fairly. Impossibly long midterm and final exam, both of which were curved generously. Occasional reading is really helpful but also explained in lectures."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 31 Jan 2010 22:34:17 GMT", 
      "id": 24017, 
      "professor_ids": [
        42
      ], 
      "review_text": "Glad to see Prof. Kender has a silver nugget to show for his excellent classes. Although he is very intimidating at first sight (one of my friends who audited the course for one class actually ran away in the first 15 minutes), Prof. Kender is just a fluffy teddy bear that just wants to be hugged. But since he is too intimidating for any students to just walk up to him and hug, he penalizes us by giving us incredibly challenging (but fun) assignments.\r\n\r\nHis lectures, most of the time, grabs your attention and doesn't let go. The only boring parts would be the ones where he tells us about the necessary evils of memorizing idioms. Even those, however, coupled with Prof. Kender's otherwordly sense of humor and enthusiasm, are possible to get through completely awake and conscious.\r\n\r\nThe assignments are quite difficult, yes, and many people dropped the course halfway through because of a certain assignment. (It personally took two all-nighters in Butler.) But if you enjoy computer science at all, the challenges he throws at you and the sense of accomplishment that you get when you finish will be enough to keep you going throughout the entire semester.\r\n\r\nFYI, don't worry about the numerical grade that you get. Prof. Kender grades hard on all assignments and tests, and the numerical grades may seem low. But the letter grade won't be; for example, the B+ on the midterm was in the high 50s.\r\n\r\nIf you have a chance to take this man's course, do not let it pass on by. You'll regret it.", 
      "workload_text": "5 Assignments, anywhere from 3 to 15 hours of work each.\r\n1 Midterm, difficult, but doable.\r\n1 Final, ditto."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 30 Mar 2010 03:37:50 GMT", 
      "id": 24109, 
      "professor_ids": [
        42
      ], 
      "review_text": "Professor Kender was one of the most amazing professors I've ever had.  His lectures were entertaining and he taught really well.  I've never enjoyed any other class as much as his.\r\n\r\nHe's an amazing person with a great sense of humor; I really enjoyed his quirky, nerdy jokes.  He made me care so much more about the class, and I went to every single one of his lectures.  He really knows his material and clearly explains everything.  He is more than happy to clarify any questions, and is very approachable, though he may seem intimidating at first.\r\n\r\nI was impressed by the level of attention he gives to his students.  With the assignments, he tries to give as much help as he can without giving away answers, and provides a lot of interesting and relevant supplements and anecdotes.  He is an extremely fair grader and though the class is difficult (generally, most the students are engineers), it is curved.\r\n\r\nI would definitely recommend taking this class just for the professor.  He encouraged the class to attend talks and such around campus and to take advantage of all opportunities provided by the university.  He is not only an amazing professor, but an amazing person and makes you feel he cares, even if you've never spoken directly with him.  He clearly has a passion for teaching, and I would seriously recommend holding off taking 1007 a semester to be able to take it with him.", 
      "workload_text": "Be prepared to spend a lot of time on the assignments (five in total).  The midterm and final were a bit difficult, but Prof Kender is a very fair person and there is a huge curve."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 14 May 2010 08:23:50 GMT", 
      "id": 24393, 
      "professor_ids": [
        4206
      ], 
      "review_text": "Bert covered almost exactly what was in the textbook in his lectures--the most useful part of the lectures was that he read the textbook much more carefully than you did, so whenever he found something he found confusing, he expanded on it.  He also decided to cover some material that wasn't in the textbook (networking), so before deciding to skip all of his lectures and just teach yourself the material from the textbook which is generally pretty possible, look at the course web page to make sure that he isn't covering something that isn't in the textbook in lecture, because it will be a pain in the ass to try to search it on the internet.  On the other hand, his slideshows are pretty complete and he posts them on the course page.", 
      "workload_text": "5 programming projects, from 4-5-ish hours to 10 hours, depending upon how cleverly you use the design tools they teach you, and whether you are any good at programming.  There are also written problems, which if you read the textbook are borderline trivial.  The textbook (Object-Oriented Design & Patterns by Horstmann) is pretty readable, but not strictly necessary to read that closely if you attend lectures.  It is worth your time to go to office hours, and Bert's office hours tend to be better than the TA's."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 02 May 2011 03:07:44 GMT", 
      "id": 25829, 
      "professor_ids": [
        10722
      ], 
      "review_text": "Prof Morris cannot teach.  Sorry.  He should stick to his PhD studies.  He cannot effectively convey his thoughts or a lecture to a class.\r\n\r\nHe stumbles constantly and his slides are very disorganized, meaning that every lecture he will apologize for having already said this in another slide or referring to a slide he will cover 5 slides later.  His board skills are also very lackluster.  I would not hire this guy nor would I want him to teach me again.  He is too hard to follow, even though he's a native English speaker.  All of his spelling and grammar mistakes in his slides are quite distracting, too.\r\n\r\nAs for COMS1007, it's a fairly useful class if taught right.  Take it with Kender.  The text is OK, although Big Java, also by Horstmann, is generally more useful.", 
      "workload_text": "Average."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 12 May 2011 03:35:33 GMT", 
      "id": 25955, 
      "professor_ids": [
        10722
      ], 
      "review_text": "The Good: Prof Morris is very nice and approachable. He is very easygoing. \r\n\r\nThe Bad: Despite the fact that he does put effort into the class, Prof Morris is too disorganized and not a good lecturer. He literally takes EVERYTHING from the book, so all you have to do is take the book to lecture (if you even ended up going after a week) and read the parts the Prof Morris does a really bad job of explaining. For the most part, he knew what he wanted to teach but had a very hard time trying to teach it. In addition, the assignment grades were always very very late, and overall pretty easy. Funnily enough, the course started with the hardest homework assignment and every one after that got gradually easier.  You might as well read the book on your own for all you might take away from Prof Morris class. \r\n\r\nIf you want to have a pleasant chat, however, he is a great guy who knows his stuff. He just doesn't know how to teach it. ", 
      "workload_text": "5 Homework Assignments (though he ran out of time and cancelled the last one), a Midterm and a Final (which was surprisingly easier than the midterm). "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 15 May 2011 14:48:17 GMT", 
      "id": 26023, 
      "professor_ids": [
        10722
      ], 
      "review_text": "This class was totally hopeless, and not because of the material but because Professor Morris taught it horribly.\r\n\r\nI think he is a very busy PhD student and did not have the time needed to teach an important class properly. It is really completely the department's fault for hiring him to teach this class.\r\n\r\nI thought this class was going to be my hardest class but it was almost my easiest. Almost half the class averaged at above 90% I think. The lectures were terrible, the slides were all taken from the book and the few times I went I always started falling asleep - Mr. Morris would just stand at the front and go on rather incoherently - I couldn't really follow him and he undoubtedly had very bad communication skills as a lecturer. I stopped going to lectures after the first 2 weeks and just read the textbook which had everything we were expected to know and did well on both the midterm and final.\r\n\r\nThe homeworks, except for the first one, were all trivial. They barely took me anytime and I felt that I wasn't learning anything as they didn't require any thinking at all. I definitely spent more time on my homeworks in 1004.\r\n\r\nTry to avoid taking classes with this professor if you can, he does a bad job of teaching whether or not it's his fault or that of the department. You also won't learn anything.", 
      "workload_text": "Light"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 20 May 2011 07:20:06 GMT", 
      "id": 26136, 
      "professor_ids": [
        10722
      ], 
      "review_text": "Prof. Morris is perhaps the sweetest professor on campus.  He's always willing to listen to students when they voice concerns.  His teaching is pretty standard for a beginning lecturer, and he puts all of his lecture slides online (on Google Docs) so it's easy to follow along if you get lost.  I learned stuff - and yes, I could've learned more with a harder professor - but I didn't have to kill myself at all.", 
      "workload_text": "First assignment was very difficult, next 3 weren't so bad. He drops your lowest score out of 5 (in our case 4), pretty easy/standard midterm/final"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Mon, 23 May 2011 05:21:15 GMT", 
      "id": 26156, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Most teacher I've had at this school thus far have been subpar (*SHITTY*). Blaer is very interesting and funny! He makes everything very understandable and the TAs are very accessible over e-mail. If you get how to do the homeworks you should have a good grasp of everything. The homeworks can take a bit, but they aren't intimidating. Seriously, just pay attention in class and write down everything he says. Should be an easy A if you dedicate some work to it!\r\n\r\nBlaer was awesome! It feels so weird that I can actually do programming! WA THE FUUUUH?!", 
      "workload_text": "5 homeworks (2 weeks to do each, with 1 that we had probably like a month to do and one that we had like 1 week). They are really doable, especially if you have friends who know programming/people in the class who get the hw/if you go to office hours/if you ask the TAs over e-mail."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 21 Dec 2011 02:39:16 GMT", 
      "id": 26641, 
      "professor_ids": [
        42
      ], 
      "review_text": "I have no idea why this guy has a silver nugget. He's not a good teacher. At all.\r\n\r\nHe always has a very, very specific answer in mind when he asks questions. In class, this leads to him calling on several people before he hears exactly what he wants to hear. He often gets exasperated at people not saying the right answer immediately. What's important to note is that often the right answer has been said, but he just didn't notice because he was too fixated on having it said exactly how he thinks it should be.\r\n\r\nThat's how it was on the exams as well. Clearly, he thought of the answers before he thought of the questions, and didn't spend much time thinking about how to phrase the questions. They were completely incomprehensible. On the midterm, he even gave us all an extra 8 points because he admitted that one question was so terribly convoluted. On the final, the chalk boards were covered by the end of the exam because of how many changes he made to the directions. I must have lost 20 minutes going back and redoing stuff because he was redefining the questions as we were taking the exam!\r\n\r\nThe work load is enormous in this class. Again, the questions were often ambiguous. If you badgered him on the discussion board, he'd sometimes clarify things. He also didn't check the API before assigning some of the graphics stuff. I must have spent 20+ hours combined trying to work around bugs in the API to try to make my designs the way he wanted them. I even sat down with him once in office hours to read through some unofficial API source code, given that his response to one of these bugs was, \"Hmmm...that's unexpected...\"\r\n\r\nOverall, this class was the most frustrating experience of my semester. If I didn't have to take it, I wouldn't have. I don't feel like I learned that much (except for some interesting stuff in chapter 7 about generics). I feel like if Kender had been focused, it might have been a semi-enjoyable experience. He was too much in his own head and didn't interact well with students, though.", 
      "workload_text": "Unreasonable. In fact, on the course evaluation one of the check boxes was next to \"So much I didn't learn anything.\" The fact that he would even consider this to be an acceptable option speaks volumes about how he approaches this class. "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 04 Jan 2012 22:55:04 GMT", 
      "id": 26824, 
      "professor_ids": [
        42
      ], 
      "review_text": "I have to disagree with the review below me on multiple accounts.\r\n\r\nFirst, workload: There are five assignments, a midterm, and a final. For each assignment, we were given at least two weeks if not more. Kender, though as inscrutable as Dumbledore in his answers, will point you in the general right direction through discussion boards, and office hours with the TAs and Kender himself will help you if you're ever feeling totally lost--but to take advantage of this, you MUST start the assignment earlier than the weekend before they're due. They can take up to a whole weekend to do but often much less. They are difficult, but they can be fun and you'll learn something from each one.\r\n\r\nSecond, as for the phrasing of questions, he just likes for you to state the reason behind the answer rather than rote memorization. To reiterate what previous reviews have said, he seems grumpy but he's really a sweet, witty, silver nugget-worthy guy.\r\n\r\nHe's like an m&m with a hard crunchy outer coating but is really just a sweet, melty, softy on the inside. If you really took his exasperation to heart, then do yourself a favor and get over yourself. He's not a kindergarten teacher who will hug you and listen to your feelings but he will go well out of his way to help you as much as he can without straight up giving you the answer. He wants you to oh my god forbid learn something instead of cruising out with a B+.\r\n \r\nThe grading was very reasonable(not EASY, reasonable), he explained how and why the grades were the way they were, acknowledged when things were unfair, took our feedback into account very well, and if you had a problem with this good luck at Columbia because the fact he even TOOK feedback was like, shocking, at this school. ", 
      "workload_text": "takes an average amount of work, read the book to help keep up with the lectures(which is in fact an assignment!!!), if you're really struggling then consider dropping back down to 1004 or something because you do need strong basic programming skills to do the assignment. if you don't have them, it will make a moderately difficult class way harder. "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 12 Apr 2012 01:40:49 GMT", 
      "id": 27126, 
      "professor_ids": [
        10725
      ], 
      "review_text": "I'm basically in love with him.\r\n\r\nI was so happy to find out that I had Swap instead of Kender. Swap is very entertaining to listen to, and a cool dude. Although his lectures were disorganized at time, you can always read the textbook to rehash the lectures and get a firmer understanding.\r\n\r\nHe also gives extensions on most of the homework, which makes him super awesome. The grading for the homework is also super easy. So far I've gotten 100% on all of the homework assignments.\r\n\r\nOverall, take a class with him. He's awesome.", 
      "workload_text": "Problem set every two weeks, with a theory section and a programming section.\r\nMidterm and final."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Tue, 15 May 2012 05:40:43 GMT", 
      "id": 27343, 
      "professor_ids": [
        10725
      ], 
      "review_text": "I was initially terrified to take 1007 because I thought I was going to get Professor Kender, but it turned out Swap was teaching it. He guest lectured for Professor Cannon's 1004 class and I thought he was a cool guy so I signed up for this class. At first it was a bit rough because I hadn't programmed over winter break, but the assignments are completely doable, and he helps us with them by giving us Halo quests which provide a checklist of things one should be doing (they're themed, so the last one was Doctor Who themed!). The TAs are awesome (shoutout to Don!), and Swap is very helpful during his office hours and through email. His lectures are sometimes disorganized, but as the other reviewer said, it's all in the book. And he also has us read cool things like the Law of Leaky Abstractions and things on Lisp. This class solidified my decision to major in Computer Science. ", 
      "workload_text": "HW 1: Blog\r\nHW 2: BattleShip\r\nHW 3: GUI Restaurant Menu\r\nHW 4: Networking; Connecting to CIA World Factbook to answer trivia questions\r\nHW 5: Either DuckHunt or a personal project\r\n\r\nEach homework has a theory part. \r\n\r\nMidterm and final are completely fair. Averages around 75. \r\n\r\nHW: 40%\r\nMidterm: 30%\r\nFinal 30%"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 12 Aug 2012 21:45:26 GMT", 
      "id": 27498, 
      "professor_ids": [
        3409
      ], 
      "review_text": "I honestly wanted to like this class, and expected to after reading several positive reviews.  Maybe there is an inherent flaw in teaching a class like this during the summer, but I suspect that the fatal flaw of this class was that it wasn't well planned.  Nonetheless, as I read the other reviews of Professor Blaer, I am suspecting that he might be better at implementing a course during the fall or spring than during the summer.  \r\n\r\nIt seemed that this entire class was planned as an afterthought, and the class seemed to operate under principles that I previously thought violated those of learning computer science.  I thought computer science was about thoroughly understanding concepts and creatively applying them to solving problems.  I also thought that lectures were a supplementary feature to the learning process, and that the most important part of the learning came when working through assignments.  Finally, I was under the impression that computer science is a subject one couldn't cram for, and the way to learn is through practice.  I'm hoping that I was right about all this, and that the only reason I am questioning it now is due to the faulty implementation of this course.\r\n\r\nI went into this class with the expectation exams should be doable if one is able to figure out the homework assignments on your own.  After all, the purpose of said exams are to ensure that people truly understand the material and don't get rewarded with a top grade for getting through the assignments without fully understanding them (for example, by getting excessive TA help or copying from other students).  However, that really wasn't the case in this course.  The exams tested concepts and syntax that were not covered in the assignments, or that were covered in assignments that weren't assigned until after the exam.  (For example, the first time we were ever asked to write a program using anonymous classes was during the midterm exam.  These is nothing inherently difficult about using anonymous classes in Java, as it is just a quirky syntax to get used to.  However, this straightforward exam problem was significantly more challenging due to the fact that we had never been asked to implement an anonymous class on the computer prior to the exam.)  To be fair, he did teach the concepts in lecture, but it is very difficult (for most people) to learn computer science enough to quickly apply it exclusively through lectures.  \r\n\r\nAnother expectation I had in taking a computer science class over the summer was that I'd be drinking from the fire hose.  I thought I'd be working hard and losing sleep to finish assignments on time.  The only time I truly found myself working hard and losing sleep to get the task done in the time allotted was when cramming for exams.  \r\n\r\nThere were only four homework assignments, each of which consisted of a written portion and a programming portion.  The content of these assignments was fair.  They were time consuming (except for the first one), but completely reasonable in scope.  Nothing we were required to do went beyond the concepts discussed in class, yet I still found myself learning a good deal while working through these assignments.  That being said, I would've liked another assignment or two in order to thoroughly learn the material that was covered on exams but not on the projects, as well as to lessen the weight of each assignment on our grade.  Moreover, he extended the deadline for every assignment, which was great for the students who procrastinated.  However, for those of us who started the assignments when they were released, these extensions were more of a punishment because they were often granted after we had already allocated significant time to completing the assignment prior to the original deadline.  Further, he did not make the new assignment available until the extended due date of the previous one (despite promising to make them available earlier on a few occasions).  Due to the poor timing of assignments, the final assignments ended up being due the midnight prior to the final exam.  \r\n\r\nFeedback was another story.  Initially there was a single grader for the class, and as a result we did not receive feedback on the first homework assignment until the middle of the fourth week of class.  At that point, a new grader was hired.  The class ended last night and we have currently received feedback on two of our four homework assignments.  It also took two weeks to hand back the midterm exam in class.  To be fair, the instructor admitted that the lack of TA help was a problem the course was facing.  However, these delays were more than just annoying: they caused many students to be penalized multiple times for the same mistake.\r\n\r\nLectures largely consisted of presentation of the textbook author's slides, from the book \"Object-Oriented Design and Patterns\" by Cay Horstmann, and occasionally he'd present additional examples of his own.  These lectures were fine, but not exactly easy to pay attention to for three hours.  Easy or not, paying attention was important, as many points he made during lecture had a tendency to show up on exams despite not appearing in the assignments nor being emphasized in the textbook.  When the instructor presented his own code, there was often a several day delay between the presentation of the code and the uploading of this code to the course website, which made at least one of the assignments much more difficult than it needed to be.  \r\n\r\nIf you are planning to take this offering in the future, make sure you are very confident in your ability to learn computer science quickly and without much practice.  Otherwise, you will probably be sensitive to the problems with the course.\r\n\r\n", 
      "workload_text": "The grade was calculated with the following weights: 50% Homework Assignments (of which there were four), 20% Midterm Exam, 30% Final Exam.  "
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Fri, 28 Sep 2012 19:07:20 GMT", 
      "id": 27561, 
      "professor_ids": [
        3409
      ], 
      "review_text": "I'm optimistically assuming that the computer science department has the sense to never let Professor Blaer teach this class again, in which case this review doesn't really serve much of a purpose.  However, given the finite probability that computer science continues to show the lack of judgment that they showed in allowing him to teach COMS 1007 this past summer, I feel justified in writing this review.\r\n\r\nI just got reminded this morning that I took COMS 1007 with Professor Blaer this past summer when I got an email that my grade arrived.  The date of the final exam was Thursday August 9th.  I had been checking Courseworks weekly since the end of the course, and this is the first time that I saw the grades posted for assignments 3-4.  I am currently enrolled in COMS 3137 and have completed the first two assignments prior to receiving my grades for the last two assignments and my final grade from COMS 1007.  There is still no grade posted on Courseworks for the final exam, and given that combined with the discrepancy between how well I did in the course and how poorly I felt I did on the final, I'm wondering if he even graded and/or counted the final exam.  This might sound like an outlandish accusation, but the classmates who I've talked to are  all speculating the same idea.  \r\n\r\nProfessor Blaer told us during the final lecture, on Tuesday August 7th, that he was setting the following Monday as the grading deadline for the TAs, and therefore that we should expect to know our final grades by the Tuesday of that week.  We were never contacted with notification of any delay.  At first I thought it was just me when my grade wasn't posted all summer, but then I got to COMS 3137 and found that several of my classmates who were in the summer class had not received their grades either, and we all had contacted him several times via email, telephone, and direct office visits.  Professor Blaer didn't respond to most of the emails or telephone calls, and he wasn't in his office when most people arrived.  However, whenever one of us did hear from him, he said that the grades would be up \"by the end of the day.\"  \r\n\r\nThe lack of feedback and organization in this class was representative of the fact that the concern for students' learning was absent, which is a shame.  After all, isn't that the point of any class?  Professor Blaer's lectures were fine.  They weren't amazing, but they were fine.  However, in teaching a class in computer science, organization and feedback are at least as important as the lectures.  I'm my personal opinion, they're far more important because most of the true learning comes from working through and receiving feedback on assignments. ", 
      "workload_text": "The workload consisted of four homework assignments (worth 50% of the grade), one midterm exam (average ~79 - and worth 20% of the grade), and one final exam that was said to be worth 30% of the grade, but most people are wondering if he ever graded/counted it, and the average was undisclosed.  The assignments were fair in their content, but they were timed pretty poorly, such that the last one was due the midnight before the final exam."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Thu, 11 Oct 2012 14:24:29 GMT", 
      "id": 27577, 
      "professor_ids": [
        12357
      ], 
      "review_text": "Literally the best TA in the world.\r\n\r\nI've been fortunate enough to have him as a TA for three of my computer science courses, and every time I've needed help, he's been extremely responsive and helpful. He'll help you debug your code and patiently explain theory over and over if you need it.\r\n\r\nDon is very patient during office hours. He was also the only TA in my COMS 1004 course who wasn't trying to make us all get Cs. His TA office hours are always packed because it's pretty known what a great TA he is.\r\n\r\nI pretty much love him.", 
      "workload_text": "None, he's a TA."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 06 Jan 2013 09:23:40 GMT", 
      "id": 27933, 
      "professor_ids": [
        42
      ], 
      "review_text": "First of all, W1007 is now Honors Introduction to Computer Science and no longer \tObject-Oriented Programming and Design in Java. If 1004 and the old OOP course had a baby, this monstrosity of a course would be the result. The course had no target audience. It was excessively basic for some, and impossibly difficult for others. In fact, this was evident from our midterm scores - the curve had two peaks!\r\n\r\nThat said, this was an exceptionally well taught course thanks to Professor Kender. This man can teach. Kender is truly silver (possible gold) nugget worthy. While the content of the course was not the best, (not Kender's fault - he has to comply with the CS department) Kender did an amazing job at teaching it. His lectures were a joy to attend. He is organized and methodical and teaches in the order of the chapters in the book. He has a great sense of humor and tells at least one awesome joke per class. He also gave us lots of cool extra information because this is \"an honors class\". Also, he has this strange, but fun obsession with the Principle of Least Surprise (PoLS).\r\n\r\nDon't let Kender's imposing figure scare you. He is a very approachable and reasonable professor who will take the time to help you out. If you're too intimidated to ask him a question in person, there's always the online solution. This course used Piazza which was great since it allowed us to ask questions anonymously and clarify doubts in the assignments. Kender is on Piazza almost 24x7 on the weekends before assignments are due.\r\n\r\nAssignments were of variable difficulty and length. Many of them were poorly worded causing some confusion. Some were very interesting like making a GUI game to play Rock, Paper, Scissors, Lizard, Spock with an AI engine. The assignments were usually graded within a week or two. The TAs were for the most part good. One TA (name not disclosed) was very stingy with grades and always screwed the assignments he graded. This unfair grading affected some very unlucky students.\r\n\r\nThe midterm and final were long but manageable. Note down everything he says in class. His tests mainly consist of questions from topics discussed in class, especially violations of PoLS. Grading was extremely fair - not easy, not hard. He takes a long time to get exams back because he corrects all of them himself (and he unfortunately had an ill member in his family this semester). He gave us candy canes during the final because glucose apparently stimulates brain activity. Needless to say, that was the most entertaining exam ever.\r\n\r\nAll in all, if you have a strong foundation in Java and design, skip this course. But try to take Kender whenever you can. He makes this course worth while with his godly teaching prowess and great sense of humor.", 
      "workload_text": "More than the average class.\r\n\r\n5 Assignments every 2 weeks (take anywhere from 6 hrs to 2 days to finish) (10% each)\r\n1 Midterm (20%)\r\n1 Final (30%)"
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Wed, 22 May 2013 20:10:09 GMT", 
      "id": 28438, 
      "professor_ids": [
        10725
      ], 
      "review_text": "This review is kind of hard to write because Swap is such a nice guy in person. He is totally willing to chat with students during office hours or whenever you need him, and the class environment is super relaxed. However, I was really disappointed in this class. Here's why.\r\n\r\nAs a disclaimer, I will mention that I took 1004 last semester and did quite well. Consequently, much of the material we covered in 1007 was pointless review for me (inheritance, interfaces, etc.). Worse, Swap is not a good lecturer\u2013his classes wander aimlessly, guided by broad topics and students' questions. It was much more efficient for me to read the textbook (readily available in PDF form) rather than listen to his lectures, and then use Big Java to review older material.\r\n\r\nHis homeworks were a mixed bag. Some were quite helpful: the GUI project was especially instructive. Others were incredibly stupid. One assignment involved crawling the HTML of various Wikipedia pages about the Academy Awards and retrieving data (e.g., who won the 1993 Best Actress award, stuff like that). Is HTML parsing useful? Yes, but this assignment literally took 20+ hours of tedious drudgery, because all of the Academy Awards pages are formatted completely differently from each other. Moreover, it didn't really seem relevant to what we learned in the class; the networking involved is extremely simplistic, no graphics, no interfaces, etc. Another assignment involved making a command-line (textual) version of Othello. Again, extremely tedious. Why not just wait to do the Othello assignment until after we had learned graphics programming? \r\n\r\nThe good news is that the topics are useful and important: graphical user interfaces, networking, interfaces, inheritance, file input/output, etc.\r\n\r\nThe exams were really easy. The average was ~80 for the midterm and final. As a result though, there was presumably almost no curve. I got a B+, which felt a little harsh considering how well I did in the class (81 midterm, 90 final, 92 homework average). I was honestly expecting an A.\r\n\r\nThis course is no longer required for the CS major if you've already taken 1004, and I don't recommend taking both. If you have to take it, go ahead\u2013it's not hard, and some of the things you learn are really helpful, but it's often frustrating.", 
      "workload_text": "PSet roughly every 2 weeks (theory and programming parts), but Swap gives extensions on literally all of them (40%). Easy midterm (30%) and final (30%)."
    }, 
    {
      "course_ids": [
        2906
      ], 
      "created": "Sun, 07 Jul 2013 20:54:28 GMT", 
      "id": 28536, 
      "professor_ids": [
        10725
      ], 
      "review_text": "I loved this class and I thought it was perfect for the level I was at. I originally was worried that it would be too advanced for me since I didn't take w1004 and I felt inexperienced with programming especially after half a year of not touching java, but when I told Adam Cannon (the 1004 prof) that I'd already gotten a 4 on the AP CS exam, he told me to take w1007 instead which led me here.\r\n\r\nSwap is a pretty good teacher, and a really great person.  The classes were fun and there was just a chill atmosphere there.  He programmed things like cheezburger cats and harry potter creatures.  I think it was structured pretty well, and it really helped me better understand OOP, especially since my teacher from my AP class in high school was pretty bad at explaining the concepts of inheritance, and words like static/final/public/private. At the same time though, I will also say that sometimes the class went off track or just really slowly (some of the stuff covered in the AP apparently wasn't taught to the 1004 class), so I spent a lot of classes coding for the hw assignments. I didn't have to take many notes... I feel like the textbook is pretty easy to read so it's easy to just look up what you need to know if you forget something.\r\n\r\nHomework took a lot of time to complete, but I thought all the assignments were pretty fun and the grading is straightforward. I think the best advice I have is to not wait until the last moment for starting your assignments. Instead, start them as early as possible. That way, when you run into problems, you have time to go to TA office hours. My TAs were amazing and super helpful, and I really don't know what I would have done without them.  I feel like with all the help offered, there really is no reason to not do well in this class, unless you procrastinate and just don't do the work or hand it in late. I'm not even that great at time management, but I still got an A in this class.  There's a lot of opportunities for extra credit and the midterm & final aren't hard as long as you look over the code from class and know your vocab.\r\n\r\nBasically this class gave the confidence to keep pursuing CS as my major. Yes, there were a lot of all nighters, but I enjoy coding all night (it kind of gives me a coding high? haha) so it was partially by choice. Do the work, and you'll be fine!", 
      "workload_text": "I'd consider this a pretty heavy workload but not unmanageable at all. There were 5 HW projects total. Each one is part theory and part coding (the coding takes longer). A midterm and a final (Part 1: multiple choice, Part 2: vocab, Part 3: Find errors in code, Part 4: open ended)."
    },
    {
      "course_ids": [
        4
      ], 
      "created": "Sun, 08 Dec 2002 00:00:00 GMT", 
      "id": 3735, 
      "professor_ids": [
        1317
      ], 
      "review_text": "One major problem at this school is that many professors are chosen based on their skills in their field, not in teaching; thus, most of the time it turns out that the prof knows what he's doing but the rest of the students do not. Prof. Diament actually knows what he's doing AND how to teach it to others, a skillset I greatly admire. And on top of all that, he even has a sense of humor!", 
      "workload_text": "Very fair workload, and he is also willing to give extensions. 4-5 hw assignments and very fair midterm and final."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Mon, 16 Dec 2002 00:00:00 GMT", 
      "id": 3992, 
      "professor_ids": [
        1317
      ], 
      "review_text": "Ok, if u r thinking of taking this course, then most likely u dont have a choice. this is for all those non CS majors. its offered only in the FALL so plan accordingly!! if u have to take it, take it with prof diament (we call him TED). he is awesome. has a very good sens eof humor. makes fun of himself and CS. very friendly guy/ he is extremely reasonable to students and underatands that this course is for NON CS MAjors who arent that good in programming. he always gave us extensions. he made long online tutorials posted online which help a LOT! the book doesnt help much so u got to go to his classes, follow them and make sure u go through the tutorials. we were supposed to have 5 assignments but got only 4 due to the extensions he gave us. so he is cool. in general, TAKE IT WITH him; the material is still difficult but he will make it bearable. u can easily get a C+ or  even B- if u do well on the programming assgn. its always best to brush up on ur JAVA skills before u start this class and always begin days if not weeks in advance.\ni strongly recommend this ta named JUSTIN!! he was awesome! a very nice guy. he isnt one of those CVS TA's who just tell u what to do and then leave u there, but one of those rare ones who will help u every step. he even agrees to meet up during weekends or outside his office hrs for programming assgn. another TA was OLGA--  helpful but then again, only if u know what u are doing. if u r raw at java/DS, then she is not for u", 
      "workload_text": "4/5 programming assgn (50% of total grade so its crucial u get as much as u can in these). u may work in groups (although not officially allowed, but everyone does so) but dont get caught. then u r screwed!! u can get sacked or get on probation ...\n1 midterm -- kinda difficult if u r not good with java so be regular with class. one final which should be of equal difficulty level as midterm."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 04 Apr 2003 00:00:00 GMT", 
      "id": 5074, 
      "professor_ids": [
        1317
      ], 
      "review_text": "Ted was absolutely great!  After taking Intro to Java, I thought I was doomed for Data Structures, but this class was surprisingly pleasant.  For every assignment, he always gave us a tutorial that guids us through the whole assignment, and in it are explanations and examples that helps you complete about 75% of the work.  Then the last 25% is the actual homework.  This was really helpful.  The book is not so helpful, but his lectures are quite important but fun to attend.  He learns names of students and explains things not in some comp sci jargon but in easily understood everyday words.  Ted cracks jokes often so it's not uncommon to have the whole class burst out laughing.  The review sessions are really awesome since he gives great examples and lively demonstrations to make sure everyone understands the material.  He's really reasonable with homework also, so we actually got extensions for all the assignments.  In the end, there was even extra credit opportunities which really helped my grade.  If you can, take data structures with him!!!!", 
      "workload_text": "4-5 programs with provided tutorials, extensions are likely.  They are not easy but definitely not impossible.  Very fair midterm and final with great review sessions beforehand."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sun, 18 Jan 2004 00:00:00 GMT", 
      "id": 7775, 
      "professor_ids": [
        1951
      ], 
      "review_text": "He's the most awesome teacher I've met at Columbia so far. He makes computer science really fun to learn, and I hate comp sci with my gut and soul. but his class was a lot of fun and very rewarding. he knows his stuff well and teaches it in a way that's accessible to the programming-illiterate. he holds extra office hours if you request it just to help you go over homework problems. one of two of them can be tough but he's always willing to help you out. he's also one of the few teachers that tries to get to know the students on a personal level. after the final, he came after me just to ask me how i did on the final. i haven't met any professor in seas who's nice enough to come running after you just to ask you how you did...\n\na great, articulate, intelligent, warm instructor. ", 
      "workload_text": "6 assignments with written and programming parts due every other week (he also gives a lot of extra credits on these assignments to help you boost your grade), one midterm, one final...both have programming parts and are open book"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 24 Dec 2004 00:00:00 GMT", 
      "id": 10181, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Janak is a real nice guy.  He himself has been a Columbia student for the past 10 years.  He is considerate of his students and goes out of his way to be accesible to them.  He is firm in his grading procedure but very fair.  Workload is a lot, but that is just the nature of the class.  You're fortunate if you're in Janak's class. ", 
      "workload_text": "6 HW's (more like mini-projects), Midterm, Final.  Opportunity for extra credit for students who know what they're doing.  Brought us dozens of Krispy Kreme on exam day cuz it was a 9am. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sat, 09 Apr 2005 00:00:00 GMT", 
      "id": 11701, 
      "professor_ids": [
        1951
      ], 
      "review_text": "Janek is the best computer science teacher you could have.  I mean this literally - he TEACHES very well.  He is able to explain concepts very fundamentally and easily.  He breaks down complex ideas ver well and provides very easy to follow examples and analogies.\nHe grades slightly on the stricter side, but is pretty soft in office hours.\n---Very Highly Recommend---", 
      "workload_text": "6 time-consuming, although not overly difficult (sometimes the extra credit is fairly challenging).  Midterm and Final are simple enough since it's open book/open notes."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sat, 23 Dec 2006 00:00:00 GMT", 
      "id": 17119, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Pasik is the best professor by far I have had in the Computer Science department and was my favorite professor I've taken so far overall as well. He made his class very interesting and made it easy to do the assignments just on his notes, as he did not seem to like the book that much (I never even opened it up) If you go to class, to me it seems like the class is a breeze, but seemed like more than half of the class did not show up for his lectures and thus complained it was too hard. With and excellent professor, fairly easy grading and very fair tests, and a ton of extra credit, I don't see how anyone would pass up the chance to take a class with him. ", 
      "workload_text": "5 Assignments and 2 midterms, each worth 10 points. He also had an extra credit assignment and final, each worth another 10, though were graded a lot harder. Overall, workload was very fair for a comp sci class, ranging anywhere from 2 to 5 hours an assignment(though prob more if you have no clue what you are doing) and were graded fairly easily. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sat, 05 May 2007 00:00:00 GMT", 
      "id": 19841, 
      "professor_ids": [
        1671
      ], 
      "review_text": "A mixed review.  Shlomo can be condescending at times, friendly and joking around at other times.  The class is apparently easier than with other professors.  Sometimes his jokes are terrible but at least he tries.  Involves the class as much as possible but he'll shoot you down if you have the wrong answer, and he'll even manage to make you look stupid if you have the right answer!  Probably not the best way to teach a class.  Also he's pretty absent minded.", 
      "workload_text": "Tests fairly hard but open book and notes, Homeworks were progressively longer but do-able.  Don't expect grades back any time soon though."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 18 Dec 2007 00:00:00 GMT", 
      "id": 20605, 
      "professor_ids": [
        3332
      ], 
      "review_text": "I thought David was hysterical. A PhD candidate with a sense of humor as keen as his is rare. Well, some people loved him. Others thought he was a bit aloof. \n\nWhat was best about him was his analogies and drawings. \nHe makes sure the class knows what is going on before proceeding. Most people, however, don't want to raise their hands.\n\nVery approachable with fascinating stories to tell I highly recommend you take this course with Elson. For a point of reference, if you took AP Comp Sci AB in high school you'll be fine until the last week where he studies things like NP completeness.\n", 
      "workload_text": "Light but the programming sections were a pain even for people who knew java. The Theory was also a pain at times but overall wasn't must of a problem. I wish I had gone to the TA's for more help though. 50% HW, 20% Midterm, 30% Final. All easy but the HW, as stated earlier, is tedious. You'll get the concepts far before you work out the bugs in your code."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Wed, 12 Mar 2008 00:00:00 GMT", 
      "id": 21047, 
      "professor_ids": [
        3332
      ], 
      "review_text": "Though this is David Elson's first semester teaching, I think he's done an outstanding job of it. I've always marveled at why I seem to enjoy classes taught by graduate students better than I do classes taught by actual professors, but I think it is because graduate students are more understanding of how to lead a class of undergrads in such a way that they will be interested and entertained.\n\nDavid Elson has two qualities that really qualify him as an excellent teacher, 1) excellent English and ability to explain concepts and 2) a wicked sense of humor.\n\nI have never missed a Data Structures class because of this; this was true of Chris Murphy's 1004 class I took last semester, too. David Elson really CARED that the students are learning the material -- he explains things clearly, does relevant examples, cracks corny jokes, and always tries to encourage class participation (a noble endeavor indeed!). His availability is also extremely flexible -- he answers emails even at excruciating times like 2 AM on a Friday or Saturday night, which really helps for the people who chronically try to complete hw assignments two days before the due date. The homework assignments started out rather tedious and long, but David took into account the class's complaints / suggestions and lessened the workload to really help us learn the implementations of data structures instead of spending 40 hours struggling with other irrelevant code. I love his programming assignments -- thought they were totally relevant and even FUN, dare I say. This is one of the few classes I ENJOY doing work for.\n\nAll in all, I thought Data Structures would be the death of me this semester, but I ended up loving it and learning far more than I thought I would. Thank you, David!!!", 
      "workload_text": "see other review for breakdown. I should mention there was quite a bit of extra credit (mostly extra programming!), and if you do it all, it can be helpful enough to push you 1/3 of a letter grade higher =)"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 19 Dec 2008 00:06:11 GMT", 
      "id": 21829, 
      "professor_ids": [
        3332
      ], 
      "review_text": "Elson is a phd student but is a good professor overall. Not a class for computer science majors, but this class is a lot of work. Elson does his best to make it manageable, he knows that most of the class struggles with the programming sections, so he gives you late days and tries to help with the homework. Overall, a hard class that takes a lot of time, but if you are good at computer science, this should be no sweat. If not, then watch out.", 
      "workload_text": "Heavy, very heavy. Five assignments(theory and programming) that take about 10-12 hrs each assignment. Midterm which is long, and final which is more reasonable."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 24 Apr 2009 17:22:56 GMT", 
      "id": 22618, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Pasik is an interesting and fun guy.  It does help to be the right kind of student (interactive, awake, asking questions).  He usually doesn't have a text book and doesn't do much on the board or with notes.  He basically talks to you.  Attendance is absolutely essential.  If you show up every day and pay attention, you can't help but get an A, because he explains everything.  If you skip classes, and you don't already know the material, then you're in trouble.\r\n\r\nWhile I like him as a Professor, he's not the strongest when it comes to math or theory.  He's a pretty practical guy.  That works for him though, especially in data structures, which is a practical course.  His coding skills are very well practiced.  If you want your code to be clear, modular, and work the first time, watch him go through code.  If he posts code online, take it and put it in your coding base.  It's really well written code.\r\n\r\nBy the way, he loves recursion... really loves it.  The main thing I learned from him was how to write concise, elegant, semantically clear, recursive code.\r\n\r\nLittle things to note:\r\n1.  He will not accept anything late.  He assigns things extremely far in advance.  Get them done.\r\n\r\n2.  Make sure you really get the material.  Since he lectures well, the average scores on the tests tend to be pretty high (at least in my experience).  So if you want an A, you need to do well on the tests.\r\n\r\n3.  The tests are really straight-forward (no surprises), but they might require you to actually know what you're doing (not just get the gist).  He will make you write code snippets on the spot on exams.", 
      "workload_text": "Data Structures: 5 or 6 programming assignments.  All quick and easy.  Midterm and Final.\r\n\r\nArtificial Intelligence.  An easy project, then a hard project, then a really hard project, then a group project.  In hindsight, the third project shouldn't have been THAT hard, but you really need to understand lisp by that point in the semester.  Midterm and final."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 04 May 2010 20:30:17 GMT", 
      "id": 24260, 
      "professor_ids": [
        2508
      ], 
      "review_text": "I liked Doctor Pasik's class. It seemed I have a better programming talent than my peers, so take this review with a grain of salt.\r\n\r\nYou must go to lecture in order to do well; there is no course textbook. He's taught this course many times, so he knows what he's doing. There is a mad steep learning curve, starting with recursion. Once you get this, however, his code becomes a lot easier to understand. For each data structure, there is an abstract understanding of it, and there is a programming understanding. The conceptual understanding is more important; the programming is only important in the assignments (and he posts all his code on Courseworks anyway). His conceptual explanations makes use of diagrams, so recommend taking notes on pencil and paper. His explanation of each data structure is very systematic in this way.\r\n\r\nDoctor Pasik is very approachable, but only after class (he has no office hours). He always stays to answer all questions the students have; you can often get hints on the assignments this way. Additionally, he has lots of insight into the rest of computer science, and potentially a networking contact, depending on your desired industry.\r\n\r\nThe assignments can be difficult; however, you never have to work from the ground up (except the last one). You take his code from Courseworks, and using those basic methods, you build the rest of the methods to complete the assignment. Again, these additional methods require a conceptual understanding of what you are doing.\r\n\r\nHis grading style is interesting. There are 60 points worth of assignments (6 assignments, 10 points each), and 50 points worth of tests. To calculate the curve, he will take the 5 highest scores from everyone's assignments and the 50 points from the tests and calculate the average from that (curved to a B-). Then he'll add on the raw points from the 6th assignment to the score, boosting everyone's grades.", 
      "workload_text": "6 assignments, due about once every three weeks. Once you actually plan out what you're going to do, they don't take that long. 50% + up to 10 extra points\r\n2 midterms, 15% each.\r\n1 in-class final, 20% (on last day of class)."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 14 May 2010 00:57:22 GMT", 
      "id": 24389, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Like everyone else said, go to class! There's no textbook and it's at 6:10 so it's not like you're skipping a morning class to sleep. Pasik is an excellent lecturer and if you go to class, the material is very clear. I had no programming experience before college, and I didn't do amazing in 1004 and I got a freakin A+ in this class! (HOLY CRAP!!!)\r\n\r\nHe LOVES recursion. Definitely try to learn it because it really opens your mind about programming. Also, learn a bit of LISP before hand because Pasik basically programs in LISP but in the Java language. It'll be a lot less overwhelming when you meet recursion for the first time.\r\n\r\nHis grading style is very interesting. He curves to a B- but there's a decent amount of extra credit to be learned. The TAs are super nice so if you have trouble with the assignments (AKA not enough experience with Java like me), they are really helpful.\r\n\r\nKeys to success:\r\nGO TO CLASS. Seriously, try not to miss any lectures.\r\nStart the assignments early. (I have stayed up to 4am debugging. It was terrible.)", 
      "workload_text": "6 Assignments, lowest grade \"extra credit\"\r\n2 exams, both fair\r\n1 final, cumulative\r\n\r\nOther reviewers have explained the curve."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 25 May 2010 23:47:56 GMT", 
      "id": 24549, 
      "professor_ids": [
        2508
      ], 
      "review_text": "This class is a joke. Go to class, everyone says. And it is true, you should go to class if you really want to understand the material.\r\n\r\nWhat he does in class is he just goes over the coding that is on courseworks, first in general and then looking at the code itself. So for say, the linked lists, he would first explain what linked lists are, and then go over it in code. Of course, you really don't even need to take any notes, since if all you do is pay attention, you'll understand how the structures work and then you can just read the code to refine it even more.\r\nHe also let us out more than twenty minutes early multiple times, because that's how clear he makes the material.\r\n\r\nSo what makes this class a total joke? First, he assigns six homeworks. They aren't hard at all, and if you have a comp sci-major friend, they're actually easy. They don't take all that much time to do, and best thing, they're worth 50% of your final grade. 50% for six homeworks? Yup, he takes the \"lowest\" grade (you should be getting 10's on all the homeworks anyway) and adds it on as extra credit. If you have good enough friends, you should be getting ten points extra credit. Not only that, but on two of the assignments he had two MORE ways of getting extra credit: one was a simple, two line code, and the other was a bit tougher but still very doable, and he gave three points each for a grand total of sixteen points extra credit max. And note, these are on the HOMEWORKS, not on the tests that actually test your knowledge.\r\n\r\nThe tests make up the rest of your grade. Two midterms worth 15% each (15 points each) and a final worth 20% (20 points). They were also jokish. On each midterm he made sure to put at least one problem where you have to code, and one problem where it's a freebie 3 points if you went to class and listened (simple things like 'what is the time complexity of heapsort'). The final was a bit different: one tough problem, one very very easy problem (his freebie question worth 6 points, everyone should have gotten this one) and one coding (practically the same as the code in class). Even more, because all his midterms are point-based (they're out of 15 points), it's not like other classes where it's out of 100 and then scaled. What you get is how many points you add onto your final score, but with your sixteen points extra credit, you technically don't even have to take a midterm and you'll still get an A+. But even if you do, you're practically guaranteed an A+ unless you really don't know java, in which case you'll just get an A. He practically guarantees that everyone gets at least 7/15 points, so at most, if you aren't that good at java, you'll get 14/30 from the midterms. The final was much harder, but the TAs said that they graded generously, so you should probably get at least a 13/20 on the final, so that's 27/50, and then you add the free points from extra credit, and you get a 77/100, but then you add the extra credit and voila, you're back at a 93/100, and you get an A for doing so badly on the tests.\r\n\r\nDon't be scared when, in the first day of class he complains about grade inflation and describes how one standard deviation above the mean is a B and two standards is an A, because really, with that much extra credit (and the ease of this class), at least half the class got A-range grades.", 
      "workload_text": "Six assignments (not hard at all), two midterms (pretty easy), final (you should get at least 10 points)"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 01 Jun 2010 18:06:19 GMT", 
      "id": 24568, 
      "professor_ids": [
        2508
      ], 
      "review_text": "This class was crazy hard, but Professor Pasik is a good teacher and did his best to guide you along.  As a student with no natural ability for Comp Sci I managed to survive the class, and in the end I learned a lot.  Make no mistake this is an extremely difficult class, but is also rewarding.  Pasik focuses on programming a lot more than other professors that teach the class.  Overall do not take this class lightly, but if you want to be challenged and learn A LOT than I definitely recommend him for Data Structures.  If your just looking to get through the class than you should take the class with a different professor.", 
      "workload_text": "Intense.  60% of the grade is programming.  Hard programming.  6 programming assignments worth 10 pts each.  2 midterm and 1 final.  midterms = 15pts each, final =20 pts.   **class totals to 110 pts, its basically 10 extra credit points"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 03 May 2011 05:41:14 GMT", 
      "id": 25840, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Great guy, really gets excited about the content. I don't know how someone could get so worked up about recursion and binary trees, but it made the class a bit more interesting I guess. I didn't pay attention most of the time, but when I did, he was pretty clear and the content was relevant to our assignments and midterms.\r\n\r\nIn the end, I feel like I learned a lot about data structures, although if you are an IEOR major, there isn't a high chance you will use it again.", 
      "workload_text": "6 programming assignments, 2 midterms, and a final on the last day of class. Pretty manageable, although each programming assignment could take you a while if you get stuck."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 08 May 2012 21:40:06 GMT", 
      "id": 27277, 
      "professor_ids": [
        2508
      ], 
      "review_text": "From everything I can tell, he's a very different teach when teaching Data Structures and when teaching AI. I've heard and read so much about how he doesn't actually teach in AI, but for Data Structures that was certainly not true -- over the course of the semester we covered a lot of material even if it's less than you would in some other Data Structure sections. It is true that he only ends up coming to class about 2/3 of the time since there's 4 quizzes, 4 review sessions, and 1 final. When he's there though, he's very passionate and often quite amusing. I also found that between the lectures and the programming assignments I came out with a very thorough understanding of what he covered. Beware though that his programming style is extremely bizarre so you may pick up some weird habits.\r\n\r\nThe quizzes were kind of mini-midterms -- they took the whole class but only counted for 10% of your grade and only covered 3-4 lectures worth of material. Of the 10 points, 7 usually entailed coding and the others were either on theory or definitions.\r\n\r\nSince most of the class doesn't have a CS background (since the class isn't for the major) he spends a decent amount of time reviewing basics although if you really never understood Java at all, you'll be in trouble. One last plus about Pasik is that he's very organized: he puts up the class-by-class syllabus and all the homework assignments weeks before the semester even starts so the expectations for the class are unambiguous.", 
      "workload_text": "5 programming assignments (10% each and he takes half of your lowest grade and counts it as extra credit) + 4 quizzes (10% each) + 1 final on the last day of class (20%). The assignments can be tough but are never impossible if you're comfortable programming."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Thu, 22 Nov 2012 23:18:50 GMT", 
      "id": 27660, 
      "professor_ids": [
        2508
      ], 
      "review_text": "Disclaimer: I got a very high grade in this class.\r\n\r\nI feel bad for anyone who was slightly interested in computer science before they took this course. The class is as boring as you could make it, and the teacher is awful. You would think he might learn a thing or two after teaching for thirty years but the practice didn't do him any good. He prides himself on making his code as compact as possible, squeezing as much stuff in to one line as possible, which is stupid. It would be like cramming this whole paragraph in to one grammatically correct sentence. Sure, it's still \"right,\" but there's a reason no one does it, and that is because it is a fucking stupid thing to do.\r\n\r\n\r\nI took data structures at a different school a few years ago, and I thought I should take it again to brush up on the basics. It was a pretty big mistake; you would learn way more about data structures by skimming wikipedia for a week than taking this course. In fact, I would recommend learning the material elsewhere and then checking his slides to see the stupid shit he changes. \r\n If you're interested in CompSci, know that this is not what it's usually like. ", 
      "workload_text": "5 assignments that take about two casual days of work if you know what you're doing, longer if you don't know what's going on. The tests are pretty easy if you know what to do and very difficult if you don't"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 08 Oct 2013 16:25:13 GMT", 
      "id": 28664, 
      "professor_ids": [
        2508
      ], 
      "review_text": "This was a HORRIBLE class. The instructor does not explain the coding and his slides do not make sense. \r\n\r\nThere is no textbook for the class, so there is nothing else to use to understand the material. When asked about this, the Professor instructed us to use Wikipedia to understand the material. I think that this approach is ridiculous - Why pay for a columbia university class when you are told to use wikipedia to learn the material?!? \r\n\r\nThe instructor is very arrogant and spends more time talking about how wonderful he is than trying to teach the material. He belittles and embarrasses students who ask questions, telling them that what he explained was crystal clear and that there is no need for clarification. This is not a good learning environment and is not appropriate for a class at Columbia University, which should hold itself to much higher standards! \r\n\r\nThe material on the exams was not covered in class. Unless you have prior experience with data structures, I don't know how you can do well in this class with this instructor. I wish this class were taught by someone else, who would actually teach. ", 
      "workload_text": "The homework assignments are very time consuming and Prof. Pasik doesn't teach you the material so that you can actually do the assignments!!!\r\nQuizes are not on material that was taught...and don't dare ask questions if you don't understand something, because Prof. Pasik will embarass you to the point of tears in front of the whole class. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Wed, 11 Dec 2013 04:06:31 GMT", 
      "id": 28824, 
      "professor_ids": [
        2508
      ], 
      "review_text": "I have no idea why this guy has a silver nugget. I've had a couple professors with silver nuggets who are great, but Professor Pasik is not one of them. \r\n\r\nPasik's class has a couple problems:\r\n\r\n1) his TAs. They are almost all jaded graduate/PhD students. In our case, 2 left throughout the semester, so as a result, all our assignments came back late. He did not hire new ones. They made TONS of grading errors, so make sure to go to office hours to check up on your quizzes. \r\nFinally, their rubrics are sometimes laughable. They award lots of points for the simplest things, and few for the most difficult parts.\r\n\r\n2) the structure of his class. He starts by covering a new topic with slideshow-supported lecture (slideshows posted on CourseWorks), consisting mostly of code and some text here and there. \r\n\r\nAfter each major topic (every 4 lectures or so), there's a quiz. Memorizing his code is a surefire way to get an A on these quizzes -- if you don't look at the code and didn't follow the lecture, expect to fail the quiz. Winging it is pretty tough. That being said, I failed two quizzes, but then scored significantly above the average for one I didn't study for at all. Why? No idea.\r\n\r\nAfter the quiz, you may or may not have a programming assignment. The programming assignment will probably be super easy.\r\n\r\n3) his code. Like people have said below, his code is extremely, extremely dense. He prides himself on brevity, but there is essentially a learning curve to reading his code (which shouldn't be the case, since you already know Java if you're taking this class). He teaches bad style that is not based on Java.\r\n\r\n4) him. Pasik is arrogant, but more importantly he doesn't hold regular office hours, so if you want to see him, either deal with his awful TAs or schedule an appointment.\r\n\r\n5) emphasizes weird things. We barely spent any time on hash tables and hash maps, but then spent tons of time on miscellaneous artificial intelligence topics at the end of the course, just because he enjoys them. You are learning the wrong material!\r\n\r\nTl;dr: please, please take a different section. This class is a crapshoot -- I never knew why I was getting the grades I did. I really regret not having actually put off data structures for another semester until another professor came along. This guy is no good.", 
      "workload_text": "Programming assignments are <10 hours and pretty easy.\r\n\r\nThere are 4 quizzes and a final, with no midterm. Quizzes/final? I still don't understand how to study for them. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sun, 15 Dec 2013 23:07:40 GMT", 
      "id": 28873, 
      "professor_ids": [
        2508
      ], 
      "review_text": "I haven't written any CULPA reviews prior to this, but I feel compelled to do so now, because I am really quite surprised by how negative the two previous reviews are. I really liked Professor Pasik and didn't think he was at all arrogant. Yes, it may have been kind of inconvenient that he didn't have any formal office hours, but he was always receptive to questions during class and was also available before/after class. While going through code during most classes can get a bit dry after a while, some of his lectures/stories about AI at the end of the semester were really great. (And there were a few other interesting anecdotes he told throughout the semester.)\r\n\r\nAs the previous review mentions, it can be somewhat difficult to study for the exams; however. that isn't really a problem, but rather reflects the fact that as long as you have a decent conceptual understanding of the material and understand the code that is shown in class, you should be okay. Regarding Pasik's coding style, I don't think there's any reason to make too big of a fuss--it may be slightly different in certain aspects from how other people would code, but it really doesn't make things any more difficult.", 
      "workload_text": "5 programming homework assignments (can be somewhat challenging, but nothing extremely difficult)\r\n4 quizzes plus a final on the last day of class"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Tue, 01 Jul 2014 01:35:38 GMT", 
      "id": 29653, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Professor Hershkop's class is a great class to take if your intention is to make it into grad school. Shit, after taking this class as a postbac, I was accepted to both Columbia and Penn for a Masters in CS, so I guess it worked out. His class will give you the A or A+ you need, presuming he grades you properly and submits appropriate grades. For me, that presumption turned out to be false. \r\n\r\nThe issue involved the professor giving me a B+ when I deserved and had been graded with an A. The reason for this problem was minor - I had been granted a written extension to turn in a final project, I turned the assignment in based on that timeline, and had received a zero by error of the professor. The professor agreed that I deserved an A for the class after grading my final assignment.\r\n\r\nDespite multiple communication attempts with him and spending over two months on the issue, the professor did not submit a grade change. He acknowledged the grade I had received was an A, but was either too busy/lazy to change it over basically the entire summer. This created deep stress for me, and concerned me, especially because I intended to apply for masters programs the next semester.\r\n\r\nAs a result, I brought my advisor in to help resolve the issue. After she confirmed the appropriate grade with the professor, she waited several weeks for the professor to resolve the issue. He didn't. She fixed the issue herself by submitting a document to change the grade.\r\n\r\nI believe this professor is an unfortunate member of the Columbia community, and is one of several reasons why I decided to attend Penn instead of Columbia for my masters program. His work ethic on administrative issues important students is completely insulting.\r\n", 
      "workload_text": "So light that I can hardly believe it actually counts as a class.  In fact, I was in advanced programming at the same time, and because I spent so much time programming in C for that class, I barely remembered how to program in Java by the time the final programming assignment came around."
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Mon, 14 Jul 2014 19:12:46 GMT", 
      "id": 29669, 
      "professor_ids": [
        2508
      ], 
      "review_text": "I took Data Structures in Fall 2013 with Professor Pasik and it was one of the worst decisions I could have made. He starts off the class by letting the students know that he codes differently than most professors and has his own styles. This \"style\" is pretty much squeezing your entire program into one line of code for no reason. We had quizzes that consisted of regurgitating exactly what was on his slides for class. The worst part was that there was no textbook to supplement the lecture. He very much minimized how horrible his teaching style was by saying that if you attend class you would get an A. This class is only for people who like to teach themselves through other classes textbooks or magically understand this secret coding style that he has created. ", 
      "workload_text": "Homework, Quizzes, Final"
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Sat, 06 Sep 2014 20:44:59 GMT", 
      "id": 29745, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Took course over the summer. Very solid instructor, lectures were clear. Managed to make 3 hours of lecture bearable. Assignments really helped understand the material and were time-consuming, challenging, but not unmanageable. The reviews below apply.\r\n\r\nWhy am I reviewing then, if what I've said above has already been said before? If you are taking THE SUMMER COURSE, expect to receive your final grade VERY LATE compared to the usual standards. Class ended in mid-August, and I received my grade early September, about 3-4 weeks after the end of the course. \r\n\r\nWhen I took Intro to MATlab with him during the year a long time ago, grading timeliness was never an issue at all, so I'm not sure where the disconnect lies. \r\n", 
      "workload_text": "See reviews below. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Fri, 19 Dec 2014 15:39:05 GMT", 
      "id": 73369, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Paul Blaer is an excellent professor. His lectures are generally very clear and straightforward. Don't hesitate to ask questions if you don't understand something, since he is very good at answering questions both in-class and through emails. Occasionally he'll tell a few stories about his research. Overall, a cool and funny guy who definitely deserves the nugget.\r\n\r\nThe learning curve might be a bit steep in the beginning (it wasn't too bad for me, but some of my peers thought it was), but once you can get over that initial hump everything works itself out. Just be sure to start early on the programming assignments or you will have a terrible time (no joke). In contrast to the 1004 TAs, it seemed that the 3134 TAs were more lenient on the style of the code - if the code works, you get a 100% regardless of how ugly your code looks.\r\n\r\nTL;DR Excellent class. If you put in the work and pay attention in class, you will do well.\r\n\r\nReviewer's grade: A", 
      "workload_text": "Homework: 50%\r\nCombination of both written exercises from Weiss's Data Structures in Java and programming projects. DO NOT PROCRASTINATE! Due every 2-2.5 weeks. Total of about 5-6 homework assignments (there were six this semester, but he only took the top 5 scores - the last was somewhat optional)\r\n\r\nMidterm: 20%\r\nUnlike the multiple-choice exams in 1004, the exams either require you to write a short answer, pseudocode, a short Java method, or walk through an algorithm (e.g. Dijkstra's) step-by-step. If you pay attention in class and study your notes/book, there should be no surprises.\r\n\r\nFinal: 30%\r\nSimilar to midterm, except longer. "
    }, 
    {
      "course_ids": [
        4
      ], 
      "created": "Mon, 05 Jan 2015 04:59:10 GMT", 
      "id": 78250, 
      "professor_ids": [
        3409
      ], 
      "review_text": "Professor Blaer is a great instructor. He is clear, able to command a large lecture hall without much trouble, and able to explain concepts in a fairly simple manner. I honestly don't understand why some people chose not to attend this class because I found the book to be average at explaining concepts, while I found Professor Blaer to be exceptional at explaining the material. I rarely referred to the book after his lectures because I either understood the material from his lecture, or was able to understand is after digesting my notes. I think this is a sign of a great teacher. \r\n\r\nEven in a 200+ person class, Blaer was able to captivate the room with his large voice and abundant personality. In addition, he managed to encourage student participation, which kept the class interactive and engaging. In addition, occasionally, Professor Blaer would drive home the importance of a particular concept with a story about his research, which usually involved a hilarious and catastrophic ending involving multi-ton robots ramming into buildings or almost running people over. \r\n\r\nProfessor Blaer's exams are fairly straightforward and he essentially tells you about 50% of the exam, so these are fairly low stress endeavors. I found the final harder than the midterm, but still fairly straightforward. Not much to worry about here. \r\n\r\nMy only complaint with Professor Blaer is an organizational complaint. He would usually claim he would post the HW by a certain date and note post it till 3 or 4 days afterwards. He also granted classwide extensions in unecesarry situations which made the last HW assigned and due during reading week, which was poor planning on his part. Lastly, I feel that the first 15 minutes of class, where students as clarification questions on the HW, is a waste of time. If he wrote his questions in a less ambiguous manner, and used this class time to teach more material, that would be more efficient. Apart from those organization things, I can't complain about this professor. I would recommend his class to anyone in a heartbeat. ", 
      "workload_text": "6 HW Assignments, top 5 counted. (50%)\r\nMidterm Exam (20%)\r\nFinal Exam (30%)"
    },
    {
      "course_ids": [
        4758
      ], 
      "created": "Sat, 13 Apr 2002 00:00:00 GMT", 
      "id": 2229, 
      "professor_ids": [
        350
      ], 
      "review_text": "This class is supposed to replace Softe, and from the initial looks of the syllabus, it seems very worthy. This is the first time it was given, so expect some changes, but it covers a bunch of real tools in the marketplace, such as BASH, C, XML, SOAP, RPM, TKL, among many others. Its also apparently looked at as a precursor to Operating Systems for students who like to focus on coding instead of the theories behind it. What happens as the semester goes on, however, is that the usefullness of the subjects as they're taught varies inversely with their actual importance in the \"real world\". The class ends up wandering aimlessly as Schulzrinne simply presents bits and pieces of each subject through his powerpoint presentations. Then when homeworks come around, they're often on subjects hardly covered in class, and you're expected to google your way to tutorials provided elsewhere. This is especially the case with XML/Java (an very active & useful topic), where a few scant lecture slides leave you with nothing useful for the homework, and you end up learning it as though you're not even in a class that's supposed to teach it! Oreilly books to the rescue! When Schulzrinne ventures into talking about the marketplace of OpenSource vs PeopleSoft vs Proprietary and the like its like reading a weeks worth of slashdot. It occured to me that the people that are the most interesting to listen to on those subjects are out in the industry actually shaping their fates, not in the classroom. The bottom line is that, common to other Schulzrinne reviews on CULPA, he expects you to learn it based largely on unspecified non-class materials. And common to most all CS classes I've taken, the HWs serve as a good lesson in doing the HW, not necessarily in learning the subject (to be fair, the C assignments were a bit better as we spent about 5 weeks with it). I finish each one thinking about how next time I have to use whatever tool I'm going to have to learn the syntax mostly from the beginning anyway. The syllabus will probably improve after it gets reviewed a couple times, but the core experience is not much more educational than getting a linux machine and playing with these technologies on your own time. The only difference is that here you'll get a grade and 3 credits for it. I don't know if its better than softe, but from conversations I've had with friends it sure sounds like there's significantly less work and stress.", 
      "workload_text": "The 10 homeworks vary from 2 hours to 20 hours. Unfocused just like the class; some theory, some coding, a lot of google-searching. Be sure to buy the Ritchie C Programming Language book even though its not listed. Exams are fairly tough. One question on the midterm was to write out a syntactically correct malloc() function in C by hand in ~20 minutes. Yikes!"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Fri, 03 May 2002 00:00:00 GMT", 
      "id": 2454, 
      "professor_ids": [
        350
      ], 
      "review_text": "Despite the grumbling from other people in the class, I found this class very valuable. As a graduating senior heading out into the computer science workforce, I found the presentation of a broad range of topics very helpful. Though Prof. Shulzrinne didn't have time to go into great depth about any one topic (except maybe C programming), I felt that the overviews given (along with references to website where we could get more info) gave me a much better understanding of the tools & languages that are out there and what can be done with them. Other people in the class hated how we had to go searching for documentation around the web to find how to do certain things, but I thought it was actually very good preparation for the \"real world\" of software development jobs, where research of this kind is an essential part of the job. The class was taught exclusively with PowerPoint slides, which at times were the same as reading \"man\" pages, but Prof. Schulzrinne did provide a lot more related information in class (i.e. go to class). I don't know if the class really should be a replacement for softe, because (having taken that prior to this course), I found they were both useful, and that students will probably get more out of AP if it is taken after softe. Finally, and maybe most importantly, I need to commend Prof. Schulzrinne on his accessiblity (via e-mail). He answered all of the [many] questions that came to the e-mail mailing list, and always seemed to reply to e-mails very quickly. How many other professors do you know who would write back to you within an hour when you send an e-mail to him at 12:05 AM on a Saturday morning??", 
      "workload_text": "9 Homework, with approximately 2 weeks to do each (each one overlaps the previous by one week) Midterm and final."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Fri, 15 Nov 2002 00:00:00 GMT", 
      "id": 3441, 
      "professor_ids": [
        766
      ], 
      "review_text": "Prof. Sklar is invested in her class and respects the delicate line between challenging vs. overwhelming students. She actually wants student feedback and because of this she doesn't undermine the integrity of the class. A rare thing in cs, there is no one \"holding the grade cards\" except the students, whose participartion is equally proportional to the grade. Her exams and assignments can be fun and will never cover anything that wasn't presented or isn't relatively easy to look up (but plan on taking the time to do so). When she makes a mistake, she compensates and makes sure it is cleared up. She is also extremely organized and even tries as best as she can to pick up the TA slack. ", 
      "workload_text": "The work load is moderate and expect to spend a lot of time on each assignment. They build on each other, so if one doesn't work out by the time its due, fix it quickly before the next one is."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 18 Nov 2002 00:00:00 GMT", 
      "id": 3469, 
      "professor_ids": [
        766
      ], 
      "review_text": "I cannot think of another class I left so often thinking, \"what?\"... too much information taught way too quickly by a professor who assumes you know more than you do and who does not use a microphone in a large lecture classroom. She means well, and does care about what the students think, but her teaching is less than what one would hope... she thought that writing out a long java program using servers and clients would show us how to write servers and clients in java, but while giving us the code offers us the opportunity for rote memorization, it does not show you HOW to get that solution. And instead of teaching us C++ which would have actually built off of our knowledge of C, she tried to teach us CGI in one day, javascript in one day... you get the idea. Of course it isn't entirely her fault that there is too much information in too short a time. This class was a bad, bad idea. The only perk is that the game, once done and all unnecessary elements for the purposes of the homework are removed, will probably be cute. Oh, and she had the TAs teach us parts of the class we were responsible for exclusively in recitation -- bad idea... some TAs were good, but most were, well, not good.", 
      "workload_text": "You have to create an \"educational game\" over the course of the semester. It is supposed to progress over the course of the semester, but instead each new homework includes assignments totally unnecessary to the functioning of the game, whose sole purpose is to show that you can do what was taught in class recently. Long assignments. Some hard quizzes too, the number of which changes over the course of the semester."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 02 Dec 2002 00:00:00 GMT", 
      "id": 3665, 
      "professor_ids": [
        766
      ], 
      "review_text": "First of all, it's a required course for SEAS students so many of you can't really get around it. The point of reviewing this course is more to alert students who are going take it to some of the difficulties they may face (she's teaching it again Spring 2003). That said, Prof. Sklar is not a bad teacher--not at all, especially when compared to many other SEAS and Physics/Chem/Math professors. For the most part she means well and is quite flexible and open. I think the main problem with the course was the overly aggressive syllabus--which has more to do with the CS department and the unfortunate fact that it is pretty much still experimental than with Prof. Sklar herself. Officially, the course is to \"better prepare students for courses like OS and Networks\". However I felt it was trying to cover such and such topics just so that the department can suppose we know them when in reality we only know _about_ them. _In short, in this class the syllabus is more important than you_. As with most other CS classes, there are some very prepared people with extensive C and UNIX and internet programming backgrounds who find the course and the lectures a joke. The ultra-motivated student with a lot of time in their hands may enjoy the \"sink-or-swim-ness\" by swimming very hard and doing a lot of reading and experimenting on their own. The average student may also do well by doing the bare minimum and choosing cheesy ways out in programming assignments but will unlikely feel satisfied with the experience.", 
      "workload_text": "The multiple quizes in place of midterm+final are intended to ease students' pressure but they end up feeling like multiple midterms because everyone studies so hard for them and Prof. Sklar invariably puts some obscure, tricky questions in them. However, I do agree that the lack of a final is a great thing. HWs take a long time but are not necessarily difficult, especially if you don't mind taking cheesy ways out. But, again, you may feel unhappy with your lack of fluency in the few new languages you have just learnt that limits the creativity and fun (however little fun there may be) of the programming experience."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 16 Jan 2003 00:00:00 GMT", 
      "id": 4382, 
      "professor_ids": [
        766
      ], 
      "review_text": "Professor Sklar actually speaks English well enough to explain herself to her students. That right there puts her ahead of all but 3 or 4 CS professors. The fact that she makes class interesting, that she genuinely cares about her students, and believes in the department enough to take on an insane workload because she knew students needed her? That's just icing on the cake. In a department bereft of professors who care about education, and filled with academics who manage to make simple addition incredibly difficult, Professor Sklar is a breath of a fresh air. \nIt's probably unfair to judge her based on the frenetic chaos that was AP; it was thrust on her in August, and it was a doomed course even before then. She's teaching it again this Spring, and here's hoping that she could figure out what the hell this course is actually supposed to do. The department certainly picked the right professor", 
      "workload_text": "Ambitious, but doable: 5 homework programs. Two were stupidly easy, two were moderate, and the last one was incredibly hard. Do them on time, as the homeworks build on each other, and you don't want to spend your time fixing old homeworks when the next one is due."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 20 Jan 2003 00:00:00 GMT", 
      "id": 4478, 
      "professor_ids": [
        766
      ], 
      "review_text": "As much as people may say that AP was a disaster from the start because the CS dept messed it up, Sklar did not in any way help the situation.  I learned absolutely NOTHING from her in this class.  She wasted half of the class time writing code on the board, which could have been printed or posted online to the same effect.  The rest of the time she read her useless slides, which were posted online.  The best thing to do was to skip all classes and learn any new material by searching for it on google.", 
      "workload_text": "Not bad.  Mostly ridiculously easy hw assignments, with the exception of the last one which really should have been called a giant project and not a hw."
    }, 
    {}, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sun, 12 Sep 2004 00:00:00 GMT", 
      "id": 9439, 
      "professor_ids": [
        2172
      ], 
      "review_text": "Suhit is a great guy who is always willing to help and has creative ideas for making a boring course a lot more interesting, esp. with developing a challenging but useful project to work on throughout the course. Unfortunitly for me it was a little to tough at times. But he really puts forth his absolute best effort to every student and is an upstanding guy. I don't know if I would suggest taking a 4 credit class at all over the summer, but if you have to you would be lucky to do it with him. I actually enjoyed the course a lot more then i expected. He is a phd student, but i hope he gets a chance to teach a real semester course where he doesn't have to cram all his ideas into a short time frame. ", 
      "workload_text": "One uber large uber hard project, and a buch of lab projects, also hard, but doable. Its ap, dont expect a breeze. Write the code."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Tue, 28 Dec 2004 00:00:00 GMT", 
      "id": 10324, 
      "professor_ids": [
        766
      ], 
      "review_text": "This class wasn't too hard, but BEWARE if you're not a cs major.  I thought I was doing OK throughout the semester, and I got quite a shock when i received my final grade. the class was not curved AT ALL. If you don't REALLY know your stuff, you won't even get a B in this class. ", 
      "workload_text": "5 hw assignments, 3 tests, 10 labs"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sun, 02 Jan 2005 00:00:00 GMT", 
      "id": 10635, 
      "professor_ids": [
        766
      ], 
      "review_text": "This semester, we were told that the course was to be \"watered down.\"  I see that all of the other CULPA Advanced Programming reviews talk about how they always had to Google stuff, but I only had to Google stuff once in a while.  We covered C, Perl, PHP, a little UNIX/shell scripts, and C++.  I had lab in 9 in the morning, so I would cut it often, but going to them makes you get the labs done faster (for the same reason you get HW done faster at a library).  The course is not curved, but that's a good thing; I think the average is around an A- (although no A+'s are given).\n\nI'm glad I didn't have to constantly Google stuff like the previous reviewers did, but the class was still -literally- a waste of time.  If you can get notes (and if you can't, there are abbreviated versions posted online), and lab handouts from a friend, you'll do fine by attending neither lecture nor lab.  The lecture does not teach you anything you can't learn by reading a handout.", 
      "workload_text": "10 labs (30%), 4 HW (45%), midterms are 10% each, multiple choice final is 5%."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Fri, 07 Jan 2005 00:00:00 GMT", 
      "id": 10961, 
      "professor_ids": [
        766
      ], 
      "review_text": "Professor Sklar is a wonderful teacher--extraordinarily helpful and kind and a clear lecturer. However, Advanced Programming does not live up to expectations--it's more of an Intro to Programming in Several Different Languages (and it may even be easer than 1007). It doesn't go enough in-depth into the subjects it covers, and the assignments aren't especially challenging. Covers basic C/C++, PERL, PHP, and Unix tools. ", 
      "workload_text": "Light. Weekly labs that take two hours, and 4 homework assignments over the course of the term. 3 exams whose  averages range from 75-85. No curve, but the emphasis is on the labs and homeworks, so grades are very generous."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 28 Mar 2005 00:00:00 GMT", 
      "id": 11645, 
      "professor_ids": [
        766
      ], 
      "review_text": "I have to dissagree with what other majors have been saying about this course, if not what they have been saying about Professor Sklar. Professor Sklar is the nicest person in the world and will do everything in her power to help you if you actually go to her. She is pretty quiet, and won't come to you, even if she thinks you're doing badly. If seek her out though, I have never seen a professor go to such lengths to help her students. She even has an aim sn just to help students on the nights before big assignments are due. She is usually a little bit late everywhere but she's a fine lecturer and presents the material she has to present clearly (ps people complaining about her writing code on the board a lot, all of the code up there is usually on the website). \nThe class however, is a complete nightmare. None of the annoying weekly labs are that hard, and the homeworks are definitely resonable, but you switch languages every week. I suppose if you really know you're stuff (ie you've programmed in pretty much all of the languages others have mentioned some before) you can skip a bunch of the lectures and labs and do fine in the class. However, even if you're a major, if you're just taking the class right after 1007/1004 you're going to be in pain (even if you did well, I got an A in 1007). And looking up syntax/googling everything for all of the assignments all all the time. The department is pretty ridiculous to expect second semester majors with limited experience to do very well in the course. \nMoral of the story: unless you're programmer extraordinare go to office hours and make lots of friends you can run to at 3am for help", 
      "workload_text": "theoretically light but actually time-consuming: weekly labs(so annoying), 4 homework assignments (usually 2 of which are huge, and you will be made to parse in all of them), 2 midterms and a final"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 20 Dec 2006 00:00:00 GMT", 
      "id": 17023, 
      "professor_ids": [
        1671
      ], 
      "review_text": "In summary: He's a hack! I'm staying out of an honors section of Data Structures next term just to avoid him.\n\nHe knows very little about the languages he teaches, and when confronted with a mistake, claims it \"used to work that way.\" That might work once or twice, but there's no way that, say, shift() didn't modify an array in the good old days of Perl. It's more likely that you don't know what you're talking about.\n\nLectures are unbearable, riddled with typos, and full of stupid jokes. You'll spend half this class doing ridiculous things like implementing simple CGI scripts in C++, so it takes hours of drudgery, after you've already been taught Perl. Then he'll pick apart your programs when they don't follow requirements that weren't listed on the assignment.\n\nOn the plus side, you don't have to go to half the classes -- but you do have to go to the labs, because he doesn't post them on the website! So show up, take the paper, leave, and feel better about yourself for not having sat in the lab for two hours.", 
      "workload_text": "Weekly labs (easy), three homework assignments (easy but long), and a final. This term there was no midterm. Grading is not exactly harsh.\n\nAlso, you need a CS department account (probably for the first time), which runs you fifty bucks."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 14 May 2007 00:00:00 GMT", 
      "id": 19939, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Good professor overall. Taught all the relevant bits that you would expect in an Adv. Programming class. Fairly entertaining and informative in class, and very helpful outside of class. Pretty flexible when one desires an extension. Majority of the grading done by the TAs, but reasonable overall.\n\nHomework assignments and labs tend to be relatively easy but some of them took quite a while to do.\n\nRecommended, overall.", 
      "workload_text": "3 HW assignments, weekly labs, midterm, final."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sat, 22 Dec 2007 00:00:00 GMT", 
      "id": 20654, 
      "professor_ids": [
        1472
      ], 
      "review_text": "I would not be writing this review if not for the spectacularly bad experience I had taking Prof. Keromytis class. I found his lectures unispired and generally incoherent. For a programming course I find it important to be given examples but his lecture slides were what seems like incomplete ideas carelessly put together so that there would be a semblance of a lecture note. I later found out most of the slides were taken straight off of books, other websites, man pages, etc. As a matter of fact the only good lectures were those where we had guest lecturers.\n\nHe tended to be somewhat condescending in reponse to questions and requests and I got the impression that he was intentionally misinterpreting the question to make you dumb when in fact that was not the question at all.\n\nHis labs and homeworks were generally repetitive and again uninspiring. Many of the labs and homeworks were repetitions of one another or just annoyingly tedious...sort of like asking someone to do long division to the 100th decimals.\nOverall, the worst CS class I've ever taken in my life.", 
      "workload_text": "3 homeworks, 10 labs, midterm, final\nnotably the midterm and the final were done in the CLIC lab. The final was absurdly long and asked us to program something that we dealt with tangentially. Little did I know that network security was one of his main interests."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 10 Dec 2008 21:03:57 GMT", 
      "id": 21659, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae does an excellent job making this class interesting and informative. He learns everyone's names and is always helpfully giving extensions for every lab assignment and responding to the class email. I learned a lot about how unix worked and how to write good c programs, including completion of a web server. The assignments are well thought out to build and each other and simulate real life programs.", 
      "workload_text": "Light reading with programming due every week to two weeks. Assignments take a while but if you listen in lectures should be fairly easy."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 30 Apr 2009 20:05:14 GMT", 
      "id": 22643, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae's lectures are always interesting, sometimes funny, and certainly relevant and helpful for completing the lab projects. Though many of the projects are rather time-consuming, they are all quite easy if one pays attention in lecture, reads Jae's lecture notes, asks questions on the mailing list, or goes to TA office hours. Jae is sympathetic to students' difficulties due to external influences and sometimes gives class-wide extensions on the projects.\r\n\r\nThe curriculum is a quick (but thorough) overview of C, C++, and UNIX programming and is very good preparation for many of the advanced CS courses.\r\nThere are 10 lab projects (one is optional), each of which one has about a week to complete (before the inevitable extension), and a final exam.", 
      "workload_text": "Light reading (though you can skim)\r\n10 lab projects (each can take several hours)\r\nFinal exam (40% of the grade)"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 13 May 2009 20:09:01 GMT", 
      "id": 22755, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae is the best teacher I have ever had, hands down, and definitely golden nugget-worthy. He is knowledgeable and approachable. He will never hesitate to review a concept that anyone is having trouble with and his explanations are unfailingly clear and highly informative. There are two required textbooks for the course, but most of us rarely had to crack either open since his syllabus and teaching ability are so great. One of the things I particularly liked was that he set up a mailing list at the beginning of the semester in which anyone could ask him, the TAs, and our peers to clarify concepts, etc. - this was extremely helpful, particularly for the labs.\r\nHe is always understanding of his students' tight schedules and tries to be flexible by granting class-wide extensions for the labs. This gets to be a little excessive by the end of the semester, and you start to depend on the high probability that you will have more time to finish the assignment, and here's a tip that took me ages to figure out: DONT!\r\nThe course covers the C programming language in depth, offers a good introduction to the UNIX environment, as well as an introduction to C++. However, he designs his lectures and labs to offer sufficient background for a variety of higher-level CS courses, so you will learn a lot more than that!\r\nAs Jae said at the beginning of the semester, his goal in this course is to take \"programming students\" and turn them into \"programmers\", and I believe he did just that.", 
      "workload_text": "10 labs (programming assignments), very time consuming, one of them is optional\r\n1 final, difficult"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Fri, 26 Jun 2009 18:24:15 GMT", 
      "id": 22993, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae is a God. No, not just a god, he is a Three-Wolf-Moon shirt on steroids. Not only does he know his stuff, he knows how to teach it. Granted, this was the hardest class I'd ever taken in my life, but the long hours of work and sleepless nights have made me into a better programmer and students. \r\n\r\nThere is a reason as to why people were basically begging him to revive the Data Structures in C class and teach it also; he was just *that* good. The classes were engaging, he would answer any question and repeat things as necessary, and really wanted to stress it all so we would understand, even if we had to go through  it multiple times. \r\n\r\nThe most lovely thing about this class is the listserv; through email, all students in the class could give advice and help each other on the homework (code-free of course!). \r\n\r\nWriting your own web server was daunting but once you're done, you'll be amazed at what you've been able to accomplish. He is professor material, for sure. Columbia, be smart and make him a prof with automatic tenure; our Computer Science department needs more wonderful people like him. ", 
      "workload_text": "10 labs, 1 optional and for use as a make-up. Start the labs early; they take hours and days to finish. No midterm this semester but others have been different. Prepare for a butt kicking in the final. \r\n\r\nMultiple TA's are available to help you with your homework; the office hours are worth every minute!"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 05 May 2010 21:51:40 GMT", 
      "id": 24271, 
      "professor_ids": [
        1671
      ], 
      "review_text": "One of the worst CS professors!\r\n\r\nThe good:\r\n1. He's fairly nice and approachable, but I think most professors are friendly, so he isn't out of the ordinary.\r\n2. He gives homework extensions to anyone who asks for them and for almost any reason. If you need more time, you have it (but this is also a con, see below).\r\n3. Pretty easy\r\n.... that's about it.\r\n\r\nThe bad:\r\n1. Extensions that *everyone* abuses. I'm ok with giving homework extensions if people are sick, but I had friends who purposely abused the system and took advantage of him, which is unfair to people like me who did homework on time. It's quite ridiculous when people turn in homework a month late with no penalty.\r\n2. Typos. He can't even add. The points on the homework never add up and his slides are full of errors.\r\n3. Boring! He teaches from slides and doesn't engage students well. I fall asleep (it was a 9 am class though)\r\n4. Useless homework. Most assignments are pointless and not useful. You won't get much out of the course, except learning how to debug webthumb. What's that you say? Exactly - pointless! Those who took the class know what I'm talking about. \r\n5. Lack of communication. He doesn't communicate with students well, and I heard that he never really speaks to the TAs, who grade the homework, so they are a bit confused and grading is sometimes inconsistent.\r\n6. Perl - pointless\r\n7. Almost every assignment is a CGI program -- never useful outside of this class\r\n\r\nOverall, he's just a mess. It doesn't seem like he puts much time into teaching. You'll probably do fairly well in the course (at least B+), but you won't get anything out of it. Avoid this prof and take it with Jae, who is actually useful and on top of his shit. I heard Jae is harder, but it's worth it for a class like this!", 
      "workload_text": "Easy for 4 credits... 8 relatively easy labs (about 1 every other week). 2 longer homework assignments with a partner (the only somewhat interesting assignments). Final.  (no midterm)"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Tue, 18 May 2010 03:30:42 GMT", 
      "id": 24457, 
      "professor_ids": [
        1671
      ], 
      "review_text": "This class was the subject of the nastiest official course evaluation I've ever written. I put almost exactly these notes in the little box on Courseworks, and I fervently pray that somebody in the department reads them.\r\n\r\nI feel bad for Prof. Hershkop. I really do. The way this course is designed -- or, at least, the way he seems to envision it -- it's impossible for an ordinary mortal to teach (Jae Lee, I'm told by his rapturous former students, is made of a different stuff than the rest of us, but that's a discussion for another day). 3157 requires its instructors to have an intimate knowledge of C, C++, make, Perl, Ruby, HTML, CSS, HTTP, CGI, memory, security, obscurity, etc. Not an impossible list of things to learn, but for somebody whose real work only deals with two or three of them, perhaps a bit unreasonable.\r\n\r\nDear Shlomo, unfortunately, isn't up to the task. His knowledge of web standards seems to end in about 1998 (he suggested that a problem with one of my labs, ultimately traced to bad server configuration, was because I wrote my newlines as &lt;br /&gt; rather than &lt;br&gt;). Ditto stylesheets. As for the unfortunate Ruby / RoR lecture, he was forced to resort to a mortifying game of \"spot-the-error\" with the class to cover up for the fact that he was completely clueless about variable scope in Rails controllers. Not everything was wasted -- I feel like I have a pretty solid knowledge of Perl, and the course was a useful C / C++ refresher for me.\r\n\r\nBut my real problem is this: He loves webapps, but in an effort to come up with \"applications\" for the things we learn in class, Prof. Hershkop assigns projects that actively encourage VERY BAD DESIGN PRACTICES.\r\n\r\nFor example: In order to avoid adding a brief intro to relational databases to the already-groaning syllabus, students are encouraged to do everything with flat file databases. Nobody even mentions the fact that this is fundamentally unscalable.\r\n\r\nFor example: The entire second project required us to write vast numbers of CGI scripts in C++. Hardly anybody uses CGI anymore, and they sure as hell don't write the scripts in C++ when they do.\r\n\r\nFor example: Some of the labs instructed us to write Makefile jobs not to compile our code, but to run it.\r\n\r\nFor example: we were forced to repeatedly work with a nasty little script called webthumb. At this very moment, there are a hundred copies of Firefox running in a hundred X server sessions spawned by a hundred instances of webthumb because some poor sod never found all the bugs in his copy of webthumb. There are many better ways to do this, but apparently part of being an Advanced Programmer is remaining wedded to long-dead technologies, even when superior alternatives exist.\r\n\r\nI could go on, but I hope my point is clear. I think there is a place for this class within the CS major, but it needs to be slimmed down, modernized and a little less webapp-happy.", 
      "workload_text": "Fairly reasonable. Despite strenuous protestations to the contrary you really don't need to go to lab. Come to think of it, the lectures were similarly unhelpful so you really don't need to go to this class at all. Labs are not time-consuming, but homeworks are, so make sure you budget ahead. Then again, Prof. Hershkop will grant an extension for any assignment, at any time, so don't stress the planning too much either."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 29 Dec 2010 16:44:26 GMT", 
      "id": 25273, 
      "professor_ids": [
        1472
      ], 
      "review_text": "I'll be blunt: Angelos Keromytis is not a good instructor. He might be pretty smart and know his stuff, but he just has no idea how to be a professor (sometimes literally; there was a period of 5 or 6 classes where I didn't see him at all and the TAs taught both the lab and lecture classes). \r\n\r\nA good professor spends time crafting detailed but concise slides with concrete, succinct examples; Keromytis copies code off the web and pastes them into his slides as if they were his own. (Seriously, Google the code. You'll find the exact same contrived examples online that only seldom work; most of the time they'll only serve as basic skeletons of what you need to do to get your code to compile.)\r\n\r\nA good professor is welcoming and encourages student participation and questions; Keromytis is intimidating and sometimes even humiliates students. For example, about 3/4ths of the way through the course, when a student wasn't sure how to change permissions on a file, instead of replying something reproaching but nevertheless sane such as, \"Use the chmod command, as we've been doing for the past two months,\" Keromytis responded, \"Are you kidding? You're kidding, right?\" This is not a good way to encourage students to keep asking questions. As if asking questions helped most of the time (see next paragraph).\r\n\r\nA good professor teaches and presents students concepts and ideas; Keromytis' ego comes across more than his material, and when asked questions, tells you to just look at the man page. Due to both the nature of this course and the professor's incomplete slide examples and his poor teaching abilities, you'll have a lot of questions about what to do. However, half the time when asked something about a particular C function or paradigm, either on Courseworks discussions or in class, Keromytis will just tell you to refer to the man page. While I understand that this class is supposed to mold you into a competent programmer who is fearless of elaborate technical documentation, there is something worthwhile about having a human being explain something to you rather than just reading it online or on a man page, and a good professor shouldn't just tell you to refer to something else nearly all the time. ..Although this professor might be an exception. I feel like I've learned more through Stack Overflow than Keromytis could ever hope of teaching me.\r\n\r\nIn the end, the only saving grace in this class were the two TAs. They seem to be the only ones that cared about us. They would take the time to read through our code line-by-line, helping us find bugs, and they would actually help clarify concepts. Their accents were a bit hard to get through at first, and the English and grammar in the assignments were sometimes confusing (since they wrote them all), but they mean no harm and will gladly clarify if you ask. Not to mention if you write to them about a specific bad grade you received and give reasonable arguments for why you think you deserved more credit, they will entertain your request, and if you present a good enough argument, this usually entails you getting at least one or two points back.\r\n\r\nI might sound bitter, but don't think this is because I got a bad grade. I didn't. Keromytis is just an astoundingly poor specimen of a professor. I got a good grade in the class, but it was due to my own hard work and the hours I put into labs and homeworks. I wish I could say Keromytis helped me along the way. I can't.", 
      "workload_text": "Heavy. 1 \"lab\" (i.e., homeworks) per week that takes on average 4-6 hours (extremes were around 8-10). 3 \"homeworks\" (i.e., longer projects) thoughout the semester. The first one was intense and took some time, but the following two felt like they could have been labs and were much shorter. Note however: you will be pressed for time throughout the course. You need to eat, sleep, and breathe Advanced Programming (especially if you take it concurrently with Data Structures--a poor choice, in my opinion. Both have heavy workloads). Whenever you have spare time, work on your lab and homework. Especially during weeks when homeworks are due, since these would often be due 2-3 days after a lab, in order to keep the labs on schedule.\r\n\r\nMidterm and final are both in the CLIC lab and are programming assignments. Midterm was doable (avg 68%) but final was difficult (avg 59%). It had two parts, one in C and one in PHP. The C part relied on one concept we learned for basically one lecture, and if this didn't work, the entire part wouldn't work. Protip for exams: when you reach bottlenecks like this, stop messing with it and spend your time wisely by coding other features, even though they may not be testable due to the aforementioned bottleneck. If your code is right, you'll at least get a few points for it. "
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Fri, 15 Apr 2011 01:26:23 GMT", 
      "id": 25747, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Taking Advanced Programming with Shlomo in the second semester of my Freshman Year was an awful idea. Shlomo himself is not a horrible teacher. He is funny and personable. Just don't expect him to ever respond to your emails. \r\n\r\nThe main problem with the course is the way the curriculum is structured. I decided to take the class because I wanted to learn C and C++ before going into my internship for the summer. Little did I know that most of the class would be perl, perl, and more perl. Out of the 10 labs for that class, six were about perl, two were about C, and two were about C++. \r\n\r\nThe only things he really covered about C were pointers and memory management. Obviously, good memory management is important and one of the trickiest parts of programming in C, but I really wish we went more in-depth. \r\n\r\nMost of the labs on perl centered around CGI programming, which is kind of pointless nowadays unless you're going to work for Amazon. There were also CGI parts to the C and C++ labs, which is even more pointless. If you are a Computer Engineering major like me or are on the systems track for CS, I highly suggest that you wait until someone else is teaching it. \r\n\r\n", 
      "workload_text": "Not that bad. The labs generally don't take that long, and Shlomo is rather liberal in granting extensions. The projects take a long time, so make sure that you get an early start on them or you will be spending long nights in the CLIC Lab. "
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 05 May 2011 21:11:16 GMT", 
      "id": 25867, 
      "professor_ids": [
        1671
      ], 
      "review_text": "Not only was this the worst CS class I have taken at Columbia, it was the worst class I have taken in any department at Columbia.\r\n\r\nProf. Hershkop doesn't plan his syllabus in advance at all, and he pays almost no attention to this class. For example, he promised for weeks on end to set up virtual servers for the group projects. In the end, he never did (nor did he tell the class that he had changed his mind, so some students were left hanging). Since we had no virtual servers, the only way for us to collaborate on the projects was for one partner to give the other his password(!). \r\n\r\nWorse, the projects are built to encourage horrible programming practices. He doesn't just allow them - he encourages and sometimes requires them. For example: we store our data in flat text files, rather than databases. For example: \r\n\r\n1. We were not allowed to use 'make install' to install external modules; we had to move the files into place manually. \r\n2. We were not allowed to use MOOSE to do object-oriented programming in Perl (because he 'didn't want to have to learn MOOSE'). Forget that nowadays all Perl object-oriented programming uses MOOSE.\r\n3. For example: we were told to use C/C++ to implement CGI scripts (which are themselves outdated), instead of using Perl, which we had already learned. C is the only language that doesn't support strings natively, so why would string manipulation be our first introduction to C, as well as our only major project in C?\r\n4. We were essentially prevented from using version control for the group project, as well as the individual assignments.\r\n\r\nIt doesn't help that the syllabus was last revised in 1995. There is no reason to be teaching Perl anymore - and if it should be taught, we shouldn't be spending more than half the semester on it (as we did). If CGI scripts are believed relevant (which they really aren't), then they shouldn't be written in C. Webthumb is a script that nobody has used outside the Columbia CS curriculum since 1997. This is supposed to be the class where you learn about important tools like version control, shell scripting, and the like. In Hershkop's class, you'll learn none of these. \r\n\r\nGrading is slow to the point of providing no useful feedback whatsoever. By the time you get each lab back, you'll have turned in three more. I'll be surprised if we get the grades for the midterm project before we take the final (which looks unlikely at this point).\r\n\r\nIn short, there was nothing redeeming about this class. Prof. Hershkop takes an imperfect syllabus and manages to make it even worse. It's clear that he doesn't put much thought into the class - most of the time on the assignments is spent trying to debug the typos in his sample code.\r\n\r\n\r\nDijkstra once said, 'The teaching of BASIC should be rated as a criminal offence: it mutilates the mind beyond recovery'. But if you ever have the chance to learn BASIC as an alternative to taking this class, by all means, go for it. It'll damage your programming career less than Hershkop's class would.", 
      "workload_text": "9 labs (the last one was supposed to be optional, but in typical Hershkop style, he changed his mind at the last minute). The first two are easy, and the remainder are easy but incredibly time-consuming. Don't be surprised if the Webthumb assignment takes 30 hours or more. Most of the time isn't programming; it's debugging the sample code that Hershkop provides (or the buggy external modules that he forces you to use).\r\n\r\n2 projects. The first was originally supposed to be due during spring break, but then he (as usual) extended it twice, by a week each time. The first time, he told us a week before, the second time he told us a day before. Because you have to work on it over spring break, don't expect the TAs (or professor) to respond to the discussion board, or to emails. And don't wait for him to enable virtual servers - he never will.\r\n\r\nNo midterm, but there is a final."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sun, 22 May 2011 12:17:43 GMT", 
      "id": 26147, 
      "professor_ids": [
        1671
      ], 
      "review_text": "So having read the below reviews, I tend to agree. So instead of harping on the bad, I'm going to talk about the things that were ok with the class. Give me a break, the TSA was a bit slow so I missed my flight, so I'm burning time until my next one.\r\n\r\nShlomo, is an interesting character. I don't know what his method of teaching is. Some (actually most) would say there really is no teaching being done, and going to class is just to find out what things you have to go on the internet/break open the books to learn yourself. This is completely true. Be prepared to scour the interwebs for tutorials and the sort if you are as unfamiliar to PERL and C as I was. \r\n\r\nOn to the class...\r\n\r\nThe class... was really what you made of it. I usually went to lecture because it was closer than my dorm from the class I had right before it. They were ok and I'm sure if I was the diligent notetaking type I would have gotten a little more out of the class than i did. But be prepared to get sidetracked, because like every lecture, there will be dumb questions being asked (once, some kid asked a question where the answer was literally on the slide we were on). Normally this isn't a big deal, but Shlomo has a tendency to stop and continue on that tangent. I think we've finished 3 lectures without him putting on a flipbook presentation of the last 20 slides in the 3 mins at the end of class. \r\n\r\nThe lab (not the assignments) was surprisingly enjoyable. I did spend much of my time there laughing and fumbling with the assignments, but having people there who ostensibly were there to help you was a tiny bit calming. Unfortunately, if you actually NEED help, then good luck. I'm sure the TAs are very capable programmers, but like most people who can do, they really can't teach. Take this with a grain of salt, as each year the TAs change. Shlomo, while he is there for maybe the first half of the term, goes AWOL when shit gets real in C.\r\n\r\nThe one awesome thing that I particularly enjoyed about Shlomo (no sarcasm) is that he is super lenient with deadlines. While some people are frustrated by the constant pushing back of assignments, trust me, you will be saved at least once by this.", 
      "workload_text": "Soul-sucking. Most of the assignments aren't bad, but some of them are just practices in frustration and the sort of thing you'd imagine a wise Shaolin master would give you to test your patience. Be prepared for major struggles with webthumb and for your sanity, do not leave the labs until the night before. I'm sure those who do can handle it, but seriously, why the f*** would you do that to yourself. Also, GET A HEADSTART ON YOUR PROJECTS. In lieu of a midterm, these two whoppers will be the second largest portion of your grade. Be prepared to devote large portions of your time you could be spending with lovely ladies and your WoW buddies (that's what the hip kids do now right?) to getting your shit to work if you decide to just stick with PERL and C for the projects. \r\n\r\nIn the end, when the light at the end of the tunnel hits your face like the doctor's light on a newborn baby's face, you can at least take solace in the fact that there will be much extra credit on the final (which almost seemed like a formality) and if you put your due diligence in the class, you can walk out with an awesome grade."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sat, 22 Oct 2011 21:00:37 GMT", 
      "id": 26425, 
      "professor_ids": [
        1671
      ], 
      "review_text": "I am writing this review a semester after I have taken the class... while at the end of taking Advanced Programming with Shlomo I was rather disappointed by the utter waste of time that taking AP with Shlomo is, it had not downed on me yet the ramifications that his class would have on my future studies.  \r\nAt the end of Shlomo's class you will not know C or C++, the most crucial element of AP, and one that you will regret for the rest of your stay at CU!\r\nIf possible, avoid Shlomo like the plague that he is!", 
      "workload_text": "9 lab - badly explained, useless for actually learning any skills, rather easy but time consuming\r\n1 final - joke"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Sun, 25 Dec 2011 22:58:54 GMT", 
      "id": 26735, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae was an okay teacher with a fair grading scheme, but I wouldn't say he was mind-blowingly spectacular. Take my review with a grain of salt, as I got senioritis halfway through the semester and never went to office hours.\r\n\r\nThe semester started out well enough, with a lot of good explanation of pointers, C syntax, etc. But as time went on, he started to fall behind in his lectures. As a result, the lectures were less focused on explaining and teaching material and more focused on explaining what you need to know for the labs.\r\n\r\nLabs also took a similar route. I started from knowing the functions I would need for the labs to Googling everything. Thankfully there's stackoverflow and cplusplus. He would also always extend the lab due dates to reasonable dates for everyone.\r\n\r\nTests were fair. He emphasizes that doing the labs on your own and understanding what's really going on will be the best preparation for the exams, and he means it. I didn't need to study much else beyond reviewing the lab solutions.\r\n\r\nJae also set up a course listserv in which he (Jae), the TAs, and the students could all participate. Anyone could ask or answer question, post articles related to computer science in general, etc. It's a good system, but you have to find a way to sort course e-mails from the rest of your inbox; the listserv totaled 766 e-mails throughout the semester.\r\n\r\nOverall, someone with any initiative and the ability to adapt to CS languages shouldn't have a problem with this course, and there's plenty of resources to help you along the way if you seek them out. But don't expect to come out with god-like programming skills. It's just a CS course.", 
      "workload_text": "10 labs, with lab 7 taking the longest time and lab 8 being truly optional\r\n1 midterm\r\n1 final"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 11 Jan 2012 21:52:49 GMT", 
      "id": 26895, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae is my idol. He is such a genuine, honest, and open teacher. Jae loves his subject and knows EVERYTHING about it. Jae was very responsive to student input regarding class administration. The only reason the class was because of students who took advantage of Jae's niceness and petitioned for extensions on every lab, nearly all of which were granted.\r\n\r\nI learned so much from this class. Judging from past CULPA reviews, it seems barely anyone has been able to do what has been deemed even a \"competent\" job teaching this course, so the fact that Jae made this class so useful and well-run while dealing with such a difficult course is a testament to his teaching ability. The bottom line is: if Jae is teaching Advanced Programming, you should take it with him. No other professor has been able to do even close to as good of a job.\r\n\r\nJae taught well, tested fairly, and is a generally awesome person. What more can you ask for? I wish every professor would be like Jae. Jae deserves his gold nugget rating.", 
      "workload_text": "typical CS workload. 10 lab assignments, one of which took a little longer (the climax of  building the web server), midterm and final based on labs. fair grading. good teaching. that's all you need, right? "
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Mon, 16 Jan 2012 11:22:16 GMT", 
      "id": 26926, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae was a good teacher who cared about the students and put efforts in teaching, but as previous review mentioned, not mind-blowing.\r\n\r\nHe covered the C language very thoroughly and did an excellent job in teaching pointers--which may be one of the hardest part of C syntax. However, he spent almost half of the semester just teaching C language and as a result, the rest of lectures (netcat, building a web server, C++, etc) were very rushed. Many of my friends who had no knowledge of how web servers work struggled. Example codes and other references were provided but was hard to consume even after attending Jae's lectures.\r\n\r\nGrading was fair since there was no partial credit on midterm or final, but because of that, it did not truly reflect how much a student understood the material. Median grade for almost all labs were perfect grade--so labs did not affect your grade that much if you're in the top 50%, the average grade for midterm was very high while the avg for final was around 60, which made the final exam the only differentiating factor of the grade for most of the students. Also, even though the final covered materials from about 6~7 labs, the test only focused on 2~3 labs and *everything* was one word answer with no description allowed--no coding, no partial credit, etc, which penalized students who \"almost got it\" very heavily.\r\n\r\nOne thing that made Jae's class great was its clean organization. The organization of lectures (order, increasing level of difficulty, etc), mailing list, rubric for grading each labs, lecture notes and lab manuals were all very useful and carefully crafted. Overall, it was a good class and I did learn quite a lot.", 
      "workload_text": "10 labs\r\n1 midterm\r\n1 final"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Tue, 17 Jan 2012 22:37:17 GMT", 
      "id": 26944, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jay was great.  The course started a little slow and could have gone faster on the non-programming parts.  Because of the slow start and the time we spent on make and git it felt rushed by the time we got to c++ at the end.  The lectures (always sent out) were really clear and full of examples.\r\n\r\nHe set up a mailing list that ended up answering most of the tricky problems in the class.  From the questions the people in the class were split with some people advanced and a lot starting from a very very basic level.  Sometimes the advice on the list was really helpful and in depth and sometimes it just gave the answer with no explanation (or the wrong answer).  One of the TAs (Arieh) seemed to be really good and on top of the list.\r\n\r\nIt might be good to offer a weekly recitation for people who feel theyre running behind, or offer a basic and honors section of the class.  ", 
      "workload_text": "10 labs (one optional).  One midterm and one final.  Midterm was mostly based on the labs.  The final was two parts, one based on a lab and the other on understanding C, pointers, etc."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 17 May 2012 17:27:11 GMT", 
      "id": 27368, 
      "professor_ids": [
        1671
      ], 
      "review_text": "DO NOT TAKE THIS CLASS WITH HERSHKOP. I'm not going to bother enumerating the reasons why. There are too many. The bottom line: he's incoherent, his lectures are a waste of time, and he doesn't go over really important concepts.\r\n\r\nThe upside, he's a super chill guy and very nice. This doesn't help when you can't figure out why your code won't compile, and it's ultimately becasue the code he requires you to use (and that he wrote) has a bug in it), or he forgot to tell you that one important details the you need to make your program run on the CLIC machines.\r\n\r\nThe TAs we had were fantastic, which made this class doable in the end. Somehow got an A+, but there is no way I deserved one (I guesss he's really generous with grading). I wouldn't hedge my bets on teh GPA boost, if I were you. Theer was no way to know before I got my grade that it would turn out so well. It honestly could have gone either way, and that's more because I had no idea what was going o in this class because of how unclear he was. I wanted to learn C and C++, and instead we spent 8 weeks on Perl. Just don't waste your time like I did. Take this class with someone who knows how to and wants to teach. ", 
      "workload_text": "A lot because the instructions are unclear and the code he gives is always buggy. Labs can take 10 hours because of this, when in reality the level of difficulty and length should require about 4 hours."
    }, 
    {
      "course_ids": [ 
        4758
      ], 
      "created": "Thu, 11 Oct 2012 14:24:29 GMT", 
      "id": 27577, 
      "professor_ids": [
        12357
      ], 
      "review_text": "Literally the best TA in the world.\r\n\r\nI've been fortunate enough to have him as a TA for three of my computer science courses, and every time I've needed help, he's been extremely responsive and helpful. He'll help you debug your code and patiently explain theory over and over if you need it.\r\n\r\nDon is very patient during office hours. He was also the only TA in my COMS 1004 course who wasn't trying to make us all get Cs. His TA office hours are always packed because it's pretty known what a great TA he is.\r\n\r\nI pretty much love him.", 
      "workload_text": "None, he's a TA."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 14 Nov 2012 21:39:47 GMT", 
      "id": 27633, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Jae's class is carefully thought out.  Assignments are meticulous and error free.  He actually teaches material in class.  So you will learn things from him instead of having to teach yourself everything.  The entire class is extremely well executed.  You learn a tremendous amount from working through the assignments.  The class is incredibly rewarding.\r\n\r\nJae is very detailed and his lecture notes are previded which are a wonderful summary of the book and his lectures.  He answers questions in class but does not get bogged down.  He moves through the material swiftly but does not gloss over things.\r\n\r\nI can't say enough good things about Jae and his course.  I feel lucky to have taken it.", 
      "workload_text": "10 assignments which are paced well.\r\nMidterm and Final which are difficult but not unreasonably written.  The material is all covered in class but the assignments and exams are challenging."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 20 Dec 2012 05:58:40 GMT", 
      "id": 27769, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Basically I was really excited to take this class because the other reviews were raving about Jae. When I saw he was teaching again after he got his PhD, I was like YES, and now at the end, I'm just like meh. \r\n\r\nWell, the start was good. He set up a listserv to encourage class participation where students could ask questions and interact with TAs and other students. Everything was explained slowly for people who have never been exposed to C, but then he started to get behind on his lectures. That was sort of when things started going down hill. The labs were fun, but he would not have covered the material for them, and so he had to rush in class to cover what we needed to know on the labs, rather than take a good amount of time explaining things. Inevitably, he would have to YAX (yet another extension) them so he allowed people a reasonable amount of time to finish them. He also changed the labs from counting 40% of the course grade to 15%, which in my opinion has hurt a lot of people. We spend A LOT of time on doing the labs, which is why I think they should count more. That's where we do most of our learning, and where we can demonstrate we have an understanding of the material. \r\n\r\nThe midterm was really hard. After he gave us the midterm from fall 2011, which seemed very doable, the actual midterm was a disaster. The average was a 50 with a standard deviation of like 23. As someone who did well on the labs, I figured I was going to be fine on the midterm, but when I saw the midterm, I panicked because it seemed incomprehensible. I feel like I could have done a lot better. \r\n\r\nThe second half of the class felt rushed. The C++ things seemed VERY rushed. The last two labs are C++ oriented. Honestly, I'm on the verge of taking the final and still don't feel like I know that much about C++.\r\n\r\nI think Jae was very stressed this semester with a class of almost 200 people and that detrimentally affected his teaching ability. Overall, I wasn't blown away by this class. I feel like I didn't really profit from his lecturing style, but I have to agree that the labs are very well designed. ", 
      "workload_text": "10 labs, lab 8 is optional (15%)\r\n1 midterm, average in 50s with std dev of about 23 (35%)\r\n1 final, yet to take (45%)\r\n5% \"buffer\" points for people who actively participate in the listserv/did lab8/had beautiful code/other stuff that Jae thinks merits the 5% boost "
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Tue, 21 May 2013 16:56:08 GMT", 
      "id": 28427, 
      "professor_ids": [
        3509
      ], 
      "review_text": "Advanced Programming is a great course which makes you a better programmer. It introduces you to C, C++ and some system programming. It also introduces the UNIX environment if you're not familiar using a shell or an editor like vim.\r\n\r\nJae started slow in the beginning, spending a lot of unnecessary time on C. He rushed through C++ in the end because of this. The class gets most interesting in the middle when you build a simple web server.\r\n\r\nThe labs take anywhere from 2 - 14 hours of work. Lab 7 is the longest. None of them were really hard, but he extends the deadline for pretty much all of them.\r\n\r\nThe midterm was just as hard as last semester. It's not bad though because the class average is really low (around 50), so you can get a good grade. The final was much easier than the midterm. A lot of people complain that this class is hard - it's not. It's of average difficulty and has an acceptable workload for a 4 credit course.\r\n\r\nJae's a great teacher, but he's not very approachable. He does care for his students, but he's very curt and to the point when you talk with him in person.", 
      "workload_text": "30% labs\r\n30% midterm\r\n40% final"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 22 May 2013 15:48:32 GMT", 
      "id": 28435, 
      "professor_ids": [
        3509
      ], 
      "review_text": "I definitely wasn't alone in that I had a lot of mixed feelings about this class.  I'll start by saying that is certainly the only viable option for taking Advanced Programming.  (Sidenote: If you're even thinking about taking Shlomo Hershkop's course, you're better off dropping out of school than wasting your tuition on an insulting elaborate practical joke).  However, I wouldn't call this class an amazing one that you absolutely have to take before you graduate, unless of course it's a requirement.  It really is just a programming class.\r\n\r\nFull disclosure: I have no plans to take OS and I'm not sure when I'm going to use C again.  The general theme of this course was \"trust me - this will all be useful later.\"  As a result, the subject was as uninspiring as it gets, unless you happen to love learning about large amounts of syntax and technicalities of programing languages.  \r\n\r\nThe best part of the course was the labs (programming assignments).  They were very well written were never had ambiguities.  These assignments are the same every semester, and solutions are provided immediately after the deadline.  Though this technically makes it very easy to cheat, keep in mind that the labs are the core of this class, and there's no point in taking it if you're not interested in working through each of them.  Because they were so detailed, they could be a bit overwhelming to read the first time through, and it is very important to follow the instructions to the letter.  Ultimately, they were very enjoyable to work through, and I can honestly say I learned almost everything that I learned in this class from working through the assignments.  Rubrics were provided for each lab that clearly stated how points were awarded.  \r\n\r\nI personally didn't find the lectures that I attended all that helpful.  The ones at the chalkboard gave good introductions to topics, and I profited the most from these.  He'd often go over something too quickly, and then be asked to repeat it three or four times more.  Occasionally, he'd repeat a large portion of the previous lecture, though it was impossible to tell when he would do that.  Ultimately, it was clear that he made the effort, but had trouble keeping everyone in the large classroom on the same page.  There were a lot of times when he'd explain something simple, or say \"you remember this from last time, right?\" and then five minutes later someone would raise their hand and ask about it.  When he did hour-long demos from the computer with the lights out, I found it very difficult to focus.  I'd always try to follow along with him, inevitably miss one step and therefore be lost for the rest of the demo.  \r\n\r\nThe pacing was also strange, as the last three weeks were the only time we spent programming in C++.  Almost the entire first half of the semester was dedicated to the C language, and the remaining time was spent on systems programming in C.  I understand that the training in C might be important for people who plan to take OS, but for everyone else it seemed like overkill.  \r\n\r\nI really never got the point of the whole YAXing policy.  Looking back, the deadline for every lab besides the first one was extended, and roughly half were extended twice.  Sometimes, the announcement of the extension was within 24 hours of the original deadline.  Talking to previous students and looking at CULPA reviews, I see that he's been doing this same practice since he started teaching.  I can't help but wonder why.  It would make a lot more sense for him to just tell us how long we truly had for the assignment so that we could plan ahead.  At this point in teaching the class, he probably knows how long he actually plans to give the class for assignments. \r\n\r\nThe mailing list was something about which I seemed to have the minority opinion.  I was really not a fan of it.  It might've worked better with a smaller class, but for a class of 140 students it bordered on absurd.  There was so much showing off and subtle attempts to suck up to Jae.  Some attempts were not subtle at all; for example, when the final exam solutions were mailed out, one student sent out an email saying that the exam was very well designed, and that this was the best course he had ever taken.  People would also use the mailing list to tell the class about how they went further and did additional work.  \r\n\r\nThe worst part of this class, and by far the most frustrating, was the evaluation process.  Jae said on the first day that it is very difficult to write an exam that assess what we truly know.  After seeing last semester's exams, it is clear that he is making the exams substantially more difficult by the semester.    He always said that working independently through the labs was the best way to prepare.  As someone who did just that, I can frankly say I've never felt so unprepared for exams as I was in this class.  The issue wasn't my approach to the labs, nor was it that I wasn't studying hard enough.  The midterm was about the same length as the final even though the final was given during final exam period.  There were a total of 17 questions on the final, and every single one of them was either a (very) short answer or multiple choice, with absolutely no partial credit under any circumstances (and trust me, there were plenty of places to mess up).  Questions would be asked on code fragments that were as long as 3 pages.  Single short problems would often test 5 ideas at once and carried a high all-or-nothing point value.  To add insult to injury, there would be multiple questions testing the same trick.  It seemed crazy to me that single trick multiple choice questions carried the same amount of weight as entire programming assignments.  The only reason I didn't feel worse when walking out of an exam where I had to make a semi-educated guess on most questions was because I knew that no amount of preparation would've been sufficient.  \r\n\r\nUltimately, the final curve is very generous, with half of the class receiving at least an A-, and this will save you at the end of the semester if you work hard and have the right amount of luck.  The grades on both exams truly ranged from 0 (yes, zero) to 100, with the median on each around a 50.", 
      "workload_text": "30% Lab Assignments (9)\r\n30% Midterm Exam: Median 48 Standard Deviation 21\r\n40% Final Exam: Median 50 Standard Deviation 25"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Tue, 24 Dec 2013 06:07:55 GMT", 
      "id": 28954, 
      "professor_ids": [
        3509
      ], 
      "review_text": "I agree in general with the May 22 2013 reviewer on some of the basics (don't go anywhere near anything taught by Shlomo Hershkop, the exams are a bit of a crapshoot, details on labs can be a bit overwhelming but the detailed specs are ultimately a net positive) so go read that and then I'll focus on a few points where we differ to some degree/where things have changed:\r\n\r\n- This not \"just a programming class.\" Getting familiar with C means getting familiar with a lot of low-level system functionality. If you don't understand pointers and memory management completely intuitively, you'll never really understand what's going on in higher-level languages like Java. Jae Lee definitely gets you acquainted with pointers and memory management.\r\n\r\n- But you will learn a lot about real-world programming. For example: I hated the listserv early on and sent the professor a frustrated email about it, but I came around eventually. A lot of the big (and small) open source projects are built around listservs and all that comes with them. This class's listserv gets you used to the number and type of emails (including repetitiveness), the personalities that appear (the noob who asks a question he could've googled, the guy who replies to everything within 10 seconds but is kind of an asshole, the Benevolent Dictator For Life, i.e. Jae Lee, etc.), and so on.\r\n\r\n- YAXing (as many extensions as you want) is gone as of this semester. By all accounts, that's a big improvement. Also, we had two midterms this time around instead of just one.\r\n\r\n- I felt that the exams assessed the material quite fairly, although they generally played to my strengths and I did well on them without studying, so people who studied a lot and still did poorly likely feel otherwise with good reason.\r\n\r\n- Focus on the principles, not the details. C, C++, Unix and TCP/IP all have a really deep underlying logic and if you can wrap your head around it you're set. Everything is there for a reason. If you remember the reason you can derive the details on the exam. For example, in Unix and C \"everything is a file\" (external devices, actual files, other programs, etc.) so when you write to stdout you're writing \"to a file.\" When you read from stdin, you're reading \"from a file.\" Sockets can be treated exactly like a file. BUT because \"everything is a file,\" a \"pointer to a file\" (FILE *) can't possibly be an ordinary derefencable pointer -- dereferencing, after all, is the act of visiting a location in memory and reading some information out, which you can't conceivably do with a web socket -- so if you worked through that logic, you wouldn't make the mistake some people did of thinking that a file pointer can be dereferenced. So, principles, not details.\r\n\r\nIn general, I liked this class a lot, though a grading dispute on the final exam made me seriously question Professor Lee's judgment/command of the English language. However, given that I did not witness any other such problems, I'll be charitable and assume it was a truly isolated incident.", 
      "workload_text": "30% final, 30% labs, 20% each for 2 midterms"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 16 Jan 2014 00:33:35 GMT", 
      "id": 29153, 
      "professor_ids": [
        3509
      ], 
      "review_text": "I took this class 1.5 times. I started as a sophomore, shortly after 1004, with the mindset of \"let me just make this program work.\" That mindset led me to a 50% by the time the withdrawal date came around (which would've been a B-, but I thought I was failing) so I withdrew.\r\n\r\nI enrolled in the class again 2 years later, this time with the programmatic maturity to understand what the class was really about, and why that information mattered. Although the classwork takes the format of programming assignments, they are really about the underpinnings about C/languages (e.g. memory management, pointers, etc.). If you want to learn it well, you should break things! Rewrite your labs in different notations (e.g. array vs. pointer) to learn the differences. Become intimate with C. \r\n\r\nThe reason I mention my backstory is to help advise students who are on the fence about taking the class now or later. Some people can handle AP early on. But two years ago I honestly didn't care about freeing memory or understanding where my variables were stored. I gradually developed that interest after taking a few more CS courses/ being asked such things in interviews, and I am very happy I had the opportunity to take AP again. I got a lot more out of it, and the class was immensely more interesting.  \r\n\r\nThe class has 10 labs, of which 1 (lab 8) is optional. In the past, Jae had a policy of only granting class-wide extensions and every lab would be extended. He has changed his policy, for the better, to allot everyone 7 penalty-free late days each, to be used whenever (with a max of 2 late days for a given lab). This is a great policy, since it allows you to manage your time a lot better.\r\n\r\nThe class also has 2 midterms and a final. The all-or-nothing nature of many of the questions means the grades are relatively polarized--you could do extremely well or extremely poorly, for missing 1 simple thing. If you get above a 90, you really know what's up.\r\n\r\nSo I mostly wrote this review to call out the author of the last post (December 2013) regarding handling of the final. To give readers some context, several people in the class missed 5 points of a 20-point question for different reasons and proceeded to somewhat aggressively mail the list-serve arguing over which wrong answer was \"less wrong\" and deserved 2 extra points. Several TAs and Jae explained the reasoning to the rubric in response. \r\n\r\nTo insult Professor Lee's English, when he so eloquently and rationally addressed each concern from the email chain in a class announcement, is incredibly rude and borderline racist. Full disclosure: I missed 10 points of the same problem for a different reason, and though I disagreed with the severity, I had the decency to not make personal attacks.\r\n\r\nThough I found grading in the class sometimes tough, and I did not do as well I as would've liked, I learned *a lot* and became a much better programmer. Much of this is due to Jae. He is one of the few people in the department devoted exclusively to his students. I have personally experienced how he uses student feedback to iterate on his teaching from semester to semester, in order to better serve his students. He organized a class hackathon this semester, complete with pizza, Insomnia cookies, and t-shirts, to help students connect on an informal level. He stayed there the whole time, until 5:30 am, making sure he chatted with everyone at least once before he ran off to take his son to soccer. He learned my name despite the large class size (I never attended office hours or anything either).  He is one of the best professors I have had in the department, and I would recommend taking his class to anyone mature enough (as a programmer/student/person) to handle it.", 
      "workload_text": "Typical of a CS class. 3 exams, 10 labs."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 14 May 2014 17:27:43 GMT", 
      "id": 29467, 
      "professor_ids": [
        3509
      ], 
      "review_text": "First off, Jae is a fantastic lecturer. If you go to every class and pay attention (which isn't too difficult to do), you'll learn a ton about C, C++, how the internet works, etc.\r\n\r\nThe material itself is quite difficult. C is a low-level language, so you'll be doing a lot of stuff that you probably never did before (especially in 1004/1007). You have to worry about memory, how pointers specifically work, and every other minuscule detail that gets done for you in higher-level languages like Java.\r\n\r\nIt's interesting that you start at C, but build up to C++, which shows itself to be strangely similar to Java (Java was built off of C++)... so you kind of do a full-circle.\r\n\r\nOverall, would absolutely recommend this class, but make sure you take it in a semester that you aren't too overloaded with other stuff. You will do a crapload of work, but you'll learn a lot.", 
      "workload_text": "10 labs, drop 1. labs=30%.\r\n2 midterms, each 20%\r\n1 final, 20%"
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 15 May 2014 06:06:28 GMT", 
      "id": 29472, 
      "professor_ids": [
        3509
      ], 
      "review_text": "One of the better CS courses out there. It's truly inspirational how Jae teaches (Sidenote:  Chris Mulligan and Jonathan Balsano, the head TA's are also a plus for this course; they know everything and they will go the extra mile to make sure you know the way Jae wants you to know the material). The labs get progressively harder (lab 2 is particularly challenging for those that only know Java and thinks they know everything).\r\n\r\nJae hands out a bunch of very clear yet brief set notes for every topics. The listserv is very useful and you won't have to wait more than a couple of hours before a TA responds to your questions.\r\n\r\nThe bad part are the exams. For all the thought Jae puts into the labs and lectures, I feel he hasn't figured out a way of writing exams that aren't so unforgiving yet as challenging as the ones he cooks up. No matter how many hours you spend studying for the exams, you will be challenged. There are no easy questions. You almost certainly will need to go through an overly-complicated program that makes you follow 10-15 logical statements that intersect and go through overly-complicated loops. Almost always the questions will be either right or wrong, and there aren't many questions (usually 10 in midterms, 20 in final). Normally this wouldn't be such a problem, but each question usually tests for 3, 4 or 5 things at the same time. So even if you knew everything there is to know about 4 concepts, if you missed the one, you won't get the answer right (guessing here is really, REALLY bad) and you will probably end up losing a bunch of points. His exams are all or nothing, meaning that you won't get partial credit over anything. You truly are as strong as your weakest topic.\r\n\r\nThen again, if you want to be a programmer or you want to do something related to programming later on, take this course. You will learn more in 3 months than you could expect in a year. If you are not a programmer, nevertheless take this course. Programming is all about getting rid of any assumptions you may have and think logically and methodically and CS3157 makes you develop those skills more than you ever thought possible.", 
      "workload_text": "If you are not a good programmer, ~10hrs per lab\r\nIf you are a good programmer ~7hrs per lab\r\n2 Midterms\r\n1 Final\r\n9 compulsory labs."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Thu, 22 May 2014 20:59:17 GMT", 
      "id": 29540, 
      "professor_ids": [
        3509
      ], 
      "review_text": "This class is amazing. Jae is amazing. The TAs are amazing. There's not much bad to say about it other than... Oh. Right. The tests.\r\n\r\nLet's start with the good. Jae's lectures are interesting and helpful. I thought that he went at a perfect pace. The homework assignments can be somewhat challenging but everything is so well organized. All you need to do is pay attention in lecture, go to recitation, and give yourself enough time to do the programming. I was almost terrified coming into this course, from the horror stories that I heard from upperclassmen. I heard that the labs would get harder halfway through the course, but I didn't feel like there was that significant a change. I will, however, say that if you don't know the material from the first few labs, you will likely struggle with the latter ones.\r\n\r\nAlright, so the tests. The tests are pretty unpredictable. All I can say is try to study as much as you can and beware of Jae's trickery. Do the practice exams to get an sense of what the problems will be like. You might not ever be fully prepared... but good luck, and hope for a good curve? (it will be pretty good.)\r\n\r\nSomehow, despite how awful I felt when struggling through the tests, I still really enjoyed the course and I feel like I can look past those. You will definitely learn a lot either way.", 
      "workload_text": "10 labs total (one of them is optional). Give yourself maybe 5-12 hours (really depends on the lab). Try to start early. Go to office hours if you need to. There's also a recitation (1 hour) every week.\r\n2 midterms. 1 final."
    }, 
    {
      "course_ids": [
        4758
      ], 
      "created": "Wed, 19 Nov 2014 23:02:36 GMT", 
      "id": 53565, 
      "professor_ids": [
        3509
      ], 
      "review_text": "This class is legendary for a good reason. The assignments are long, the material difficult, the exams are incredibly tricky bordering on unfair. However if you get through it you will have learned as much in this course as self-taught programmers may learn in years, if ever. I write this from a perspective of someone who took this course with basically zero knowledge of computer science or programming experience coming into this class. \r\n\r\nWhat the class covers really well: C.\r\n\r\nWhat the class will force you to learn by sheer force: the UNIX environment, working with a shell, basic git commands, how memory works under the hood, and more C than you ever care to know, and then some.\r\n\r\nWhat is briefly touched upon: multi-threaded programming through blocking functions, sockets/networks, and basic under the hood stuff for C++.\r\n\r\nJae begins the semester with the claim that he'll turn students of programming into actual programmers which sounds like an ambitious task but he pulls it off fairly well. By the end of the class, you will have coded a linked list in C, written your own web server, and some minimal C++ experience, all of which isn't that impressive on paper. However, the skills you learn here will be applicable to nearly any job you hold as a computer programmer unless it's really implementation-heavy front end stuff. Even then, you will come away with experience of having to read lots of documentation with very little guidance on how to use it, which is expected of all programmers. \r\n\r\nIf you want to do programming as a career and are debating taking this class because of the grading, take it anyway. You'll learn a lot more than you think regardless of your grade. He grades to a A- and in my semester he curved everyone to at least a C-. I did terribly on my first exam and still eked out a B+.\r\n\r\nThis is sort of a requirement: get to know your TAs really well. They are all super helpful, smart, and were probably the reason I didn't drop out after failing my first midterm. They really make or break your experience in the class. ", 
      "workload_text": "Heavy. 10 labs, 1 optional, 7 free-form late days, no more than 2 per lab. \r\n2 midterms, 1 final, all impressively crazy. \r\n\r\nI wouldn't take this and Data Structures at the same time if you're looking to take your programming skills to the next level. Both professors warned me not to do it; I did it anyway and I managed to survive, but I was only taking 10 credits. Still I wouldn't recommend it. Take 3134 or the honors Data Structures first before taking this class if possible."
    },
    {
      "course_ids": [ 
        397
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 554, 
      "professor_ids": [
        40
      ], 
      "review_text": "Prof. Gross teaches 3 sequential courses - Discrete Math, Graph Theory, and Combinatorial Theory - and teaches them all in the same fashion. It helps to go to class, but since a complete lecture notes booklet is available and covers everything from the beginning to the end of the semester, you could potentially learn the material yourself. His tests are open book, but are by no means easy - they are often referred to as \"the learning experience.\" Overall, he's a great teacher, and makes the courses bearable even for a math-illiterate like myself.", 
      "workload_text": "No homework. Open-book tests. Lectures conducted according to a lecture-notes booklet."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 581, 
      "professor_ids": [
        351
      ], 
      "review_text": "Prof Grunschlag's lectures improved dramatically in the two semesters I took his classes. He attempts to be funny (and succeeds often enough). He is an easy grader, and although exams are difficult there is a generous curve.", 
      "workload_text": "Bi-weekly problem sets, midterm(s), and final. Data structures is hard no matter who teaches it :-P "
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 905, 
      "professor_ids": [
        40
      ], 
      "review_text": "He starts the semester by saying something like: there are two options, you either have \"it\" or you \"don't\". If you have it, you don't need to come to class, you have the book and my class notes to study from. If you don't, I cannot help you anyway. So I am just going to talk about stuff that is unrelated to the title to the class. And he does exactly that. There are 3 seperate materials that one learns: the stuff that he takes about in class, the actual material from the book, and the stuff that he puts on exams (which is basically, mathematical riddles). About the exams, he says that they are intentionally difficult to have a wider distribution: \"I'd rather have a range of A's from the 70s and above so that I can distinguish between the very good students and the exceptional ones.\" The truth is that if you've got \"it,\" he is an enjoyable professor. Since the class is curved, the median is a B anyway, even if it is 50/100 or lower.", 
      "workload_text": "6 Problem sets (the lowest one is discarded), 2 midterms, one final."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Fri, 11 May 2001 00:00:00 GMT", 
      "id": 1117, 
      "professor_ids": [
        47
      ], 
      "review_text": "If you have a hard time to follow in his class don't waste you time going to Ross' office hour. He is going to tell you to do the odd exercises in the book. After he will wait for you to leave. He is not very helpful and he does not make the class interesting. Too bad that some of us have to take his class.", 
      "workload_text": "6 pretty easy homework but do not think that because you do well in your homework you will do well in your exams. "
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 22 Jan 2002 00:00:00 GMT", 
      "id": 1853, 
      "professor_ids": [
        40
      ], 
      "review_text": "Cracks the worst jokes imaginable. This guy has a really strange sense of humor. He's nice though, and his class isn't too boring. His lecture notes are avaiable from copyquick or something, but you need the book to do homework. ", 
      "workload_text": "Problem Set every other week, 2 midterms and a final. All open notes and book. "
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 22 Jan 2002 00:00:00 GMT", 
      "id": 1873, 
      "professor_ids": [
        40
      ], 
      "review_text": "Can anyone say \"ZZZZZZZ\"? He manages to present what should be easy material in a way that makes it so difficult it is impossible to get through. He curves, so pray that your classmates are dumber than you. He is not very clear at times, and seems to think that you are a moron if you don't understand something. He keeps you late sometimes. Try to distract him into telling you anecdotes, they're far more interesting than the lectures.", 
      "workload_text": "Six problem sets, VERY LONG, two midterms, and a final."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 13 May 2002 00:00:00 GMT", 
      "id": 2639, 
      "professor_ids": [
        351
      ], 
      "review_text": "He's not a natural teacher -- without notes, his oral explanations often got a bit confused, and flustered is regular condition for him -- but he really does his best to help students, and it pays off. Classes are PowerPoint, and while he isn't one of the Sleepytime professors who just read off the slides, he sticks quite close to them. This is good, because his slides are really very well done: clear and straightforward with well-chosen examples. All slides are on the course website, which is extremely useful. It also makes attendance very much optional, though lectures are still useful and generally not bad. He's also very accessible, and makes every reasonable effort to help you out.", 
      "workload_text": "Weekly problem sets, mostly from the textbook; reasonable difficulty, require between 1 and 5 hrs. each. Two midterms and a final. His exams are very well-done: interesting, synthetic problems that are tough (don't worry, it's all curved) but still follow from what you've learned."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sun, 30 Jun 2002 00:00:00 GMT", 
      "id": 2917, 
      "professor_ids": [
        351
      ], 
      "review_text": "All the other reviews of Zeph are pretty accurate. He does want to help his students and he is not really a natural teacher. He gets lost in his own example problems at times. His lectures are almost entirely from powerpoint slides so they can be kind of boring. On the up side, Zeph is very energetic, always in a good mood, and must have spent hours and hours working on his slides. The homeworks aren't too time consuming and Zeph tries to construct interesting problems. I think there was a big curve in the end. Overall, you should have no worries about taking a class with Zeph as it should be a pleasant experience.", 
      "workload_text": "Weekly problem set (lowest grade is dropped), midterm, final"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 15 Jul 2002 00:00:00 GMT", 
      "id": 2946, 
      "professor_ids": [
        351
      ], 
      "review_text": "Zeph is a very nice and very likable professor. I don't know why professors are expected to be entertainers these days, but if that's what you care about in getting an education, I think Zeph always succeeds when he tries to be funny. He is as funny as his jokes so either you laugh with him or at him. Teaching-wise he's quite good; he's clear and he makes good lecture notes. The notes contain most materials but not some worked examples, and the materials are easier to understand when lectured to you than when you read them, so I definitely recommend going to class. Exams are generally tough, requiring thorough understanding and rewarding little for rote memorization. So do try to learn the concepts and don't use memorize the techniques. But if you have a solid math background (probably if you plan to do the CS theory track), the course should be easy for you. Others don't need to worry too much because the curve is quite generous. A note of caution: as with Computability as another poster mentioned, the first half of the course in general is much easier than the second half, possibly because the first half covers concepts you have more likely to have picked up in math classes. Also, things like probability seem to be very difficult for some people and very natural and easy for others. Flip through the book in the beginning of the course to get a general idea of the topics, then gauge your math aptitude/experience to budget your time.", 
      "workload_text": "Weekly homework, midterm, and final. Reasonably amount."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 12 Sep 2002 00:00:00 GMT", 
      "id": 3235, 
      "professor_ids": [
        40
      ], 
      "review_text": "Wow! If I had to take a class with him again I would shoot myself in the head first. I did enjoy it thoroughly, however; at least as well as I would enjoy sitting in a room with a bunch of crazy people. At first, it's amusing, but after a semester, you're clawing at the door.", 
      "workload_text": "Not bad, really. Just one of those exotic classes."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 17 Dec 2002 00:00:00 GMT", 
      "id": 4053, 
      "professor_ids": [
        40
      ], 
      "review_text": "This course covers a wide array of material, and you're expected to know it like the back of your hand by the time the exams are given. If you work hard and don't slack the problem sets or practice exams, you'll be good to go. Otherwise.. well, I think half the class had dropped out towards the end of the semester. Overall, he's a nice professor who delivers his lectures with an offbeat sense of humor. Although he has course notes at the beginning of the semester that  cover the entire class, it's worth going to the lectures because you can ask him questions, and no question is too stupid for him. He's not one of those professors that thinks he's too busy for his students and is quite approachable. Also, pray that he has knowledgeable TAs when you're taking the class. If you want to learn a thing or two about math, take his course -- you won't regret it. Look elsewhere if you want something less challenging/rewarding.", 
      "workload_text": "6 long problem sets, 2 midterms, final. Exam medians are ~50-60 out of 100. His exams are not for the faint of heart. His exam problems tend to build on each other, i.e. the answer to one problem is used to prove the result of another. Best advice -- always always *always* try to understand as much as possible through his practice exams before taking his actual exams."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Wed, 21 May 2003 00:00:00 GMT", 
      "id": 5825, 
      "professor_ids": [
        515
      ], 
      "review_text": "Unlike the previous reviews, I did not like this professor.  Before the first midterm, we learned two chapters, then afterwards we sped through about 6 chapters, learning a little from each.  He is very disorganized and doesn't know how to use his time properly.  Coming to class was not helpful since everything he taught was in the textbook.  Most of the time the text explained things much more clearer.  Going to class will not help at all with the homeworks and don't expect to get them back in a timely manner.  If you take this class with him, be prepared to do a lot of proofs.  This man loves to do proofs..he thinks they're fun. ", 
      "workload_text": "Heavy.  Problem sets biweekly but each set takes a LONG time.  The earlier you start the better. "
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 24 May 2003 00:00:00 GMT", 
      "id": 5873, 
      "professor_ids": [
        515
      ], 
      "review_text": "Great teacher, good lecturer and cares about the students a lot. \n\nHe knows a lot about discrete math and he's very enthusiastic about it. Even though he covers number theory which other teachers who teach discrete math don't, this class is still very vaulable and u'll learn a lot from him. His tests aren't bad at all.", 
      "workload_text": "9 problem sets, midterm and final"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 20 Dec 2003 00:00:00 GMT", 
      "id": 7276, 
      "professor_ids": [
        40
      ], 
      "review_text": "No exaggeration, this was the absolutely worst class I have taken at Columbia.  The course itself is very interesting.  I am a math major and only took the class because of the material covered in the class.  However, Prof. Gross is completely inept.  He has this attitude that he is a math genious and if students are naturally inclined in math they will understand his lectures, if not, tough on the student.  I agree that this course covers a huge array of topics and the class is very time pressured, but Gross makes minimal attempt to lecture well.  His notes that accompany the book are absolutely horrible and worthless (I learned the material from the book which is actually a very well written text).  Half of Gross' lectures are anecdotes from his life: he has told us numerous stories when he was a kid and how brilliant he was in math and other information about his life.  Also, he never writes on the blackboard (I have never seen this done especially since this is a MATH course...).  He explains the concepts poorly and rushes through topics that are very important (I guess I can't totally blame him for this since the syllabus is very dense).  However, he expects the students to understand all material as if we spent days on each topic.  For example, in my 4000 level math class it took us 40 minutes to go over Cantor's proof for the uncountability of real numbers, but somehow Gross showed us the same proof in the last 2 minutes of class.  All I know is that if I didn't previously see a lot of the material taught in this class I would be completely lost.  A lot of the material seen in this class is covered in a lot of the higher level math classes and I find it hard to believe Gross expects the students to understand the material at this level.  Now, onto his tests.  I have never taken a test that is so off topic with the material covered in class.  His tests only test you on your natural grasp of math and minimally tests you on the information covered in class.  I learned after the 2 midterms that I could have studied for another 30 more hours and not have received a higer grade.  For example, his problems seem at first glance a straight forward easy problem.  However, there usually involves one tricky step that has nothing to do with discrete math (it usually has to do with \"seeing\" a shortcut or something like that).  Each question is similar to that: you either see the trick or you don't.  If you don't see it, you will probably will not be able to start the problem and receive 0 points on it (and this hurts since the test consists of only 5 or 6 problems).  Overall, (and I really do hate writing negative comments for a professor) I would say run as fast as you can from this class.  If you do not need to take this class as a requirement then don't.  I found this out the hard way.", 
      "workload_text": "The workload is very light.  6 problem sets which are not long at all (especially since we get over 2 weeks to complete each one) and 2 midterms and 1 final.  For the midterms look over the sample midterms on the website.  These are the best ways to study for the tests since the tests he gives every year are very similar in style."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Wed, 24 Dec 2003 00:00:00 GMT", 
      "id": 7378, 
      "professor_ids": [
        40
      ], 
      "review_text": "This course is da bomb!! The easiest material ever if you are good at algebra/precalculus/logic/drawing pictures. The course consists of some select topics which Gross does not like to go into depth in. The course itself covers a large number of topics, but none extremely deeply. Going to class is a waste of time except for his jokes, as he basically reads his notes (you can do this in the comfort of your dorm room). The homeworks are a joke as the solution manuals solve similar problems (only the numbers are changed around). The exams are also pretty easy as they are open book and open notes. An overly dumb SEAS contingency lowers the median so as long as you score about 95 or so on each midterm and the final, you are set for an A+.\n\nGross himself doesn't care if you learn the material, as he is not too available, but the TA's are somewhat better (they are like his bodyguards).", 
      "workload_text": "6 homework assignments (lowest dropped), two midterms (easy), and 1 final (easy)."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 19 Apr 2004 00:00:00 GMT", 
      "id": 8360, 
      "professor_ids": [
        40
      ], 
      "review_text": "One problem with this Culpa free-for-all is that the people having the strongest opinions tend to be those who did poorly.  Reading the reviews above, I bet you wouldn't have guessed that PROFESSOR GROSS WAS GIVEN THE INSTRUCTOR OF THE YEAR AWARD, that he is (near) universally loved, that he is very much approachable and takes an eager interest in his students, and that his lecture style is nothing short of brilliant.  His explanations are lucid, his delivery entertaining.  Mostly, Prof. Gross gives a feel for why the material is important and interesting.  I don't mean this in the sense of practical applications of the material (though the training in combinatorics has certainly been useful in my current research), but important in a larger sense.  Professor Gross's goal is to make you (in his own words) \"become your own expert\"- to teach you how to approach problems creatively, and with maximum rigor.  This class was probably the most influential one that I took in all my undergrad education.  You may or may not appreciate his jokes, but I strongly encourage people to take the class.", 
      "workload_text": "Moderate, though it depends entirely on how good you are at solving the problems.  Problem sets can take anywhere from 1 to 6 hours, depending."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 07 Jun 2004 00:00:00 GMT", 
      "id": 9067, 
      "professor_ids": [
        351
      ], 
      "review_text": "First of all this class isn't really for the faint of heart unless you intend to do some theory math or be a computer science major. Even though it is in the computer science department don't be fooled it is a math class, algorithms are involved, but the primary workload will be done in math. \nProfessor Grunschlag, like to be called Zeph often in class, is a very entertaining professor, but the man knows his shit, he has a PHD in some theoretical math that i don't understand. You can look at his papers on his website. His in class style is bell to bell an intense, but he is light hearted and loves to be in front of the class room. Zeph is also very well prepared, and has an interesting way of taking attendance. He randomly calls on just about everyone in the class about 3 times from an attendance sheet to learn your names. If your not there when he calls on you, tough luck, you loose points in participation. He will learn your names. He also has an online email newsletter thing that if you participate in instead of going to class he will accept that as participation. Material is tuff, and he is more the willing to help anybody, because sometimes the class isn't enough. Great guy, awesome professor, and if you are going to take Discrete Math I suggest you take it with him.", 
      "workload_text": "There are homeworks due every 2 to 3 weeks that account fo a large chunk of the grade. Very Improtant.\n2 midterms and 1 final are the other chunk\n2 quizes are worth about 20 point togeather not a lot but can make a difference in a grade\nand of course the real swing between an A and B will be participation, make sure he knows you, because he will, and go to class unless you are a supergenius math guy, which most aren'."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 15 Jul 2004 00:00:00 GMT", 
      "id": 9199, 
      "professor_ids": [
        351
      ], 
      "review_text": "Excellent professor. He's an animated and entertaining lecturer who covers a lot of concepts with in-depth and interesting examples and applications (e.g. counting poker hands during the probability lectures). Everything you learn comes from the lectures-- the text was more of a backup and for homework exercies, and since they go by pretty quick, I'd say you have to be damn brilliant to not have to show up. I'm no math genius, so I found the material pretty difficult-- he'd often cover proofs in class that wouldn't sink in until I went though my notes and thought everything through much more slowly (and even then some  never fully did). Even so, it certainly wasn't impossible to grasp the concepts and be able to do well on the homework assignments and quizzes. Exams were really challenging (all in-class, 4-5 questions), consisting of completely original problems that required you to apply in new ways the skills acquired from lecture. Your success on exams, in my opinon, will largely depend on your mathematical creativity-- how flexible you can be in applying the concepts you know to a problem that's pretty different from what you've seen before. In my case, the particular way of working out some exam problems just would never have occurred to me (how to begin a proof, where to go next after you've reached a point, etc.), especially under the stress of an exam, so I did pretty bad on them. But they're curved pretty generously, and if you do well on homeworks, you can still do well in the course (and hard exams are nice-- they really get you to think). More important, though, the class is always interesting, and I think (especially if you haven't taken a course like it) you'll find yourself much better able to look into a problem then before.", 
      "workload_text": "Not too bad. I think there were 5 bi-weekly problem sets (give yourself some time-- 2 completely devoted days if you procrastinate), 2 quizzes (easy), in-class midterm and final (difficult, for which more than a certain amount of studying just won't be helpful--which is a good thing)."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 28 Mar 2005 00:00:00 GMT", 
      "id": 11646, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Eitan is awesome! I have heard that the older guy who used to teach this course was really dry and boring (and I don't know if Eitan will teach it again in the near future) but Eitan is completely hilarious. We spent half of the time in the course joking around with him and he really listens to his students. The book mostly sucks, the examples are all way over-simplified to really help with the homework, but Prof Grinspun does a good job of getting the whole class to work out more difficult examples during class. The TAs said that Eitan was the nicest professor they've ever TAed for and it seems to me they were right, his tests and homework assignments were very very fair and he encouraged the TAs to be easy graders. It's probably a bad idea to skip the class unless you have a friend whose a good note-taker because he does go over material/ do the aforementioned really useful problems during lecture that aren't in the book. He's almost always a few minutes late to class though. The class is pretty easy if you're a CS/compE major but if you're having trouble with something Eitan's totally accesible and willing to help you. After I did not so great on the first problem set, he was willingly 10 minutes late for a collegue's talk just so he could finish going over example problems for the midterm with me.", 
      "workload_text": "fair - biweekly problem sets, 2 midterms, final"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sun, 22 May 2005 00:00:00 GMT", 
      "id": 12252, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Prof. Grinspun managed to make this difficult class at the very least entertaining. His lectures are worth going to, not only because he explains things well but because his jokes are surprisingly funny. He actually learns his students' names and calls on people randomly during class. As for the subject itself, the book is pretty poor and has examples that are ridiculously easy compared to the exercises. This is an often weird and abstract class, but it's curved, so try not to worry about your grades until the end.", 
      "workload_text": "7 homework sets which can take a long time to complete. 2 midterms and 1 final. The first midterm was easy, the second was difficult, and the final was killer. "
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 03 Jan 2006 00:00:00 GMT", 
      "id": 13611, 
      "professor_ids": [
        40
      ], 
      "review_text": "Prof. Gross is an interesting lecturer and fairly approachable too.  His main problem is borne of his love of the subject - I think it's tough for him to relate to people who don't understand the material, so he has difficulty packaging things in a friendly way.  In fact, the material, both in the course notes that he teaches from and in the book, seems to have no regard whatsoever for the idea that mathematical concepts needn't be articulated in obtuse shorthand that caters to experts, not students in a class with the barest of prerequisites.  If you're having trouble with a concept, you'll probably have to see Prof. Gross in office hours and see one of the TAs and spend some time curled up with the book.\n\nProf. Gross teaches directly from course notes that he posts on the class website.  You should consider it pretty much a requirement that you print out the course notes before class and bring in the printouts to write on.  Otherwise you'll be scrambling to write stuff down in class, and you'll miss most of it.  If you print the course notes and read them and the assigned chapters in the book before each class, you'll have a much better idea of what's going on during the class.\n\nThe problem sets and exams are quite difficult.  You can count on having to run crying to the TAs on at least some of the problem sets, so you should leave time to do that before they're due.  Prof. Gross says he writes the exams aiming for a class average of about a 60.  They're open book and open notes though, so that helps.  He posts some old exams, so if you can do those very well (and you should, as practice), you'll be fine.\n\nIf your final average is in the high 70s, that should earn you an A-.", 
      "workload_text": "Six problem sets, and he takes your best five.  Together, they're worth 20% of your grade.  Two midterms each count for an additional 20%, and the final counts for 40%.  If you don't procrastinate on the problem sets, read what you're supposed to before class, and ask whenever you have a question (and don't stop asking until you understand the answer), you'll do well."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 03 Jan 2006 00:00:00 GMT", 
      "id": 13627, 
      "professor_ids": [
        40
      ], 
      "review_text": "Professor Gross is receptive to students who show interest in the material, and tries to make the class entertaining. Unfortunately, the material can be pretty boring, and it can be difficult to get a hold on it in the classroom setting.\n\nHe lectures from his class notes, which are available online and are meant to summarize the textbook. Given this teaching style, I have to say that Gross is pretty good at keeping things interesting. At the end of the day though, it's still a lecture from a notes on a projector.\n\nThe material can be very difficult at times, and I sometimes got the sense that your performance in this class was more of a function of your innate capacity for discrete math (and less about effort.)", 
      "workload_text": "6 problem sets, lowest grade dropped. They take a LONG time (6 hours+ for me) -- Gross recommends doing each group of questions after its relevant lecture. 5 free late days.  2 midterms, the first was difficult (mean ~55), the second was easy (mean ~80). The final was straightforward although some people had trouble with it. And of course it's all curved."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 10 Jan 2006 00:00:00 GMT", 
      "id": 13788, 
      "professor_ids": [
        40
      ], 
      "review_text": "He has an eccentric sense of humour, which you will probably find either entertaining or ridiculous. He lectures using course notes which he has posted online and rarely uses the chalkboard to solve problems (often he gives solutions verbally, which may not always suffice). Exams are open book and are fairly similar to his posted practice exams. Homeworks were graded a bit harshly, but they don't count for too much. Exam grading was much more forgiving. Attendance isn't necessary, but you may find it helpful as he shows you some tricks when he solves problems (and afterward you don't really need to read the book). Overall, the class is not too hard and professor was mediocre.", 
      "workload_text": "Six problem sets, two midterms, final."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 08 May 2006 00:00:00 GMT", 
      "id": 14705, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Well, everyone else loves him, but I didn't. He's not a bad guy or anything, but this class is so dumbed-down that you'll wonder why the CS department requires it. I could've aced the final before I took the course, and I'm not all that good at CS, even. Meanwhile Eitan is talking to the class like everyone's a seven-year old. It's easy and the curve is great... too bad it's a waste of your time.", 
      "workload_text": "Easy... ten fairly long homeworks that don't usually get too advanced, midterms and final are open-book cakewalks."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 14 May 2007 00:00:00 GMT", 
      "id": 19941, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Good professor overall. Entertaining in class, made a potentially dry subject quite interesting. Overall workload easier than one would expect; while each HW assignment was reasonably challenging and lengthy, there were only 6 of them in the whole semester. Material was pretty easy, and it would have been useful if we could have moved along a bit faster. Midterms were challenging, but were also open-book which means you wouldn't have to memorize stuff. \n\nRecommended, but they should probably make the class a bit faster. And maybe spend some time showing where the knowledge can be applied.", 
      "workload_text": "6 HW assignments, 2 midterms, final."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 18 Dec 2007 00:00:00 GMT", 
      "id": 20604, 
      "professor_ids": [
        40
      ], 
      "review_text": "Gross (pronounced the way it's spelled) is a guy devoted to his work. He's decently approachable in class (especially if you're in the 10 or so who actually go) and he's full of fun stories. \n\nHe wrote the study-guide for the book that you'll use. \nThat book actually is pretty good and I'll be keeping it for future reference.\n\nThe stuff you'll be doing will be probability, recursion, recurrence relations (kind of like ODE material at times), relations, and most fun was Graph Theory.\n\nGross tends to like tangents especially if they relate to his line of work - Graph Theory. The amount of material this guy knows is simply astonishing and he delivers it well. If you can imagine a sweet grandfather figure that would likely be Jonathan Gross. Unfortunately you're either so bored because he goes through the material so slowly or you're bored at his new anecdote.\n\nTake this class. Its average but worth your time. ", 
      "workload_text": "Point System. The Midterms were decently easy but small mistakes could screw you up. All exams were Open Book but that doesn't make them easy. About 100pts per midterm. 200pts for the final and another 100pts for the homeworks which tended to take about 3 hours minimum due once every week and a half roughly."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 21 Apr 2009 20:12:50 GMT", 
      "id": 22591, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Great course. Makes a somewhat dry subject incredibly interesting. Very lively lecture... one of the few CS classes I really have enjoyed attending. If you can take this class with Grinspun (he tends to teach in the Spring), so do.\r\n\r\nHomework is difficult, but not extraordinarily so. Midterms are very difficult, as they are open book so they test not what you could memorize but how adept you are at solving the problems. It is also possible to recover from a bad midterm... I nearly aced the first midterm (missed one or two points), but the second midterm I don't think I managed to get more than 20/90, but with a decent score on the final I still ended up with an A-.\r\n\r\nNot to mention, the questions on the homework and exams are actually somewhat fun (interesting questions, not dull or boring ones for the most part), which is always a plus.", 
      "workload_text": "2 Midterms, 1 Final, 6 homework assignments (approx 6 hours each)"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Fri, 24 Apr 2009 18:24:16 GMT", 
      "id": 22619, 
      "professor_ids": [
        2480
      ], 
      "review_text": "Discrete Mathematics, as taught by Professor Grinspun, is a CS prerequisite I am very happy to be taking.  Professor Grinspun's computer graphics research is really cool, but that is outside the scope of this review.  The main strength of COMS W3203 is clarity.  Professor Grinspun's lectures are so understandable that I have not usually needed to read the textbook in depth.  If anything, they are too basic and move too slowly, although there is plenty of time to ruminate on the materials in class.  The textbook (by Kenneth Rosen) is also excellent, being both engaging and informative.  The difficulty and pacing of the course changed relatively little as the semester progressed, a teaching accomplishment in itself.    \r\n\r\nThe curriculum focuses roughly equally on proof-writing and problem-solving--a fair division, although I wish there had been more discussion of how Discrete Math can be applied.\r\n\r\nThe homework was where most of my learning took place, and it would have been a mistake not to do it as thoroughly as possible even if each assignment is only 4 percent of the grade.  (Not everyone does their homework thoroughly.)  Homework is ABSOLUTELY ESSENTIAL for preparing for the three exams, which are long and complicated exercises in problem-solving and proof-writing speed.  As a warning, almost no one could finish the second midterm exam.  This includes some of the best remaining students.  Fortunately, the exams' open-book nature and the grading curve meant they were actually easier than exams in many other classes.  The 6 homework assignments were 9 to 20 handwritten pages each, and each one usually took me 10-20 hours to finish.  Many questions were difficult, and office hours often saved me.  \r\n\r\nThis course has a high attrition rate--perhaps one-third to more than half of the original students choose to drop it after the first lecture, including some of Columbia's best and brightest.  There might be several reasons for this.  Professor Grinspun calls on students unannounced and does not hesitate to embarrass them (although I never saw him embarrassing anyone unprovoked).  Homework 1 was as difficult as the other assignments, which may have led some students to believe the course would be more demanding than it actually was.  The heavily proof-oriented nature of Discrete Math may also have scared off some.  In my opinion, DROPPING THIS COURSE INSTEAD OF PRESSING THROUGH IS A TERRIBLE MISTAKE.  My experience was that around week 4 of the course, proofs suddenly became less intimidating and around week 5 or 6, Professor Grinspun mellowed out.  What students contend with is a not especially time-consuming commitment, as CS courses go, and possibly one of the 5 best undergraduate courses in the CS department.  I enjoy it, and would strongly recommend it to students with the appropriate background (some introduction to programming such as COMS W1004; pre-calculus or, better yet, calculus; and, if you're really concerned about writing proofs, the supposedly well-taught Introduction to Higher Mathematics).", 
      "workload_text": "Not too bad for a CS course, even though when I began I had almost no experience writing proofs.  Homework 1 was certainly an adjustment, but the workload remains on a more or less even keel from that point onward and actually became easier in the second half.  Basically, nothing to be too worried about."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Fri, 24 Apr 2009 19:33:18 GMT", 
      "id": 22620, 
      "professor_ids": [
        9349
      ], 
      "review_text": "Etienne is great.  As a TA for Professor Grinspun, his performance is consistently above and beyond the call of duty.  He routinely stays long past his posted office hours to finish addressing our questions, and sometimes holds extra office hours as needed (including after class).  Etienne is one of the few TAs I've seen who actually takes the trouble to attend Professor Grinspun's lectures.  The occasional course lectures he has given are as clear as the professor's, and it would be hard to improve on that level of clarity.  Etienne's other responsibilities include writing the homework assignments.  He is very good at making homeworks appropriately difficult (challenging but not impossible) and using homework to supplement the educational content of the lectures.  He is also patient about clarifying our questions.  The homeworks prepared us well for the exams, which Professor Grinspun wrote.", 
      "workload_text": "The homeworks he designed were difficult--the 6 assignments per semester took roughly 10-20 hours each and ran about 9-20 pages.  However, they were not impossible, and the workload was very steady throughout the semester which is quite a teaching accomplishment."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Fri, 24 Apr 2009 19:35:01 GMT", 
      "id": 22621, 
      "professor_ids": [
        9350
      ], 
      "review_text": "Hui is a very good TA for Professor Grinspun.  He held a quite helpful review session that clarified many of our questions about Midterm 1.  Hui is willing to stay late to explain the subject for us, and is very patient with students.  During office hours he is knowledgeable and clear.  In my experience, Hui's grading of assignments has been meticulous, and assignments were returned in a timely fashion.  Hui seems to be doing well in all aspects of his TA responsibilities.", 
      "workload_text": "N/A--Hui was not responsible for this part of the course."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Wed, 23 Dec 2009 16:08:25 GMT", 
      "id": 23581, 
      "professor_ids": [
        40
      ], 
      "review_text": "A strange, infuriating, wonderful class. Almost certainly my favorite class this whole semester, but I can't quite figure out why.\r\n\r\nGross is absolutely brilliant -- there's no question about that. He just radiates a sort of aura of genius while he lectures. The class inevitably brings up questions about things that are peripheral to the course material: the incompleteness theorem, decidability, complexity, topology -- Gross can explain it all. But the CS department here is full of brilliant people, and none of them have (yet) inspired the same kind of reaction from me that Gross did.\r\n\r\nHis lectures and course notes are fantastic. Clear, concise, elegantly typeset -- you could learn all the material from only reading the online notes, or from only going to class and reading nothing at all. But Blaer is a great lecturer, and Allen's notes are just as good; again, I never looked forward to either of their classes as much.\r\n\r\nHe's digressive, but...actually, I don't think there's another lecturer in the department quite as digressive as Gross. And maybe that's the point. When your question about the well-definedness of negative moduli launches a fifteen minute discussion of how humans understand made-up words (and no answer to your question), you're learning. When you're treated to a lengthy description of the mechanisms used to solve the four-color problem or the Poincare conjecture, you're learning. The main content of his lectures teaches you discrete math, but the digressions teach you to think like a computer scientist.\r\n\r\nI think CS students here have a tendency to underestimate the usefulness of this class. If you are planning on doing anything in real computer science (and to a certain extent, even software engineering) discrete math is absolutely crucial. If you can't put together a proper inductive proof, you can't do CS Theory, and you can't do Analysis of Algorithms.  If you can't reason about graphs, then you'll never really understand what's going on in Data Structures or in Networks. I would have been helpless on the first Linear Algebra homework this semester were it not for the tools I picked up in this class...you get the point.\r\n\r\nThis is powerful stuff. Learn it from Gross.", 
      "workload_text": "Biweekly problem sets. Some of the problems are really tedious, so the homework is much less unpleasant if you spread it out over a few days. The TAs will love you if type everything up in TeX (now would be a good time to learn)."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 02 Jan 2010 04:38:12 GMT", 
      "id": 23733, 
      "professor_ids": [
        40
      ], 
      "review_text": "I'm definitely not the only student with a love-hate relationship with this class. On the one hand, much of the material was fascinating in and of itself (NP-completeness, probability tips and tricks, graph theory) and tied in well with 1007 material; on the other hand, I couldn't draw any connection between units and if I didn't understand one intuitively (which did happen) I never really got it (which happened more often).\r\n\r\nGross is great and I enjoyed his lectures, though they were at times dry. He really knows his stuff, and loves tangents about the material we're learning (almost all of which helped us understand said material).\r\n\r\nI'm keeping the text and lecture notes, all of which I'm sure I'll dig out in a few years with intense regrets about not paying more attention during class.", 
      "workload_text": "Six problem sets, none of which were impossible. Two midterms (averages in the 50s and 60s) and a final which focuses largely on the last two chapters. Doable."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 04 May 2010 19:39:56 GMT", 
      "id": 24258, 
      "professor_ids": [
        10192
      ], 
      "review_text": "Don't know why the CS department did this, but Abishek was a grad student when he taught this class. First time teaching.\r\n\r\nNot the greatest teacher in my opinion; but for the first time teaching, not the worst. He stated repeatedly that he was limited by the lecture notes, that he was told by the Professor Gross to go straight from his lecture notes. Which he did. He did a decent number of examples, but he didn't do them very well, i.e. skipped a lot of steps. The concepts didn't really stick. If you wanted something clarified, however, he was very good at answering questions.\r\n\r\nThe things he covered in class often carried over to the test, but never to the homework. What the lectures were doing and what the book/homework emphasized were completely different. They didn't have much overlap.\r\n\r\nHe had abnormal ways of going about tests. He experimented with different ways to do review sessions over the web, i.e. TokBox, Google Wave. It was effective enough, I suppose. He answered the questions that people came up with, but it wasn't as easy to understand; it would've been easier if he did it on a chalkboard. Additionally, the way he grades: if you improve from the first test to the second test by at least 15 points, he'll take the higher of the two. But if you had higher on the first than the second, he won't change the scores. If he is your teacher, I would recommend going to class. Looking at the lecture notes tends not to be enough: he'll go into tangents, which he'll end up testing.\r\n\r\nHaven't taken the final, but it seems he plans to curve to either a B+ or an A-.\r\n\r\nHe has a tendency to go a bit too much into his personal life. He's also always telling you good courses to take.", 
      "workload_text": "6 long problem sets, due about once every three weeks.\r\n2 midterms, 1st one easier than the second.\r\n1 final.\r\nCurved to either a B+ or an A-."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 18 Jan 2011 17:11:24 GMT", 
      "id": 25534, 
      "professor_ids": [
        40
      ], 
      "review_text": "God, Professor Gross is wonderful. I want him to be my uncle.\r\n\r\nThat said... the class was really entertaining, not particularly hard, and basically lots of fun if you go to lecture. Prof. Gross is hilarious and obviously very smart, but he has the best, nerdiest sense of humor (read his quotes page to see what I mean: http://www.cs.columbia.edu/~gross/things_I_said.html) We actually did a demo of the birthday problem in class!!\r\n\r\nThe work is on the easy side, but laughably easy. It's a smorgasbord of fun, interesting stuff. This is DEFINITELY a recommended class for those of you who need tech electives.", 
      "workload_text": "Psets every two weeks, nothing TOO hard but they were rather long. We had 5 free late days on these; every day after would be -10% or something like that.\r\n\r\nTwo midterms, final -- nothing unusual."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 12 May 2011 11:32:10 GMT", 
      "id": 25959, 
      "professor_ids": [
        515
      ], 
      "review_text": "Cannon is definitely NOT a good discrete math teacher by any standard. In fact, he could possibly be the worst discrete math teacher at Columbia. Having had him for 1004, I thought he would be as a great a teacher at discrete math. He cursorily goes over TONS material which he seems not to have mastered well himself, but succeeds at covering it up. He assigns EXTREMELY long problem sets that are proof heavy. Attending class was a major time-sink as he would be late for class, his lectures were unorganized and his class examples trivial, not helpful at all when it came to doing the problem sets.Though discrete math is a useful class, I disagree it is the most important (as Cannon appears convinced) and he should be more considerate of this view.\r\nThe midterm for the class was fair, but the final impossible. Of the many faults Cannon's teaching style has, the worst is probably the fact that the final is cumulative, with approximately 700 pages worth of material--including over 300 vocabulary words and proofs--to know by heart. \r\nStrongly consider taking discrete math with another teacher.", 
      "workload_text": "Extremely heavy. 6 long problem sets--each about 18 multi-part questions. Mid-term is attemptable, but lots of material to cover (closed book, no cheat-sheet). Only gets worse with the final, with over three times the material to cover and hundreds of vocabulary words to know by heart."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 17 May 2011 17:16:55 GMT", 
      "id": 26087, 
      "professor_ids": [
        515
      ], 
      "review_text": "For a Discrete Mathematics course I felt that Cannon did pretty good job. He was enthusiastic about the course material and was clear in his presentation of core principles in Discrete Mathematics. His proofs were simpler than the textbook's but they showed the basis for core theorems and for what he expects in proofs. Cannon was also able to effectively condense a 800 page textbook into only a notebook of notes. While the textbook is huge, most of the material in the textbook are proofs and there are only a 100 or so pages of actual definitions, theorems and algorithms that you need to learn. However,I feel that Cannon was irresponsible in frequently arriving late for lecture.", 
      "workload_text": "The workload is reasonable. We had 6 problem sets that take about 10-20 hours each but you get two weeks to do them. The midterm was easy (definitions, some calculations, and 2 easy proofs) but the final was extremely hard (many proofs that are not all intuitive)."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 19 May 2011 00:06:26 GMT", 
      "id": 26117, 
      "professor_ids": [
        515
      ], 
      "review_text": "I have to disagree on most accounts with the below polemic on Adam Cannon. There are two separate issues needing to be addressed here. First, whether or not Adam Cannon taught the class well, and second whether or not it was hard and time-consuming.\r\n\r\nI can say that I thoroughly enjoyed the class and, as usual, found Adam Cannon to be an engaging and witty lecturer. It is true, he wasn't on cruise control as he is while teaching 1004, but he was still very good. His explanations were intuitive and clear and he realized that most people taking the class had not had previous exposure to a higher level of mathematics. As a result, he time again emphasized and explained to us, the importance of thinking truly mathematically as it were. In other words, he taught us to recognize the importance and place of proofs in mathematics and stated that while examples are often helpful, they are simply not adequate to understand abstract concepts completely. He sometimes proved theorems which were not in the book, so be aware of that and occasionally makes notational mistakes on the board so don't be afraid to point them out as he often doesn't notice them afterwards. I felt lost in only one of the lectures which was the one on solving liner homogeneous and non-homogeneous recurrence relations, I don't know what happened there but it seemed like Adam Cannon was having a monologue with the board for 20 minutes.\r\n\r\nIn class, he asks interesting puzzles related to the material and will always give you an idea about the real-world applications of the concepts being covered. He is also just friendly and approachable. He has 4 office hours a week, which is more than most professors, although there is often a line so go early. Definitely go to office hours if you get stuck on the homeworks, he's more than happy to help. He'll rarely give away an answer but will certainly tell you how to approach any given problem.", 
      "workload_text": "6 homeworks assignments in the semester - we had 2 weeks to complete each assignment. They were pretty long in an absolute sense, but given that we had two weeks to solve them, the length was by no means unreasonable. A quarter to a third of the problems in each assignment were proofs but most of these followed almost straightaway from the definitions. Writing proofs was hard at first for some people, but then again learning how to write basic proofs is half the point of the class. The bulk of the time-consuming problems are in the earlier part of the assignment so you can get started early during the 2 week period. One thing I did find was that the point distributions on the homeworks could be bizarre and some hard problems had very few points assigned to them. Also the TAs sometimes graded kind of harshly so if you think they overlooked something and your solution was correct, definitely go back to them and ask.\r\n\r\nMidterm was easy, the 2 proofs were perhaps the only tricky part. The final was cumulative and the questions were difficult. Lots of counting problems, 4 proofs  (3 of them manageable) and some modular arithmetic. 20 points is testing vocabulary so these are basically free points and you have to learn the definitions anyway in order to do well on the proofs. It also doesn't take all that long. According to him, the class is curved to a high B so about 30-40% of people get some sort of an A."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 24 May 2011 15:45:54 GMT", 
      "id": 26175, 
      "professor_ids": [
        515
      ], 
      "review_text": "Professor Cannon is great.  While his lectures aren't always structured like they're coming from an outline you can copy down, they aren't boring and they do get the information across.  The point of Discrete Math is to make you learn to think through problems, and few problems in the real world just appear in your head with a clear path to get you from A-B-C-D-E.  If it were that easy, it wouldn't be a problem that you needed to learn how to solve.  When he lectures, he doesn't just go A-B-C-D-E, he tries to get you to think about the process behind getting to E.\r\n\r\nThe class covered a lot of material very fast, and it definitely helped if you had a rudimentary familiarity with things like statistics, logic, and counting.  But if you didn't he gave enough information that you should have been fine.\r\n\r\nHis lecturing style is a bit free flowing.  He seems to have an ordered list of a dozen or so things to get through each lecture, and will work through them.   He does enjoy occasional diversions to related topics.  He clearly likes the material and manages to keep what could be a very dry topic interesting.  He welcomes questions, and is one of the best professors I've seen at being able to explain concepts multiple ways when people don't grasp them.  If you ask a stupid question, he won't sugar-coat his response, but he won't out-right mock you either.  And in one-on-one interactions, he's great.  Very approachable.\r\n\r\nOn the downside, he was usually 5 minutes late to class, and there was a very long lag time for homework to be graded and returned.\r\n\r\nAnd he LOVES his definitions.  Make sure to copy them down and memorize them for the exams.  You'll need them both for the terms section and also for the proofs.  They're the keys to the kingdom.", 
      "workload_text": "One problem set every two weeks (about four hours of work)\r\nOne midterm\r\nOne final (cumulative)"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 17 May 2012 17:16:46 GMT", 
      "id": 27367, 
      "professor_ids": [
        11575
      ], 
      "review_text": "The good: Dawn is incredibly fair and straightforward. The material was a breeze. Her exams were only somewhat more challenging than the homework, and lined up with what we did in class.NO problem sets, but there are potentially quizzes every morning. This keeps you on top of your game, though, and the problems come directly from the homework.\r\n\r\nThe bad: She's unbelievalby accomodating to her students (which is great), but this means she answers every dumb question in class...questions that are often too dumb for office hours. This is incredibly frustrating and holds back the entire class.\r\n\r\nOverall, I'd strongly reccommend her, though. She's a wonderful person and made this class unbelievably easy.", 
      "workload_text": "Next to nothing. No p-sets. Suggested problems instead, which showed up on quizzes the following lecture. If you pay attention in class and glance over the suggested problems, they're no problem."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 17 Dec 2012 16:27:38 GMT", 
      "id": 27742, 
      "professor_ids": [
        40
      ], 
      "review_text": "I cannot believe this guy has a silver nugget...\r\n\r\nPerhaps Prof. Gross has just become more puzzling as he gets older, because the class described by other reviewers is completely unlike the one I experienced. This guy can barely finish a sentence. He is actually pretty funny sometimes, but the material is unbearably boring and he does a poor job of actually teaching us anything. It is clear that he is an expert on the subject and probably a genius, but he's one of those professors that can't actually teach very well.\r\n\r\nMy biggest issue with the class is that the terrible lectures have almost no relation to the homework assignments, and the homework assignments have almost no relation to the exams. \r\n\r\nIt doesn't help that the TA's are complete sticklers about answers on the homework. They will take points off for almost anything they can. You will most likely heavily rely on solutions found on the internet.\r\n\r\nLuckily, Prof. Gross provides decent notes on the subject and posts the solutions from previous quizzes and exams. The exams are all open book.\r\n\r\nUnfortunately, Prof. Gross flies through the material. I only took the class because it is required for all computer science majors. I really wish it wasn't required.", 
      "workload_text": "6 HW assignments\r\n2 Midterms\r\n1 Final exam"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 08 Jan 2013 16:36:43 GMT", 
      "id": 27949, 
      "professor_ids": [
        40
      ], 
      "review_text": "I am a math major and I needed some upper level courses.  Discrete Math had amazing reviews and I thought it would be easy as a class of numbers for a math major amongst computer science majors, right?  Wrong.\r\n\r\nYes, the material itself is easy (basic probability, number theory, graphs), and you don't actually ever have to learn it because all the tests are open book/notes.  However, all the exams are REALLY HARD and getting harder by the year (he gave us past exams for practice).  A LOT of proofs, hard graphs on the final, stuff you've never seen before so you can apply random stuff from your notes, AND DID I MENTION PROOFS?  So overall, this class requires virtually no work or studying and there's really nothing you can do to prepare for the exams because they are open notes, but the exams are really difficult.  I got a B in this course as a math major.", 
      "workload_text": "2 midterms and a final.  Homeworks are easy - there's only like 6 of them.  Don't do it all in one night"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 24 Jan 2013 15:56:38 GMT", 
      "id": 28037, 
      "professor_ids": [
        40
      ], 
      "review_text": "Although he is adorable, brilliant and very nice, he is not very good at articulating or teaching. I can pretty honestly say that I didn't learn anything from him that I didn't read from the textbook after he already lectured on it, because he is that unclear and confusing.\r\n\r\nHis notes for the class (which he uploads on his website, and you should most definitely print out and bring to class) are wonderful. They are sometimes confusing, but you can always use the textbook to supplement your understanding of the material.\r\n\r\nThe grading of the homework is ridiculous, and the tests are so much easier than the homework.\r\n\r\nIn addition, when taking the tests, definitely read the textbook because chances are, by the first midterm, you won't know what's going on from the class and you will feel like an idiot.", 
      "workload_text": "roughly biweekly homework assignments\r\ntwo midterms\r\nfinal"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 21 May 2013 16:43:57 GMT", 
      "id": 28426, 
      "professor_ids": [
        11575
      ], 
      "review_text": "Do yourself a favor and take this class with Jonathan Gross to actually learn Discrete Math. He's not great, but he beats Dawn Strickland.\r\n\r\nDawn is probably the nicest professor in the whole of Columbia. She's like a pre-school teacher. This doesn't really help. She literally didn't teach us anything this semester. She teaches the very basics of theory and does some problems in class. She assigns problems from the textbook that are harder than what she teaches in class. Her exams have problems which are harder than the textbook. This is a recipe for disaster. I think math classes should be taught in such a way that students get loads of practice and are tested at a level equal to what they are prepared for, not more. We also missed 3 classes this semester, so we didn't cover a lot of material.\r\n\r\nIn the end, I didn't learn much from this class. I feel under prepared for CS Theory. I think Dawn should count the problem sets towards the final grade, and give us harder, more relevant homework, which will prepare us for the tests. The textbook goes into the subject in depth. You should read the more interesting proofs and theories from the text if you're interested in the subject.", 
      "workload_text": "60% from 2 highest midterms of 3\r\n40% final\r\n\r\nHW doesn't count towards your grade."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 23 May 2013 19:49:19 GMT", 
      "id": 28449, 
      "professor_ids": [
        11575
      ], 
      "review_text": "In this review, I'm going to be very careful to distinguish between the content of the course and the instructor.  \r\n\r\nI can't say enough good things about Dawn both as a person and an instructor.  She is an excellent instructor who definitely took her role of teaching this class very seriously and did a great job teaching it.  She was always very well-prepared for lectures, easy to follow, and enthusiastic.  She's also very approachable and will take the time to answer questions and help students who are having trouble.  In class, rather than just doing math on the board, she makes a point to write out (in words) the steps that she is doing when they are confusing, which makes note-taking a lot more valuable.\r\n\r\nThat being said, I strongly believe that the CS department needs to rethink content of the course.  What I'm about to say applies to any section of this course taught at Columbia.  It covers a wide range of topics, and therefore doesn't have much time to go into depth on any of them.  This alone is not a problem, but what is a problem is that the course is way too easy, almost laughably so, for anyone who has a decent background in math.  This really would be a good course to have an honors version and a regular version (with both countable towards the CS major and minor).  Regardless of who you are, you'll probably learn something in this class.  However, some people will learn a lot more than others, and the course attempts to appeal to students who have had a wide range of mathematical backgrounds.  As someone with a relatively strong background, some of the questions I heard in class were cringe-inducing and painful to hear.  \r\n\r\nA detailed day-by-day syllabus is provided for the course.  I definitely recommend going to the lectures for the material you're trying to learn rather than attempting to learn it out of the book.  The latter is possible, but it's probably harder and more time-consuming than trying to learn from the book because the book is not very good.   Homework from the book was assigned but not collected.\r\n", 
      "workload_text": "The grading was based on three non-cumulative exams and a cumulative final, and was computed by the better of:\r\n30% Best Midterm, 30% Second Best Midterm, 40% Final\r\n25% Best Midterm, 25% Second Best Midterm, 50% Final\r\n\r\nEither way, the worst midterm was dropped.  The averages on the exams were as follows:\r\nMidterm 1: 80\r\nMidterm 2: 66\r\nMidterm 3: 68\r\nFinal Exam: 80"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 25 May 2013 07:46:51 GMT", 
      "id": 28464, 
      "professor_ids": [
        11575
      ], 
      "review_text": "Firstly, as the previous reviews have stated, Dawn Strickland is one of the nicest professors you can have. She is very friendly and approachable and will gladly answer any questions you have. However, I have several gripes with the course (not necessarily with Dawn herself).\r\n\r\nTo start, the textbook for the class is garbage (Discrete Mathematics and Its Applications by Kenneth Rosen). It's full of convoluted examples with little explanation for how the problems are solved. The information is conveyed in the most elaborate terms, and once the material gets difficult, it is extremely difficult to understand. I think the textbook really needs to be changed. Just check out the Amazon reviews for it: http://www.amazon.com/Discrete-Mathematics-Applications-Kenneth-Rosen/dp/0073383090\r\n\r\nSecondly, the optional homework comes straight from the book. I'm certain that almost nobody did it, because (1) it's optional, and (2) the book is no good. There are no quizzes in the class either, so your grade is entirely dependent upon the exams.\r\n\r\nHowever, Dawn's lectures are well-structured and pretty informative. You can learn most of the easier material just by going to lecture. However, once the material got harder, I couldn't understand much of what was going on in class. To study for the exams, I pretty much just Googled what I needed to know from the book and then took her practice exam.\r\n\r\nMy last gripe is this. I actually did well on the exams and got a good grade in the class- however, I cannot say that I know much of anything about Discrete Math. I really don't feel like I learned anything from the course. If you asked me what Discrete Math is and why it's important, I couldn't tell you. I studied in a way that allowed me to do well on the exams for some reason, but I'm still confused about much of the material and really was not satisfied with the course.\r\n\r\nAs a whole, I don't think it's hard to get a good grade in the class. It just wasn't a very pleasant experience, and I feel like the course needs a major overhaul.", 
      "workload_text": "Optional homework, no quizzes. 3 midterms (drop the lowest one) and a final."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 25 May 2013 14:35:13 GMT", 
      "id": 28466, 
      "professor_ids": [
        11575
      ], 
      "review_text": "Previous comment said Dawn was a good teacher despite the classing being too easy, but I actually doubt if Dawn really taught well. She seemed to mess around with what she said in class: A frequented scene was she wrote on the board, stopped, and found out what she just wrote was wrong, and more wrong than a pen slip. I don't think this is expected of a good teacher. In fact, both the course textbook and a TA recitation session seemed to have better instruction than the class lectures.\r\n\r\n", 
      "workload_text": "Homework is not collected or graded, and you typically don't need to need do them (They have no value either in understanding the course material or in helping for the exams). If you don't understand anything, just read the book. Reviewing for midterms generally takes 1 hour, which makes me doubt if this is a 3-credit course."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Sat, 25 May 2013 20:14:40 GMT", 
      "id": 28467, 
      "professor_ids": [
        11575
      ], 
      "review_text": "Dawn definitely does not deserve a silver nugget.\r\n\r\nYes, she is generous with grades and is very friendly, but she does not teach! Discrete Math is a very broad and deep field. We hardly did anything in this class. She spent a lot of time doing basic probability and counting, and not enough time on more advanced concepts. We just brushed over loads of cool graph algorithms and problems, without actually solving one in class or seeing in depth proofs.\r\n\r\nDawn's tests were of decent difficulty, but she did not expose us to problems of that difficulty before hand, which was frustrating. This class should have an honors sequence.", 
      "workload_text": "40% final. 60% midterms"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Wed, 22 Jan 2014 22:17:51 GMT", 
      "id": 29183, 
      "professor_ids": [
        40
      ], 
      "review_text": "Professor Gross has retired and probably won't be teaching again.\r\n\r\nCULPA wants me to write more. Let me say simply that he taught this class for ~30 years, and it shows in ways both good and bad. His lectures were polished, sometimes a little too polished and he was more focused on the small talk and jokes than the materials. However with his lecture slides, and the fairly good textbook, it mostly went well.\r\n\r\nHis exams are what you expect, and since they're open book they are much lower stress than you might otherwise think.", 
      "workload_text": "~7 problem sets. 2 midterms and a final. All very standard, he gave out practice stuff from the 90s. You can see it on the website."
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Mon, 26 May 2014 04:00:58 GMT", 
      "id": 29567, 
      "professor_ids": [
        11575
      ], 
      "review_text": "I'm sorry but this class is just not on par with the equivalent classes offered by other top universities . While you learn basic (extremely basic) proofs, a bit of probability and counting, and some graph theory - you learn very little of all and you only learn it at a very practical level. Professor Strickland will stop to take every question and it's a large class so expect to spend a lot of time listening to things repeated over and over again. The homeworks are pretty easy and all done through CourseWorks so a textbook is not necessary unless you want to do the practice problems she recommends, which are only worth it if you don't have a decent math background because the homework and test questions can all be solved using the same techniques used on examples in class. If you're the kind of person who prefers to read the textbook - just buy it and don't go to class. The tests are pretty easy if you enjoy math and more than enough time is allotted. An honors class in the subject really should be offered but in the meantime, enjoy the easy A if math is your thing. And don't look at the homework given by many other schools or you may find yourself depressed it's way beyond what you were taught.", 
      "workload_text": "Really light\r\n~7 psets with 7-15 questions, many of which are multiple choice\r\n2 Midterms\r\n1 Final"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Wed, 06 Aug 2014 03:45:53 GMT", 
      "id": 29690, 
      "professor_ids": [
        12959
      ], 
      "review_text": "This review is for the summer session Discrete Math class with prof. Robert Holliday. He only teaches in the summer, and apparently he has been teaching at Columbia for many years. He seemed really nice in the beginning, but that turned around quickly. He doesn't care about the students actual learning the material; every lecture felt rushed.\r\n\r\nThe homeworks were very long. However, they made up mere 20% of the final grade. I thought it was unfair given the  amount of work you had to put in in them. The midterm was very easy, too easy, I'd say. He gave us a study guide and said that what wasn't on the study guide would not be on the exam. That wasn't true: one problem asked to use a formula that didn't appear on the study guide. The final was much harder than the midterm. It seemed that he made it so intentionally to force a better grade distribution. \r\n\r\nIf he's the only option for the summer, don't take it. Just take the regular class in the fall or spring. ", 
      "workload_text": "20% problem sets, very long\r\n40% very easy midterm\r\n40% not so easy final"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Tue, 18 Nov 2014 01:03:55 GMT", 
      "id": 52303, 
      "professor_ids": [
        11575
      ], 
      "review_text": "She is without a doubt the worst professor i've ever had at columbia. She was rude in person, would constantly screw up proofs in class, and would generally explain poorly. Everything I learned from this class, I learned from the (somewhat lacking) textbook. Avoid at all costs.", 
      "workload_text": "Optional textbook psets - 1 per week\r\nPop quizzes(?) (not in my section, but she said she had done it before)"
    }, 
    {
      "course_ids": [
        397
      ], 
      "created": "Thu, 04 Dec 2014 21:59:18 GMT", 
      "id": 62351, 
      "professor_ids": [
        11575
      ], 
      "review_text": "Despite what past reviews have said about Dawn, there's another perspective that's worth considering. Which is that she is an incompetent teacher w.r.t. teaching concepts that students are not already familiar with. For students with a strong mathematical background, this is no problem, because, as previous reviews have mentioned, this class covers more breadth than depth. But because of the increase in CS majors, there's a corresponding increase in students in the class who haven't had as rigorous a math background. For us, Dawn's explanations leave a lot (everything) to be desired. She frequently backtracks, corrects herself, and equivocates when answering questions, e.g. (in response to a student's question) \"Well, you're right if we're on the same page,\" which is a non-answer, or \"If you're confused just try the practice problems on this at home,\" which defeats the purpose of going to class. \r\n\r\nThe fact that the class seems to be split into students who have seen everything except graph theory before and students who have seen none of it means that, at least this semester, the latter were afraid to ask questions, which Dawn read as comfort with the material rather than confusion about the concepts (and/or the motivation for them). Disappointing, because I feel like the subject could be rewarding as taught by a teacher good at working with large audiences.\r\n\r\nAvoid Dawn's section of this class if you can.", 
      "workload_text": "2 midterms and a final. These bite if you're not careful.\r\n6 relatively easy problem sets."
    },
    {
      "course_ids": [
        234
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 517, 
      "professor_ids": [
        351
      ], 
      "review_text": "An immovable boulder in the CS major track, CS students usually put this one off as long as possible. While any class in Computability would be rough, Zeph means well and makes a good-faith effort in this huge and unfriendly subject. His lectures are actually decent and clear (the official word is that he has \"gotten alot better\" since starting a few years ago), but the class is still best-handled by drinking your new \"Computability\" brain cells to death the minute the final is over, and not stopping until they're good and dead.  Seriously, though, the organization and clarity of the course overall are better than they might be.  With Zeph, the book is good and you know more or less what is going to be on the tests ahead of time.  Students don't look at an the midterm and go \"what the fuck, how can he be asking about THAT random thing!?\" as they do in so many other classes.  A hard, hard class, but with that said it's about the best it could be.", 
      "workload_text": "Weekly problem sets (this is rough, but it's the only way to get all the material in without it being overwhelming come finals), 2 Midterms (!), Final."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 22 Jan 2002 00:00:00 GMT", 
      "id": 1872, 
      "professor_ids": [
        351
      ], 
      "review_text": "He's a very nice guy and he really wants to help you, but there's a good chance that by the time you go to him for help it'll be too late. The first half of the semester was extremely easy, which is why the second half hits so hard. Before you know it you'll be weeks behind, and at that point falling asleep in class to his not-so-stimulating lectures sounds like a good idea. The best advice is AS SOON as you don't understand ONE THING, no matter how small, get help with it, or you'll be lost for good. He tries so hard to make the students learn so that if you aren't, you'll feel guilty.", 
      "workload_text": "Weekly problem sets, increasing in difficulty throughout the semester, midterm, and final."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Wed, 14 May 2003 00:00:00 GMT", 
      "id": 5653, 
      "professor_ids": [
        1621
      ], 
      "review_text": "Great professor who really, really knows her stuff. Lectures well and does not use slides (as Grunschlag does) so going to class is important. Friendly and helpful during office hours. Funny and very likable! Subject material itself is very interesting and creative, but can also confuse and/or frustrate (especially people who are not very mathematical) because it is all proofs and the problems are extremely interrelated and similar. Reading ahead a bit before lecture would definitely help tremendously.", 
      "workload_text": "About 10 problem sets, midterm, final. Quite manageable."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Thu, 07 Aug 2003 00:00:00 GMT", 
      "id": 6180, 
      "professor_ids": [
        1621
      ], 
      "review_text": "Prof. Malkin is one of the is the best professors I have had in the CS department.  She's brilliant, but can explain topics clearly and doesn't make you feel like a moron.\n\nGo to class because the homework and test questions are based on her lectures.  She's very friendly and approachable.  However, don't even try to BS her.  She will not give out last minute extensions (unless you have an emergency) and collects homework at the beginning of class or it's considered late.\n\nTake the time and do the problem sets yourself.  This is one of those classes where you cannot cram the night before the test and expect to do well.  You have to really understand the concepts.", 
      "workload_text": "Problem set every week, reasonable midterm and final."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Sat, 13 Dec 2003 00:00:00 GMT", 
      "id": 7097, 
      "professor_ids": [
        351
      ], 
      "review_text": "Zeph is a great guy, and he is really interested in you learning, and if he sees you putting in effort into the class he will help you and give you incentive along the way. He is always giving extra credit and stuff. The problem is that this class is hard, and takes a sh**load of time. don't slack off in the begining because those few points you missed on in the begining will come back to haunt you in the end.", 
      "workload_text": "5 problem sets one every other week 6 -8 problems very time consuming. 1 inclass midterm, 1 quiz worth 10% and an inclass final. If you are falling behind do not hesitate to talk to him, and ask for extra credit probs."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Fri, 19 Dec 2003 00:00:00 GMT", 
      "id": 7268, 
      "professor_ids": [
        351
      ], 
      "review_text": "Great professor, really seems to like every bit of the class. So, even if you hate the class in the beginning,  his enthusiasm might transmit to you as well.", 
      "workload_text": "5 hwks. midterm, quizz, final, and participation (which actually amounts to 'attendance')"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Sat, 15 May 2004 00:00:00 GMT", 
      "id": 8764, 
      "professor_ids": [
        351
      ], 
      "review_text": "Great Professor.  Really enjoys the material, and enjoys teaching it.  He'll even bring some humor into the class.  Also, the subject material is really interesting (turing machines, P vs NP, etc).  Also, if you are CS, you have to take the class anyway, and he is pretty much the one that teaches it.", 
      "workload_text": "A few midterms / quizzes and a final, all fair.  A few homeworks, challenging, but not ridiculous.  A fair grader."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Sun, 26 Dec 2004 00:00:00 GMT", 
      "id": 10260, 
      "professor_ids": [
        351
      ], 
      "review_text": "First let me say: this is a DIFFICULT class. In fact, this is the most difficult non-programming class in all undergraduate computer science classes.\n\nSecond, Prof. Grunschlag tries hard to explain the material as best as he can, but sometimes gets carried away in long proofs that won't ever be tested. \n\nThird, The homework problem sets are very very time consuming and usually you cannot solve all of them by yourself.  Group discussions on the homeworks are strongly encouraged.\n\nFourth, the tests are slightly easier than the homework problems, but not a lot. The tests do not usually involve lengthy proofs like the homework does, but there are a lot of tricks in the tests that you need to be careful with. \n\nAll in all, a difficult class, but with a VERY BIG curve. So even if you feel you are doing poorly, you are probably OK.", 
      "workload_text": "A problem set every TWO weeks. 2 midterms 1 final. An easy B+ at least."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 04 Jan 2005 00:00:00 GMT", 
      "id": 10799, 
      "professor_ids": [
        351
      ], 
      "review_text": "The subject is hard, but Zeph is very passionate about it and works hard for his lectures. He must spend a lot of time preparing for his lectures, his homeworks, and exams, therefore, it is expectected that you will also do your part and work hard to meet his expectations. \n\nthe homeworks are VERY time consuming!! and you might not be able to solve all of them yourself, some problems could be easy once in a while, but others could require you to be a genious to come up with a unique efficient solution. It is recommended that you form study groups to do the hws and study for exams, it will make the experience less painful. \n\nIf you master the hws, and the readings of the book and think you are ready for the test, you'll be presented with new problems not seen before that will test how much you internalized the knowledge of  the subject . \n\nbe expected to do a lot of studying on your own, of course that if you are a math person, who loves math and cs theory, you'll be find, but if not, then a lot of work from your part will be needed. \n\nI enjoyed the class, is one of those classes that when you finish, you take a lot whole information of the subject with you.\n", 
      "workload_text": "workload: this is very time consuming class!! problem sets everyother week, but they take a lot of time, so start early. \ngrading: for the hws, it will depend on your TAs,  many score low on exams and hws, the great think is that there is a big curve, which is  great. "
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Fri, 20 May 2005 00:00:00 GMT", 
      "id": 12217, 
      "professor_ids": [
        2550
      ], 
      "review_text": "The course is interesting, and Prof Feldman really enjoys the material espcially cnsidering that his advisor at MIT was the man who wrote the book you use. He is not the most exciting of lecturers, but he does cover the material in a effecient and clean manor. Prof Feldman is always ready to help, and seems to enjoy students coming to office hours to talk about P vs NP or the Red Sox, its your choice. He is a solid proffesor and I would recommend him if you are going to take computability.", 
      "workload_text": "6 problem sets, worth a lot. 3 quizes worth less. And a Final not worth as much as the problem sets. Get good grades of the p sets and you will be solid."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 17 Apr 2007 00:00:00 GMT", 
      "id": 19709, 
      "professor_ids": [
        1621
      ], 
      "review_text": "Prof Malkin is very approachable and is definitely on your side - but she won't go find you, you have to send her e-mails and especially go to her office hours. Her lectures are thorough and cover the book material pretty strictly, but I think she'd be more helpful if she spent a little more time structuring the material, saying \"You are here\" in the grand scheme of Computation and it's Proofs. Indeed, I think a map could be drawn of the proofs and their relationship to one another - this would help a lot in understanding the dependencies of proofs upon each other.\n\nWhatever you do READ AHEAD OF THE LECTURE. This stuff is nearly impossible to simply hear and absorb in clas, so having thought about the concepts beforehand will make all the difference in the world. Hell, you might even enjoy it.\n", 
      "workload_text": "Not too bad - homeworks don't count for much - but the tests are really based on the homeworks, so if you skip those, you'll be screwed come mid-terms/finals."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 15 May 2007 00:00:00 GMT", 
      "id": 19954, 
      "professor_ids": [
        1621
      ], 
      "review_text": "Hell if I know. I never went.\n\nThe website says \"CS Theory is the last course required of all CS undergrads\", but it should probably be more like \"CS theory is the last course of the day, don't bother.\" The topics mostly overlap with other courses (data structures) -- if you stay at home and read up on regexps and such, you'll be completely fine. The homeworks are basically perfect reflections of what you're accountable for, so if you can do them you're set.\n\nI'm not really complaining about Tal, she's pretty OK. At the end of the day, it's just another CS course repeating the same damn curriculum.", 
      "workload_text": "Ten homeworks (good for maybe an hour of work each, if you do the reading). Midterm and final with cheat sheets. Overall, pretty light."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Mon, 31 Dec 2007 00:00:00 GMT", 
      "id": 20725, 
      "professor_ids": [
        1621
      ], 
      "review_text": "Potentially a very dry topic, but Prof. Malkin was able to make it interesting. Mostly because she seems to believe a great deal in class participation, and engaged students in every derivation.\n\nOverall, I'd rate her highly.", 
      "workload_text": "~1 hw per week. 1 midterm, 1 final. Not too bad."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 21 Apr 2009 20:04:22 GMT", 
      "id": 22589, 
      "professor_ids": [
        1891
      ], 
      "review_text": "Overall: A really great class.\r\n\r\nLet's start with the bad: the lectures were not 100% terrific... so I tended to skip lecture sometimes and when I attended I sometimes didn't pay much attention. It's not that he isn't brilliant (he is... for heaven sake's he is the \"a\" is \"awk\"), it's just that he has trouble teaching to a class.\r\n\r\nNow for the good: His office hours are golden. I cannot stress this enough. If you go into his office hours not understanding something, you'll come out of it completely and utterly understanding the subject; end of story. He is TERRIFIC 1 on 1. The homeworks are incredibly hard, so I recommend checking in during his office hours to double-check your work (or ask for pointers -- no puns intended) before submitting.\r\n\r\nThe other: As I said, his homeworks are incredibly hard (think Discrete math, but far, far more difficult). One of the last problems he gave us included a proof that HE had made in 1993 or some such proving that the way that perl handled regular expression recognition was NP-complete (when he first proposed this... no one believed him until he proved it). There was no way I could have solved this problem without going to office hours. But moreover, with the possible exception of the aforementioned problem, his assignments, while hard, are pretty fun. I don't mean you'll think they are entertaining, but they are well structured, so they are informative, and if you end up understanding the problem, it really helps you get a comprehensive understanding of the material (which is great). He also gives out practice exams that are incredibly useful. Grading is decently quick and fair.\r\n\r\nThis class is required for CS majors, so you have to take it, but if you have an option of taking it with or without Aho, take it with.", 
      "workload_text": "1 midterm, 1 final, 6 homework assignments (approx 4-10 hours of work each)."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Wed, 22 Dec 2010 02:14:05 GMT", 
      "id": 25082, 
      "professor_ids": [
        1891
      ], 
      "review_text": "I looked forward to this class every day---it's probably one of the best courses I've ever taken. Aho is certainly not for everyone: he's a little dry and very odd, but he clearly cares deeply about the material, and does a good job explaining it. \r\n\r\nHe's a minor god in  computer science---his portrait is on the wall at the Google offices downtown---and this class is worth taking for that reason if no other; he's also shameless about reminding you of his associations with major gods of computer science, in particular his friend Don (Knuth, that is). If, like me, you enjoyed Gross's digressions, you'll probably also enjoy accounts of evenings spent (no joke) playing violin concertos with the author of \"The Art of Computer Programming.\"\r\n\r\nYou, like Aho, should care deeply about the material. This is a class about the fundamental questions of computer science---how problems can be described, how they relate to each other, how they are solved, and at the most basic level, what it means to compute. If all you want to do is write Java programs to fit a spec, you shouldn't have bothered with college: the whole point of studying computer science at an institution like this one is to learn how to answer questions like the ones Aho asks, and, you know, do something interesting with your life.\r\n\r\nIn summary, I had a blast; if you like oddball teachers and hard problems you will too.", 
      "workload_text": "Minimal. Five problem sets, four of which took a few hours and one of which caused me to spend an entire weekend staring at a blank sheet of paper (technically an empty LaTeX document, but who's counting?). Easy midterm, easy final."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Thu, 23 Dec 2010 17:43:13 GMT", 
      "id": 25153, 
      "professor_ids": [
        1891
      ], 
      "review_text": "Aho is a really really nice Professor. The problem is that he is too smart for his own good. Sometimes it's difficult to understand what he's trying to convey in class until you get to the problem sets and have to work through them. For the most part he tested exactly what he had taught and was very fair about it.\r\n\r\nThe real difficulty in this class is getting the material. Some people just understand it. Some don't. It's very much like Discrete Math where you are waiting for that ah-ha moment to arrive and suddenly connect the dots and for everything to make sense. Sadly that never came for me.\r\n\r\nHis stories are pretty funny and they make you realize how cool the CS dept is for having someone like Aho on staff. This is really a hit-or-miss class but I would say take it with Aho if you can.\r\n\r\nIn retrospect here's how I would have studied for this class if I could go back:\r\nReview your notes after every lecture and then make new notes. Try and see the differences between the various terms (ie: deterministic and non-deterministic, Recursive vs RE). Make sure you understand the theory stuff. Read the book BEFORE the lecture so you have a basic idea of what you're about to do. Do every homework over again before the exams. ", 
      "workload_text": "5 problems sets. 1 was really hard and the rest were decent (or at least on-par with what you expect from a CS class).\r\nThe midterm was fair. The final had some tricky theory questions which I'm sure tripped people up."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Fri, 23 Dec 2011 03:46:09 GMT", 
      "id": 26695, 
      "professor_ids": [
        1891
      ], 
      "review_text": "Aho was possibly the best CS professor I've had at Columbia... and I've had some pretty good other professors before. \r\n\r\nThe book (HMU, Automata Theory, Languages, and Computation) is a bit dense. Luckily, his class notes (posted on his website) are a very condensed, very readable summary. They don't cover everything, though, so you'll have to fill the rest in yourself.\r\n\r\nAho is a very clear and straightforward lecturer. No matter what question you ask, he's able to answer it without hardly having to stop to think - almost robotic (in a good way). Few mistakes, doesn't skip a beat. And a good sense of humor to boot.\r\n\r\nThe midterm and final were straightforward - the problems were difficult, but short (either you knew the answer and could justify it, or you couldn't). No need to memorize tons of proof details when studying, as long as you understood the process and the underlying concepts. Be warned, though, there was at least one trick(y) question on each exam, so you really need to know the material well!\r\n\r\nI'm glad I took this class, as it gave me an appreciation for theoretical computer science (particularly lambda calculus) that I never had. It wasn't the most back-breaking CS class I've taken, but it's definitely one that you'll want to dedicate some time to, partly because the material is dense and abstract, and partly because Aho is just an all-around awesome dude.", 
      "workload_text": "Four homework assignments. Moderately difficult, though very doable if you start early, work carefully, and ask TAs for help if you need it. Midterm and final were both fair, but there were a few tricky questions on each. Grading seemed fair - a bit on the generous side, but hard to tell."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 02 Apr 2013 19:16:43 GMT", 
      "id": 28147, 
      "professor_ids": [
        12619
      ], 
      "review_text": "I am currently taking Comp Sci Theory with Choi, and I would definitely recommend him.  At first the class was boring, because he taught straight out of the book. By the first midterm, I only came half the time, because it wasn't interesting. Before the midterm, he did an informal survey evaluation to see what the class thought. I was in his office hours before the midterm (like most professors, his office hours are useful if you have specific questions). As we were packing up to leave, he said that the evaluations had been really bad, and he had to figure out how to change the class.\r\nAt this point, you might be wondering why on earth you would take this class. Here's the thing: he really listened to the evaluations! I came back to the first class after the midterm, and he had totally changed the way he taught. Instead of going through every proof step-by-step straight out of the book, he focused on the main concepts of the proof. He engaged in a dialogue with the class, asking how we would approach a certain question, and breaking it into manageable chunks. For example, he might start by asking what approach we should take (proof by contradiction, diagonal method, etc). It's amazing what a change there's been in the class.\r\n\r\nAs far as I'm concerned, if you want a completely formal, rigorous proof of every theorem, you can read the book. (I should mention that the book he uses is very good-- thorough, readable, with useful diagrams.) What Choi's been teaching us is far more valuable-- how to think about a proof, how to go about setting it up. In other words, his class is great for building your logical intuition. \r\n\r\nIt's also a fun class, and he makes it seem much more intimate and interactive than you would expect for a hundred-person class (as you would expect, about sixty people show up on any given day). There are twenty or so people who regularly ask questions, and he's learned all their names. It's a comfortable, yet productive atmosphere.\r\n", 
      "workload_text": "Very reasonable, especially for a comp sci class: 5 problem sets worth 20%, two midterms worth 20% each, and a final worth 40%. I took Discrete Math with Gross, and the workload is similar. (Unless you've taken a lot of formal, proof-based math classes, you should take Discrete before this class. Plus, Gross is amazing!)\r\n\r\nThe problem sets are spaced about two weeks apart, except for midterm weeks. They usually took my study partner and me 4-8 hours. If you really understand the concepts, the problem sets are straightforward. If you don't understand the concepts fully, expect them to take longer.\r\n\r\nOne last note: it's totally okay to get a used version of the textbook. He posts the entire question, so you don't have to worry about the numbers not matching up."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Mon, 29 Apr 2013 21:59:06 GMT", 
      "id": 28233, 
      "professor_ids": [
        12619
      ], 
      "review_text": "Without a doubt one of the worst instructors I have ever had the misfortune of encountering here at Columbia University. Unhelpful and inflexible in terms of grading, which was itself extremely harsh. Exams covered a great deal of material that was never taught/explained in lecture, and were extremely esoteric/pedantic in nature, requiring extreme depth of knowledge in these areas. Instructor read straight from textbook, except in a way that was more incomprehensible than the textbook itself (due to his limited English-speaking/comprehension ability), rendering lectures utterly without merit. Choi actively discouraged students from attending lectures or approaching him with questions. 11/10 would not take again; wait for Aho to teach the course, ", 
      "workload_text": "- Biweekly problem sets (20%) (5 per semester) requiring 4-6 hours each.\r\n- 2 difficult midterm exams (20% each) (average = 40 - 70). Little to no partial credit, generous extra credit problem on each is definitely worth doing.\r\n- 1 Final exam (40%)"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Sun, 19 May 2013 05:18:19 GMT", 
      "id": 28400, 
      "professor_ids": [
        12619
      ], 
      "review_text": "I've had probably some of the worst professors at Columbia including (according to CULPA) \"soul sucking professors\" and \"don't-take-this-class-unless-you're-an-econ-major professors,\" but I have never had a \"I-want-to-kill-myself\" kind of professor until I met Seung Geol Choi. On the first day of class, I came in to the lecture room ready and excited to learn about computer science theory. By the end of that hour and a half, I had already begun to dread my upcoming semester. I even wondered if I should have dropped the class that day, but I didn't and now I really wish that I had dropped it and waited for Professor Aho. To describe my experience in Choi's class would be analogous to describing how a pineapple would feel being slowly twisted into my anus. Choi discouraged us from coming to class under any circumstances on the first day of class. I thought he was joking, so I went to the next two lectures. Considering how awful they were (he paraphrased from the textbook in a very incomprehensible manner), I really should have followed his advice in not going to class. The problem sets were painful. I heard he was mean to his TAs. The midterms were pretty bad, but not as catastrophic as the final exam (which was worth 40% of my grade). I did pretty well in all of my midterms and homeworks, and managed to almost fail the class because of the final exam. I sat through the three hours of the final exam wondering when the pain would end and whether I should just kill myself on the spot because it would be better than finishing the exam. Don't take this class under any circumstances. Please. Save yourself.", 
      "workload_text": "- 5 problem sets (spend many hours on these and expect many typos that will be fixed in the last minute)\r\n- 2 midterms (you might think that you did well on these, but don't be fooled! You probably got them all wrong...)\r\n- 1 final (just YOLO that shit)"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Wed, 22 May 2013 21:22:31 GMT", 
      "id": 28440, 
      "professor_ids": [
        12619
      ], 
      "review_text": "Professor Choi, isn't a good teacher. He often looked just as confused in lectures looking back at us, as we (or at least I) certainly did looking at him. The material itself is very dense, extremely theoretical, and requires some familiarity with proofs based mathematics. Basically, no amount of coding skills will help you in this class, as it is essentially an advanced math class.\r\n\r\nThe homeworks and midterms are challenging, often requiring insights that are all the more difficult to achieve because Choi's \"explanations\" often you more confused than before the lecture. Be prepared to spend hours staring at a problem trying simply to decipher the meaning of the question. It is absolutely maddening, and yet, there's no better feeling than figuring out one of those tricky questions. The midterms have many true/false with justification questions with no partial credit, which Choi posts on his exams as T/F/J. I wish I had gone for the pure Justify, without ever definitely answering true or false - I would have done better, as the questions seemed to deliberately be exploiting flaws in common intuition and expectations. \r\n\r\nAll in all, this class was a slow, torturous slog through material that had the potential to be interesting, though I don't know if I would go so far as to compare it to the horrors faced by the unfortunate pineapple in the review below. Choi is an uninspired, robotic lecturer who always feels most comfortable reading from the book. There is no reason for anyone to be surprised at this, though, the man basically said as much when he himself advised us to skip lecture on the first day. However, to his credit, he did start to be more responsive to the class's questions and more active in giving us study materials after the entire class performed dismally on a final that he apparently expected to be easy. I think he became more comfortable lecturing as the semester went on, and while I don't think anyone would ever use words like \"interesting\" to describe those last weeks, they were at least tolerable. He gave a generous curve at end, and so, I think Professor Choi deserves at least a B for effort.\r\n     ", 
      "workload_text": "5 homeworks that are tough worth 20%\r\n2 midterms both tricky  20% each\r\nfinal wasn't as bad as the midterms, but long \r\n"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Thu, 23 May 2013 04:59:52 GMT", 
      "id": 28443, 
      "professor_ids": [
        12619
      ], 
      "review_text": "I completely disagree with the two reviews below. I had no experience with CS theory before taking this class, but I had a great time and learned SO much, and want to take more theory classes because of this.\r\n\r\nYes, on the first day, and for most of the first two weeks, Choi taught straight from the book, and told us that we could learn from the book just as well as in class. But--and the book is great, don't get me wrong--this proved completely untrue. Over the course of the semester Choi grew a lot as a teacher (it was his first semester teaching!) and gave us his own examples, clear explanations, and answered questions happily. He also seemed to realize that telling students to leave was NOT a good idea, and encouraged us to send him emails and raise our hands in class. The material itself is often hard to grasp, but that's not his fault, and he usually found multiple ways of communicating complicated ideas.\r\n\r\nI thought his tests were fine. The final was hard, but was curved, and the midterms were very similar to the homeworks. They were totally doable. \r\n\r\ntldr; Take this class with Choi! He's a really good guy, just a little rough around the edges, who is really willing to help you out and learn from his mistakes. ", 
      "workload_text": "Standard. Five problem sets, lowest one dropped, which took about four hours of real thinking. Two average midterms, hard final. "
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 17 Dec 2013 22:51:31 GMT", 
      "id": 28887, 
      "professor_ids": [
        2941
      ], 
      "review_text": "CS Theory as taught by Yannakakis is a good class -- it achieves everything you basically expect a class to, though it isn't outstanding in any particular regard. \r\n\r\nFor almost the entire semester Yannakakis follows the textbook (\"Introduction to Automata Theory, Languages, and Computation\"), and it pays to read the text ahead of time. The book is light on theory and heavy on examples, and you could probably get away with not going to class for the first 10 weeks or so until Turing Machine reductions start to be explained, because the book's explanations until then are always thorough enough. Lecture clarifies and sometimes expands a bit on the book, but not in any fundamental way, e.g. there might be a slower and a faster way to implement a given algorithm, and the book gives the slower one while Yannakakis will show the faster one in class. Once you get into Turing Machines, going to lecture is pretty important. The book sucks on reductions.\r\n\r\nAs a lecturer Yannakakis isn't exciting (it didn't help that this semester's room was poorly lit and had amphitheater style seating -- quite conducive to dozing off) but he is usually quite effective at going through examples clearly. He's been doing this for long enough to know which points people get confused about, and he makes sure to hammer those home. The only times I was truly lost in class were on a handful of particularly weird proofs that he demonstrated purely to make a point; they never came up on homework or exams.\r\n\r\nYannakakis is (as those of you who've Googled him will know), a pretty big name in the field with a prize or two to his name. There aren't many opportunities in CS Theory for him to show off his brilliance, but he is clearly in total command of the material in a way that not all professors always are. He virtually never makes mistakes on the blackboard (he's usually working from his lecture slides, which are excellent and available on CourseWorks), and will occasionally respond to a seemingly narrow question by tying it to much broader questions and answering those, too.", 
      "workload_text": "1 midterm, 1 final, 30% each. 6 homeworks, 40%, partly written, partly through an online service called Gradiance. The grading was usually pretty fair. One TA graded all problem 1's, a different one graded all problem 2's, etc.\r\n\r\nThe midterm and final are both pretty manageable if you go over the lecture slides and homework. No proofs, though there are occasionally slightly sneaky questions. Just know your conversion algorithms (e.g. regular expression to epsilon NFA) and their runtimes, as well as your language closure properties (and constructions for those properties) and you'll be about 90% ready.\r\n\r\nThe homework is 2-3 hours work each if you do the reading first, and Gradiance is perhaps half an hour. Gradiance allows unlimited retakes, which is pretty neat, though you have to wait 10 minutes between attempts. If you have a lot of time to burn, you can just retake Gradiance often enough to solve all the questions by process of elimination (there's a fairly small pool of answers, so after about 90 minutes you've seen them all)."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 24 Dec 2013 13:17:41 GMT", 
      "id": 28955, 
      "professor_ids": [
        2941
      ], 
      "review_text": "This was an OK class. CS Theory with Yannakakis is neither good nor bad. The subject itself is very interesting. It's just the presentation of the material by Yannakakis and the textbook (HMU) that is lacking.\r\n\r\nYannakakis is no doubt a brilliant man, but he's a mediocre teacher. He puts up slides of lecture notes on Courseworks and teaches directly off of them in class. This led to maybe 30 out of 87 students actually attending the class.\r\n\r\nThe textbook often has convoluted proofs and too few examples. It's the defacto textbook for automate theory, but I think it could be improved. Sipser is another book which has slightly better explanations.\r\n\r\nYannakakis teaches concepts in a reasonable manner given the dense material. Most people didn't attend class and just studied from the slides and textbook. His explanations are not much better than the textbook and you can learn everything from his slides.\r\n\r\nMy advice is to make sure you are up to speed with what's being covered in class. The material can be dense and hard to follow, so try not to get lost because it will lead to a disaster when exams come around.\r\n\r\nProblem sets (40% of grade) generally have 1 or 2 easy questions and the rest are hard. It is advisable to check your work with classmates since homework counts for 40% of your grade and you shouldn't lose too many points on it.\r\n\r\nDon't worry too much if you don't completely understand some complicated proofs (eg- NFA to Regex, PDA to CFG conversions). If you know the method that it proves, you'll be fine for exams. He never asked to prove something in an exam. Questions were along the lines of design a DFA, CFG, Turing machine, algorithm, do a reduction, etc. Some of them can be tricky.\r\n\r\nThe midterm (30%) and final (30%) consisted of 6 and 5 questions respectively and were both in class. They were manageable, but kind of hard since we got so little practice solving problems. The course is mostly theory with few examples and 4 problems per homework don't really prepare you for the tests. Make sure to study all the lecture slides and problem sets for exams. Read the textbook whenever you get confused by the lecture slides.\r\n\r\nGrading is fair. TAs grade both problem sets and exams. Final letter grades were also very reasonable.\r\n\r\nI wouldn't avoid Yannakakis, but neither would I recommend taking this class if someone better (like Aho or Malkin) were teaching it the next semester.", 
      "workload_text": "6 problem sets (4-5 questions + 3 online questions via Gradiance) (lowest dropped)\r\n1 midterm (medium - hard)\r\n1 final (hard)\r\n"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 24 Dec 2013 14:51:17 GMT", 
      "id": 28958, 
      "professor_ids": [
        2941
      ], 
      "review_text": "Computer science theory with Professor Yannakakis is a pretty good class; definitely one of the better classes I\u2019ve taken in the computer science department.  There was nothing exceptional about it, but the fact that there was nothing strikingly wrong with it puts it well ahead of most other CS classes I\u2019ve taken. \r\n\r\nThe professor wrote excellent lecture notes which he posted online, and followed them closely during lectures.  He also handled questions from the class very well, and it was clear that no question ever came close to phasing him.  His progression through the material was both organized and logical.  If I had any criticism, it would be that we went rather slowly through details of proofs and constructions that didn\u2019t seem very fundamental to the course, and we could\u2019ve gone through a bit more material if some of this was streamlined.  \r\n\r\nThe assignments for the course were very reasonable in scope and they did a good job enforcing the important points for each topic.  It seemed that he actually chose the problems based on what he covered in lecture and thought was important.  They were assigned and due every 2 weeks, and each consisted of four problems of varying difficulty.  Solutions to these were posted after they were handed in, and graded problem sets were returned a week after completion.\r\n\r\nThe exam were also pretty fair.  Some problems were more difficult than others, but nothing too ridiculous.  Both exams were during the 75 minute class period, so the scope of the problems was not very large.  The median on the midterm was 73 and the median on the final was 63.  ", 
      "workload_text": "40% Problem Sets, of which there were 6\r\n30% Midterm - median 73 standard derivation 15\r\n30% Final - median 63 standard derivation 15"
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Wed, 19 Nov 2014 16:13:08 GMT", 
      "id": 53393, 
      "professor_ids": [
        13004
      ], 
      "review_text": "Well organized notes, very straightforward exams - very similar to the practice questions she provides.  Probably one of the nicest professors on Columbia's campus.  Office hours incredibly helpful. ", 
      "workload_text": "Bi-weekly homework assignments (~8 hrs each). Midterm, final exam."
    }, 
    {
      "course_ids": [
        234
      ], 
      "created": "Tue, 23 Dec 2014 20:07:04 GMT", 
      "id": 76278, 
      "professor_ids": [
        1891
      ], 
      "review_text": "Very underwhelming class. I chose to take CS Theory with Aho due to his fame...in hindsight, this was a bad decision for me. I'm sure there are other people who feel differently, but this was my experience:\r\n\r\nLectures- Aho seems to think that the material is a lot easier than it actually is, often failing to adequately explain simpler concepts in favor of complex proofs, etc. that never appeared on homeworks or exams. This is probably due to the fact that he pretty much invented a lot of it; however, for most of us, this was our first experience with theoretical computer science.\r\n\r\nAho also just plainly isn't an engaging lecturer. Listening to him lecture is a lot like listening to your great-uncle drone on about the Great Buckwheat Shortage of '68 (if your great-uncle is a great storyteller, then ignore this). Occasionally, Aho will talk about having dinner with Stephen Wolfram or working with Kernighan and Ritchie at Bell Labs, which is always cool but doesn't necessarily make the class worth taking.\r\n\r\nHomeworks- hard, but doable. There were five problems per problem set. They were problems that you had to do out and solve, which turned out to be useless because:\r\n\r\nExams- both the midterm and final were 10 true/false questions (with brief explanation). I just don't understand how ten true/false questions can adequately assess your knowledge of CS Theory. For the midterm, I studied all the algorithms and the workings of automata, but I did poorly on the exam (far below average). Many of the T/F questions were tricky (average was a 45, std. dev. of 22).\r\n\r\nFor the final, I didn't bother to learn how to solve any problems or do any proofs, because I knew they weren't going to be on the exam. Didn't really know much about Turing Machines. Bad mindset, I know, but I just studied the general concepts and did much better than the class average (which was a 75).\r\n\r\nIn conclusion- my recommendation? Take this class with someone else. I was not impressed...I'm not trying to be disrespectful towards Aho, but he is a professor that should be known for his accomplishments, not his teaching ability. Apparently he got a Great Teacher Award from Columbia at some point, but I feel like that has a lot to do with his legacy. I dunno, someone might come along and say something different, but I found the class dull and uninspirational.", 
      "workload_text": "5 problem sets, drop 1: Hard but doable. Problems never showed up on exams.\r\nMidterm: 10 true/false questions. Mean of 45, std. dev. of 22. Tricky questions.\r\nFinal: 10 true/false questions. Mean of 75, std. dev. unknown. Much easier than midterm.\r\n\r\nAverage weighted overall score was 67.3. Average letter grade was a B+."
    },
    {
      "course_ids": [
        4251
      ], 
      "created": "Sun, 26 Dec 2004 00:00:00 GMT", 
      "id": 10259, 
      "professor_ids": [
        50
      ], 
      "review_text": "This is a new class opened by the CSEE department and Prof. Unger is teaching it for the first time. It basically combines Digital Logic and Comp Org into one class. So the content is much more condensed and not as detailed as either of those 2 classes it intends to replace. \r\n\r\nProf. Unger uses his own textbook for the first half of the class (digital logic), and someone else's textbook for the second half (comp org). I must say, the first half is significantly easier than the second half, however, the midterm (which covers the first half) has a lot of detailed questions that require thorough understanding of the material. While the final (focusing on the second half) has mostly conceptual questions that only require a superficial understanding of the material, simply because the second half's material is much more difficult and he cannot go into much details.\r\n\r\nAs for Prof. Unger, his lectures are much more understandable and lucid when covering digital logic topics. When it comes to comp org, his lectures become rambling and explanations become difficult to understand. The homework sets after the midterm also become much more difficult. So be prepared to do a lot of your own reading on the second half of the semester. \r\n\r\nAs for tests, they are not as difficult as the homework questions, but questions still require significant thinking. But if you do all the homework questions by yourself and understand the solutions for the ones you cannot do, you should be fine on the tests.", 
      "workload_text": "1 weekly problem set ( 7 questions on average, a lot more difficult questions on comp org topics, do not expect to be able to do all of them)\r\n1 midterm, 1 final. Final is like 65-70% of your grade and focuses on the second half of the semester.  Not an easy A by any means, must put in hardwork."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Mon, 03 Jan 2005 00:00:00 GMT", 
      "id": 10681, 
      "professor_ids": [
        50
      ], 
      "review_text": "I disagree with most of the previous reviews -- Professor Unger is a wonderful professor, take his course (well, its required, but at least be happy about it).\r\n\r\nThat being said, the course is difficult, and Prof. Unger inflates his grades somewhat less than we Columbia students are used to. The problem sets can sometimes be difficult, but they are all doable if you have paid attention in class. CLASS ATTENDANCE IS NECESSARY -- Prof. Unger wrote the digital logic textbook, and it is completely incomprehensible. But he goes over the same material in class, with the same examples (hey, he wrote them), and when lecturing, is lucid. He has a habit of mishearing questions, and then answering them, but if you persevere, he has the patience to clear things up for you. He can also be a bit absentminded when assigning problemsets, so if a problem looks wrong, email him about it, because it might well be. But he's prompt at responding, and very reasonable.", 
      "workload_text": "Weekly problem sets that are sometimes quite difficult (and even when not, always time consuming), but these account for only 15% of the grade.\r\n\r\nOne midterm, one final. Both tests are much easier than the homeworks, testing only the basic basic stuff. Don't screw up the final though, it is 60% (this term he made it 70%) of your grade."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Tue, 09 May 2006 00:00:00 GMT", 
      "id": 14706, 
      "professor_ids": [
        2911
      ], 
      "review_text": "Dude's a grad student, but he's not bad. Very, very straightforward, powerpoint slides and very little flexibility, but a pretty nice guy who teaches the material well. Never saw him once out of class, even if I wanted to -- of course, I didn't, so it was OK.\n\nYou're only taking this class because it's required, but he's an okay guy and not a bad teacher.", 
      "workload_text": "A little tough -- homeworks aren't too long, but are sometimes hard, exams are pretty average. Two textbooks, one of which is almost entirely useless."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Mon, 21 Apr 2008 00:00:00 GMT", 
      "id": 21165, 
      "professor_ids": [
        3429
      ], 
      "review_text": "Professor Sethumadhavan genuinely has a passion for the subject and makes an effort to teach.  However, his teaching method is not too effective; he comes in with powerpoint slides, but unless we've read the book thoroughly prior to the lecture, it's very difficult to keep up.  Sometimes, he'll realize that he made a bad lecture, and he'll come to the next lecture being a lot more prepared.\n\nI have to give him an A for effort.  He makes some joke in class, which weren't funny, but at least it shows that he tries to lighten up the mood.  He also makes an effort to remember your name.  This is his first time teaching in Columbia, so hopefully, by the time he teaches this class again, he'll be better prepared and teach a lot better.\n\nThe textbook for the first half of the class (Brown and Vranesic, Fundamentals of Digital Logic with VHDL Design, McGraw Hill Publishers, Second Edition) was very poorly written (it refers to examples that require the reader to flip back ~10 pages), but the one for the second half (Patterson and Hennessy Computer Organization and Design: The Hardware/Software Interface, Elsevier, Third Edition) was much more well written.", 
      "workload_text": "9 homework assignments, difficulty varies greatly, way too much (~10 hours, if not more) for some weeks, and very short for others; one very hard midterm (he claims that it should be okay for us because it took his TAs 1 hr 5 mins to do the midterm); and one final"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sat, 20 Dec 2008 16:21:21 GMT", 
      "id": 21867, 
      "professor_ids": [
        2427
      ], 
      "review_text": "The professor is not very good. He is not really clear during class, but is very willing to help you understand the material. It's best to ask a lot of questions and make sure to make it your responsibility to clarify all the material that is taught, because you can't expect that of this instructor. He really wants to make you understand, but because he is not very clear at it, it might be harder if you don't show you don't understand and don't ask questions. So, use office hours, study from the books often, and make sure you get everything clarified.\r\n\r\nAlso, he is very poor on expressing himself. On the final exam, one problem had a mistake in it because it was worded too awkwardly and ended up contradicting itself. This ended up being a big problem because we couldn't do much of the problem until the question was clarified. I ended up kinda guessing what he meant to ask. Also, the really bad part was that this was 1 out of 5 problems, and the next 2 problems built up on the one that had the error. Generally, very unclear demands.\r\n\r\nUnfortunately, if you want to major in CS or EE, you probably have to take this class, so you don't get much choice. But make sure you go in prepared to face a lack of clarity. So make it your responsibility to clarify everything. You will get help, but need to ask for it, because chances are information won't come to you in a organized format at first.", 
      "workload_text": "Homeworks every week. Midterm and final. "
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 24 Dec 2009 00:37:58 GMT", 
      "id": 23592, 
      "professor_ids": [
        2427
      ], 
      "review_text": "It would appear that Prof. Rubenstein's evil twin taught this class last semester. Don't worry -- the real Dan is back. His slides are gorgeous, his lectures are unfailingly clear, and he's eager to help out outside of class.\r\n\r\nApparently he's used to teaching by drawing everything on the blackboard, but he had rotator cuff surgery early in the semester and had to do everything via PowerPoint to avoid damaging the muscles. Surprisingly, I think this turned out to be a good thing. Once you get into some of the scarier-looking circuitry, I imagine that it's easy to make make mistakes drawing, and I'm certain that it takes forever. This way, we got straight to (relatively) error-free drawings and spent time talking about the big picture instead of worrying about which wires cross.\r\n\r\nThis is also one of those rare classes where the material is interesting without being difficult. Five or six people in the class got perfect scores on the midterm, and I suspect a similar number aced the final. I don't think it's that Rubenstein makes the tests too easy -- this is just really straightforward stuff.\r\n\r\nThe few complaints I have are relatively minor. I think he was still a little sensitive about the last time he taught this course (with reviews like those, who wouldn't be?) and made a point of stopping to make sure everybody was following. This was nice, but the endless refrain of \"are you with me? Raise your hand if you understand\" got a little irritating by the end of the semester. He also seemed to get a little bit confused by some of his own notes about pipelined architectures, but everything worked out in the end.\r\n\r\nIn short, don't be scared off by any review written before 2009. This is a good class with a good instructor, and I would wholeheartedly recommend Prof. Rubenstein for Fundamentals.\r\n\r\nA side note:\r\nThe class nominally requires two textbooks. You can get by without buying either, but your life will be a little easier if you get Patterson and Hennesy. Don't bother with Mano and Kime -- it's almost completely useless.", 
      "workload_text": "Weekly problem sets, ranging from easy and quick to easy and mind-numbingly tedious. You'll get really good at binary arithmetic."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 24 Dec 2009 23:13:39 GMT", 
      "id": 23608, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Overall, I think Daniel Rubenstein was an excellent professor. Specifically, the majority of his lectures were extraordinarily clear. He had well prepared slides for every class, often with plenty of well-chosen images from the textbooks, and spent most of the class time describing what was happening in the pictures. One of his greatest strengths was being able to clearly and succinctly describe and give insight into the functioning of a circuit or architecture. He was also unusually receptive to questions during class. By and large, the students asked thoughtful and helpful questions, and as a result, he was able to clarify almost all subtleties and potential pitfalls in the material. The lectures seemed all the more engaging and participatory as a result as well.\r\n\r\nAll this praise aside, I can how see professor Rubenstein may not be a good fit for every student. Specifically, to get the most out of this course, it is best to take a very active approach. I agree with a previous reviewer that \"it's best to ask a lot of questions and make sure to make it your responsibility to clarify all the material that is taught.\" As I mentioned above, one of the reasons that the professor was able to make the material so clear was that students asked questions whenever something was less than one hundred percent clear.\r\n\r\nAs for the course as a whole, it felt like a gradually unfolding adventure/mystery story. We took a thoroughly bottom-up approach, and starting from the absolute basics of binary logic, gradually added new layers of abstraction until we had essentially designed a computer out of nothing. I was always on the edge of my seat waiting to see how all the ideas we looked at unfolded and built on each other to eventually construct such an amazing machine. Some of the ideas we covered, such as latches and flip-flops, are so utterly brilliant that I think it is somewhat of a shame that we never considered the engineers and inventors who were responsible for them. More generally, I think the ideas we covered in the class could have put into a richer historical context.", 
      "workload_text": "My one complaint about the course was the appropriateness of the homework. The workload was relatively light, but the problems themselves could have been more interesting overall. A lot of the homework time was spent either doing tedious computations (multiplying numbers in floating point comes to mind), or delving into an annoying level of detail, such as describing what effect a small design change would have on dozens of instructions which were not all listed in the same place. He seemed to save the best questions for the two exams, both of which were fun as well as fair."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sun, 03 Jan 2010 21:20:44 GMT", 
      "id": 23763, 
      "professor_ids": [
        3429
      ], 
      "review_text": "Simha is the worse professor I've had at Columbia. He gaves way too much work; the work from his class was more than the work from all my other courses combined. He doesn't seem to understand what a reasonable amount of work is. \r\n\r\nHis lectures are extremely boring and hard to follow. The assignments and tests are poorly written and are ambiguous making the already difficult work even harder. \r\n\r\nAs a person he's kind of a nice guy. However as a professor he seems to think that students have no other commitments beyond his class.\r\n\r\nOverall, avoid this professor at all costs.", 
      "workload_text": "extremely heavy"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Mon, 08 Mar 2010 04:50:53 GMT", 
      "id": 24078, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Professor Rubenstein was great. I think it's unfortunate that he received such bad reviews in the past, but it's clear that he's taken the feedback and changed his style of teaching - he frequently stopped and checked in with the class to see if everything was comprehensible (and it almost always was). He also did a fantastic job of scheduling the course, and he made sure there were days that existed only for review before tests.\r\n\r\nHe also is extremely helpful during office hours, although you probably won't need to go. The course is a strange combination of both fascinating and quite simple, conceptually. Most people will be learning a completely new facet of computing, but Prof Rubenstein made it both easy to understand and interesting. He takes a very bottom-up approach; you'll start with binary math, then boolean logic and gates, then designing logic circuitry, then ALUs, registers and eventually basic processors. It's a really cool course.\r\n\r\nAlso, Dan is just the man.", 
      "workload_text": "Totally doable homeworks once every two weeks. Took around 2 hours each, but there is a strict no-extension policy. Very doable midterm (a few got 100's) and final."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Tue, 11 May 2010 02:30:02 GMT", 
      "id": 24353, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Martha is one of the nicest professors I have met here. She takes the time to try to help out students, wants to know their names, and tries really hard to be available. That being said, she is a new professor to Columbia, and it shows. Homework lengths varied greatly, and she often seemed surprised that things took as long as they did. She corrects herself in class so many times that it is hard to know what the conclusion is when she is finished. The midterm exam, for example, arrived nearly 20 minutes late since there was an issue with the printer. Why not print it out the day before? The average on the midterm was a 50%, and she seemed happy with that (I think it was higher than last year's). Hopefully with some more experience some of these rough edges will go away, as she has a lot of potential. A friend who took this class both with her and Rubinstein said that it is definitely better to take it with her.", 
      "workload_text": "6 HWs (40%), of varying time requirements and difficulty with the lowest score dropped. One midterm (30%) and a final (30%) which is non-cumulative. Exams are open book, but that doesn't mean that they are easy."
    },  
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 16 Dec 2010 22:46:36 GMT", 
      "id": 24991, 
      "professor_ids": [
        2427
      ], 
      "review_text": "This is the first review I've ever written on culpa, but I have to say prof Rubenstein is the best professor I've ever had. I was initially hesitant to take this course because I was scared of the course material(circuits! circuits! and more circuits!), but professor Rubenstein presents does an amazing job of explaining things and his lectures are actually enjoyable. I, too, was somewhat worried after reading the old reviews, but now that I've taken a course with him, I know for a fact that those are not an accurate description of him. (Maybe his evil twin brother as someone suggested...) If you need to/want to take Fundamentals, by all means, take it with him.\r\n\r\nHe makes great lecture slides(that are actually better than the textbooks) and post them on the courseworks ahead of time. Some students just read over the lecture notes and do not attend the lectures, but I suggest not to do it because 1. the lecture notes are quite condense and hard to understand without the aid of lectures (at least for me)  and 2. it's one of the few classes where lectures are golden. His lectures are very interactive and he makes it obvious that he's enthusiastic about teaching (which can only help the students). Although the pacing can be somewhat fast at times, if a student asks a question, he'll slow down and explain to make sure the student understands the material. \r\n\r\nThere's about one homework per each week (9 HW total). Homeworks are reasonable, but can be tough. It depends on how much background knowledge you have (If you're good at circuits, you'll breeze through the first half of the course). Start at least 3 days before it's due and go to the office hr if you're having a hard time. His tests are open book/open note, but since he asks design questions, you have to have a solid understanding of the material. There's no surprise questions and he won't try to trick you, but will test you how much you understand the core of the material. Take HW problems seriously, as they will help you tremendously. \r\n\r\nOffice hrs literally saved me. This is the only course I attended office hrs on the regular basis. You come in with a question, and you will walk out with a full understanding of the material. If you have a schedule conflict with regular office hr, don't hesitate to email him and make an appointment. He truly cares about his students, and he'll make time for you. In fact, I never went to his regular office hr as I had another class during the time, but I never had a problem getting help whenever I needed. I got the questions that would take me 10 hrs to understand answered in 20 minutes. \r\n\r\nHe's approachable, funny, enthusiastic, and truly cares about the students. \r\nTake this course with him if you can, and you won't regret it. Interesting course material taught by a great instructor, what more to ask?\r\n\r\n", 
      "workload_text": "9 problem sets (1 HW per 1~2 weeks)\r\n1 midterm\r\n1 final\r\n\r\nCould be challenging, but worth every effort!"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sat, 14 May 2011 14:50:10 GMT", 
      "id": 26000, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Like the person before me said, Martha is an incredibly nice professor. The course was well laid out with clear lecture slides that were all posted online before the class. That being said, if you miss a class (or a few) it's not too big a deal, but make sure that you go back and listen closely to the next lectures that expand on those topics because it can be easy to fall behind. Personally, on a few of the homeworks, it took me a little bit to understand what the questions were asking, but a quick conference with a friend uncovered that they were a lot simpler than what I was expecting. And if for some reason a concept doesn't stick, she drops your lowest grade. I would definitely recommend Prof. Kim optimistically to anyone who has to take fundamentals. This isn't a class to worry about and should interest people of all areas of study in CompSci, EE, and CompE with at least one topic.", 
      "workload_text": "6 homeworks worth 40% and a midterm and final worth 30%"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 19 May 2011 00:31:51 GMT", 
      "id": 26118, 
      "professor_ids": [
        4221
      ], 
      "review_text": "This class is basically two classes combined into one. The first half covers digital design and the second covers computer architecture involving learning elementary programming in MIPS assembly.\r\n\r\nThe Good: \r\nMartha Kim is friendly, approachable and helpful. She willingly answers questions in class and for the most part she answers them well - especially when it comes to the computer architecture, she knows her stuff well. She teaches from slides, and what's in the slides is pretty much what you're going to be expected to know for the class. The slides are easy to read and understand and have intuitive diagrams. A lot of the pictures are taken from the textbook. I found the course material interesting and valuable.\r\n\r\nWhat was wanting:\r\nThe lectures were mostly very boring. She spent a lot of time explaining trivial things that we could have understood better and more quickly by glancing over the slides on our own time. Most of the lecture was spent in teaching relatively straightforward concepts but almost no time was spent teaching us to apply them. In other words we did almost no real problems-solving or \"thinking\" in class. Any examples covered, were for the most part trivial ones. As a result, there was a gap between the lectures and homeworks and an even bigger one between the lectures and the exams. The lectures certainly prepared us very poorly for the midterm on which the mean was a 52 and which was so long that almost no one actually finished.\r\n\r\n6 homeworks in the semester, one assigned every two weeks, about 4 questions per homework. Given that we had two weeks between hwks, it was really very little work. I spent an average of 4-5 hours on each assignment, only about 2 of the questions out of 4 actually required thinking, although these ones could be tricky. The problem was that we didn't have enough of these questions and didn't have enough homeworks so when the midterm rolled around, we got killed.\r\n\r\nThe final was non-cumulative and included everything from after the midterm. It was about the same length as the midterm but we had double the time so it was manageable. The mean was 63 - I got a 92. I recommend reading the slides and textbook very carefully. You need to have a complete understanding of the single-cycle and pipelined processors - especially the pipelined one and also get some practice coding in assembly.\r\n\r\n", 
      "workload_text": "See above. 6 hwks, lowest score dropped (40%). Midterm (30%). Final (30%). Class curved to a B+ she said (and thankfully so)."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sat, 07 Jan 2012 04:25:47 GMT", 
      "id": 26849, 
      "professor_ids": [
        1637
      ], 
      "review_text": "Prof. Edwards' sense of humor is really quirky. As the reviewers below noted, it could be quirky to the point of being a little bit embarrassing.\r\n\r\nHowever, I fundamentally disagree that his humor took away from his teaching. He is by no means a perfect lecturer. He isn't charismatic like Gulati, thorough like Vallencourt, nor approachable like Blaer. However, he still kept the lectures interesting and got the material through to the students. It definitely could be that PLT (which the reviewers below took) and fundamentals are fundamentally different in difficulty. However, if you see yourself having to take Fundamentals with Prof. Edwards, I would say go for it, but be ready for a barrage of quirky humor from your first day.", 
      "workload_text": "6 Problem sets, Midterm, Final"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sun, 12 May 2013 20:27:30 GMT", 
      "id": 28329, 
      "professor_ids": [
        2427
      ], 
      "review_text": "I have no idea how the previous CULPA reviews gave Professor Rubenstein such good evaluations. Lecture notes were riddled with errors, as were homeworks and homework solutions. Lectures themselves were very hard to pay attention to due to the multitude of conflicting information conveyed to us (Prof. Rubenstein had to correct himself and the slides during pretty much every lecture). He wrote on the board for maybe two classes, and those were probably the classes that I actually learned the most. \r\n\r\nHomeworks are very repetitive and students often dreaded doing them because the questions were updated with corrected versions; we still only had one week to do them, so more often then not, I chose to start later in the week waiting for all the corrections to come out. \r\n\r\nAlso he is very terrible at answering emails (I put 3827 in the subject line of all of my emails!). Sometimes questions to homeworks would be answered after the homeworks were due. \r\n\r\nHe has very strict extension policies. A couple of my friends just got 0s on their homeworks because they were sick/absent/had religious reasons for missing the deadline.\r\n\r\nAll in all, I don't feel like Prof. Rubenstein's teaching was effective, at least for me. But during the times I went to office hours, he was helpful. \r\n\r\nIt seems to me that in general, he gives no shits about his students. \r\n\r\nHe also said he reads CULPA reviews so I guess this is my honest opinion. ", 
      "workload_text": "1 problem set a week; each take a lot longer than you expect (40%)\r\n1 midterm (35%)\r\n1 final (45%)\r\n\r\nTotals to 120% but he reduces your lowest category by 20%. "
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Wed, 15 May 2013 01:06:24 GMT", 
      "id": 28348, 
      "professor_ids": [
        2427
      ], 
      "review_text": "There was not much I liked about the course taught by Rubenstein. The best days in class were when Edwards/Kim came in to sub for Prof Rubenstein when he was out.\r\n\r\nThe worst offenses:\r\n* He is not prepared enough for the lectures in order to make the material engaging or easy to understand. They consist of him reading off of his overly complicated slides and often not coming up for air.\r\n* He does not require a textbook but suggests two textbooks. His slides are basically reproductions of the books. I had the textbooks and did not think that the slides were enough to understand the material by. I think it's unfortunate that he uses two books when the course could be summed up in one book. He should drop the awful Mano and Kime book.\r\n* His homeworks are a mixture of totally tedious repetitive nonsense (adding binary numbers excessively) which teach little, to extremely esoteric circuit creations which also do little to explore your understanding of the material. Perhaps the course is meant to test your ability in solving puzzles through building circuits - if that is the goal then I guess I've misunderstood the intention of this course.\r\n* His homework policy is to allow for cheating. He allows people to collaborate on the assignments which in my opinion discourages anyone from doing their own work. For those that do their own work and do not compare answers before submission are just out of luck I guess. If you submit without comparing your answers and knowing you have 100% going in, I guess your'e a dope. If the whole class is allowed to collaborate why even give credit for the assignment?\r\n* His exams are insanely unfair in my opinion. After having done reasonably well on the homework assignments I felt unprepared for the midterm/final. There are some reasonable questions but then there are those that will boggle the mind how they accurately test my understanding and knowledge of the material. But again maybe I've failed to understand the goal of this course. His exams consisted of reading a mountain of text to explain the premise of creating some new fangled circuitry. Then having questions part b through d rely on your successful understanding and completion of part a. It doesn't help that in this mountain of text it is mostly incoherent explanation of what he is trying to express. My impression is that they were overly complicated and/or error filled.\r\n* I have had some minor experience with this course's topic before and usually find it fascinating but I found myself unwilling to participate towards the end.\r\n* The course covers too much ground and not enough of it carefully. There seems to be a theme that a lot of what we are learning is not necessary to know. That's insane to me. Everything we learn should be at least interesting and inform our future. Cut out the small extraneous that have no relevance.\r\n\r\nThe good:\r\n* He is a nice guy and office hours are very useful.\r\n* When he would work out a problem manually on the board this was a very useful exercise. Often I think he would realize the absurdity of certain questions when it would take him 20-30 minutes to complete.\r\n* He reads feedback and there was an adjustment to the pace of the class which at first was going a mile a minute for no reason.", 
      "workload_text": "9 homeworks\r\n1 midterm, 1 final\r\n20% reduction in the lowest scoring item"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Wed, 15 May 2013 05:32:29 GMT", 
      "id": 28352, 
      "professor_ids": [
        1637
      ], 
      "review_text": "I took this course with Edwards and Martha Kim in Fall 2012.\r\n\r\nThis is a review of Edwards.\r\n\r\nHis slides are simple and informative.  His lecture style is very straightforward: he is one of the most rational and simplistic presenters of complex material I have ever encountered.  If I had to take PLT, I would do so with Edwards.  He introduces LogiSim, which Rubenstein does not.  I told several of Rubenstein's students about LogiSim and it made their lives much easier.\r\n\r\nBut really I'm writing this review because of Edwards' personality and humor.\r\n\r\nEdwards is a geek's geek.  Perhaps he doesn't look like one, but he dresses like one and behaves like one.  I find this enjoyable in a professor, but for some it may be an acquired taste, like Scotch whiskey.\r\n\r\nSome co-engineers of mine have pointed out that he can be rude, surly, and dismissive.  I think these attributes seem to present themselves because he is rational above all else, and has a limited amount of time.  (~2 orders of magnitude below Temple Grandin. Let's say the average engineer is about 4 below, Vallancourt is 6 below, and the average art history major is 10 below.)\r\n\r\nI don't think he has ever been rude to me, but in the sense of being hyper-analytical without regard to feelings, Edwards has a tendency to do this.  And I personally find it liberating, assuming I am capable of keeping my ego out of the equation.\r\n\r\nI wouldn't say he equates human interactions to a set of logic gates, but in dealing with assignments and career advice, don't expect a lot of small talk or beating-about-the-bush.  Professor Edwards is one of the most direct human beings I have ever encountered.\r\n\r\nIf you need to prove to yourself that he has a soft/creative/dynamic side, keep in mind the following:\r\n\r\n * He modeled for McDonald's in Taiwan\r\n * He bought a vintage PacMan arcade machine and drove it to his office from AC\r\n * He makes bad jokes that pertain to driving even though no one drives in New York\r\n * He wears a fanny pack when he bicycles to and from Mudd\r\n\r\nI may not be the most adept engineer in SEAS, but I thoroughly appreciate Edwards' awkward and dryly amusing brand of brilliant.\r\n", 
      "workload_text": "Manageable and intuitive.  Exams test the basics."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sat, 18 May 2013 23:28:59 GMT", 
      "id": 28395, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Let me preface this by saying I received a C in the class but it's also the only C i've gotten at Columbia in 4 years (never even gotten lower than a B). In any case take, everything with a grain of salt. \r\n\r\nNow there are a factors here that contributed to this that are beyond Rubenstein's control and are my fault, such as the fact that I don't really have a background in computer science, I never went to his office hours (I did attend the TA's occasionally), and I'm a second semester senior.\r\n\r\nThat being said, Rubenstein's style is that of the prototypical SEAS professor. There's a certain level of irony to this, because in his lectures he comes across as personable guy, he speaks English quite well, and he has a great sense of humor, none of which are very typical for engineering professors I suppose. However, none of that means shit if you spend all your lectures expressionlessly reading off slides, do not provide a good text book and assign cryptic error-riddled homeworks expecting people to be able to solve them purely based on what you wrote on those self-same slides. These slides, as the previous reviewer pointed out are also often riddled with errors. Moreover, they are quite repetitive and there are only a few that are truly important in every lecture, whereas the rest seemed like useless filler. Then there are topics that show up that aren't covered very well in the slides on both homeworks and tests. \r\n\r\nGenerally speaking, I'm pretty sick of this en vogue teaching style where professors don't have to do anything except for recite from slides. It's not conducive to learning, and yet somehow the super-genius professors of SEAS still haven't figured out why people don't attend their classes. Or more likely they have, they just don't give a shit, since giving a shit about their students is not high on their priority list. This obviously wasn't the first class where this has happened, and I sincerely doubt it will be the last. The true tragedy here is that Rubenstein seemed well enough aware, occasionally stopping in the middle of his lectures to ask the class if they understood what he just said, and when less than half the class raised their hand, he would proceed to explain the exact same concept all over again in the exact same way.  This created the illusion of concern, while truly accomplishing nothing at all. \r\n\r\nAgain, it may be harsh or nigh impossible for me to claim he didn't care when I never went to his office hours; however, generally speaking, his lecturing style came off as lazy and unconcerned, which puts him squarely in the \"average\" range for SEAS professors. As far as attending office hours goes, he said that if we could show him we knew what we were talking about in office hours it could only help our grade. Unfortunately his lectures were often so devoid of content, I actually didn't learn very much, so I truly didn't know what I was talking about and probably deserved the C. \r\n\r\nSo I guess you should take him if you want a lecturer with an interesting personality and sense of humor and have a pretty good background in this stuff. ", 
      "workload_text": "Problem sets that started out fairly easy but became pretty hard near the end. Reasonable-ish midterm and tough final that were open-book and open-note. "
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Mon, 20 May 2013 22:27:48 GMT", 
      "id": 28413, 
      "professor_ids": [
        2427
      ], 
      "review_text": "This course is required of all CS, CE, and EE majors, however EE and CE majors will probably find themselves more prepared for this course.  This is because engineering students are already exposed to digital circuits in 1201, and are generally more comfortable with design at this level of abstraction.\r\n\r\nRubenstein's slides were very detailed, and I never once needed to look at the textbooks.  While his assignments and slides did sometimes contain errors, he fixed them right away.  He also posted several practice exams, which were very useful in preparing for the midterm and final.  \r\n\r\nI do wish that he worked through his examples on the blackboard instead of showing them on slides.  Also, it would have been nice if he could have found more ways to engage students during class.\r\n\r\nOverall, I'd say that Rubenstein is a good professor, since ultimately I learned a lot from his course.", 
      "workload_text": "Typical EE workload.  Weekly problem sets that take 3-6 hours, one midterm, and a final (Both are open book, open note).  The exams are a bit of a time crunch, so it's definitely worth it to do a lot of practice exams to prepare yourself."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Wed, 22 May 2013 06:15:35 GMT", 
      "id": 28432, 
      "professor_ids": [
        2427
      ], 
      "review_text": "These recent reviews are not entirely accurate. \r\n\r\nI took the course this semester, and received an A-. I was likely boosted from a B+. That happened because I attended office hours each week for assistance on understanding and completing the homework. Contrary to others' claims, I learned more in the class by having the opportunity to effectively discuss the questions and solutions to the HW with great TA's and with the professor. If you showed up with relative knowledge of the material, the professor or TA's would literally give you the answer if you couldn't reach it yourself. They sought to totally set you up for success. If you didn't take advantage of that assistance, that is your fault and I don't feel bad for you. \r\n\r\nThe criticism I have for this class amounts to concerns about interest by the professor. I don't believe Professor Rubenstein is teaching material he prefers to teach or learn. This results in a class that is less enjoyable, and is unfortunate at Columbia. His course would be 10X better if he enjoyed what he taught, and showed that. That being said, he showed he cares for his students' performance and puts in his stated time to assisting students. \r\n\r\nI wish I had purchased the book. I think the summaries he provided were at times challenging to understand. I also wish the course had a bit more of a clear connection and purpose between the first half of the semester and second, but we always have concerns. \r\n\r\nThe perspective is this - We can read, understand, draw, and design circuits that do cool shit. And if you can't, you screwed up in class and I don't feel bad for you. And you also probably cheated off someone else's homework so fuck you.  \r\n\r\n\r\n\r\n", 
      "workload_text": "Day to day and a half of work per week when HW's are due. 1-3 days of studying pre Mid-term or Final. "
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 23 May 2013 05:05:44 GMT", 
      "id": 28444, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Ugh. I completely agree with the previous few reviews--Rubenstein is a really nice guy who comes to class unprepared to do anything but read off his slides. On the bright side, he gives great, challenging homeworks, and tests that you can't really study for except by doing these homeworks (a lot of people cheated on homeworks, which he acknowledged, but that became clear from the tests). I learned...something? from this class, but only from the homeworks, not from him. \r\n\r\nIf you can, take it with Edwards/Kim. Or hope that he posts his slides online but teaches by hand on the board instead (the days he did that because of technical problems we learned, for once). \r\n\r\nPro-tip: go to his office hours. He'll walk you through any problem you have, including those on the homework. He'll also boost your grade at the end of the semester if he knows your name. ", 
      "workload_text": "9 great homeworks. Hard midterm, hard final. Drops lowest 20%. "
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Wed, 09 Oct 2013 18:58:10 GMT", 
      "id": 28667, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Martha Kim is fantastic for several reasons:\r\n\r\n1) She is a VERY clear lecturer; she teaches directly from slides that on their own are very descriptive, and goes through them at a pace that is easy to follow. She is extremely eloquent and obviously very knowledgeable about the subject material, so it's really easy to follow and engage with what she's saying; she's not one of those awful lecturers who you have to really actively try to pay attention to for the whole class. She intentionally goes over slides with diagrams a little longer than other slides so that students who like to take notes have time to copy them down. There was one day when she had to rush through how Karnaugh maps worked, and in the next class she apologized for the lack of clarity and spent probably the first third of that class re-explaining them and really making sure everyone understood what was going on. If you go to class (and are at all awake/paying any amount of attention to her) you will understand the material. Point of the story: her lecture style is succinct and easy to follow and if you pay attention in class she will teach you the material.\r\n\r\n2) It seems like she really genuinely wants everyone to succeed. She holds more office hours than any other compsci professor I've had and every time I've gone she is really approachable and has seemed genuinely concerned about making sure I am not confused about anything (not to mention she's just super nice). She assigns a very reasonable amount of work because she doesn't want the class to be a source of unnecessary anxiety for students. That being said, the assignments are challenging enough that they definitely do make you learn the material to do them (which I think is a good thing). This is not an easy A class. You will have to do work. But she actually wants you to do well at it, which is definitely not true for every professor at Columbia.\r\n\r\nThe only bad thing I have to say about the class is that the problem set grading has been a little haphazard - on the first assignment, the grading was really harsh, which a lot of students made a big fuss about; then on the next assignment, the grading seemed really easy. But this discrepancy in grading tolerance seems to stem from the TAs more than Martha Kim. \r\n\r\nOverall, she is very intelligent and also very nice and I think she's been a fantastic instructor for Fundamentals!", 
      "workload_text": "Pretty much what you'd expect; Nightly readings which you don't actually have to do but can be helpful for doing the assignments, which are roughly bi-weekly problem sets that take about 3-7 hours (depending on how fast/focused you work on them), a midterm, and a final."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Fri, 15 Nov 2013 17:55:28 GMT", 
      "id": 28711, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Prof. Kim really cares about the students and their learning. I appreciated her approach to midterms and homeworks - there is always ample material to help aid your studying, and she and the TAs are very responsive via email. She leaves a day to review before the midterm, and we could send in questions to help direct the midterm review session. \r\n\r\nGrading seems very fair, and solutions are explained in class when we receive our homeworks back. \r\n\r\nThe material is nothing incredibly exciting, but Prof. Kim does a good job breaking it down into understandable chunks so that it's not too overwhelming at once. \r\n\r\nThe midterm was an accurate assessment of what we were learning in class, and the average was something around a 76 I believe, with many people scoring in the 80 and 90 ranges. \r\n\r\nAdditionally, there is no required textbook, and she only expects you to know what she covers in the slides, which was a relief when studying for the midterm.\r\n\r\nOverall, solid class. I have no complaints.", 
      "workload_text": "Not too bad. 6 homeworks, lowest  grade is dropped. One midterm, One final. Homework assignments are somewhat time consuming but it is very manageable if you've been paying attention in class."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 12 Dec 2013 01:14:06 GMT", 
      "id": 28834, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Martha is the kind of professor who doesn't mind reteaching an entire day's worth of material if students seemed like they weren't totally clear. She is also the kind of professor who takes in student feedback about ambiguity of problem sets, sends out the clarifications well before the sets are due, and changes how the question is worded so it will be clear for future classes. (Her slide sets are like finely aged wine.)\r\n\r\nShe gives eminently reasonable problem sets and tests (1 midterm, 1 final, noncumulative) and once got off an airplane to fix a glitch in her website that students needed to access for a problem set.\r\n\r\nShe also had a great sense of style, is genuinely and adorably amused by things like slow processors, and will explain things for you in multiple different ways until you get it. She's on par with Adam Cannon and Jae in CS-prof god(/dess) status. If you get her for fundamentals, be elated.", 
      "workload_text": "6 problem sets, 1 midterm, 1 final. All slides and psets are accessible online."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Fri, 03 Jan 2014 18:16:12 GMT", 
      "id": 29022, 
      "professor_ids": [
        4221
      ], 
      "review_text": "I agree with the review below that Martha totally puts in 110% effort to give good feedback and make sure the class runs as smoothly as possible. A further example is that when she found out that her final letter grade script had a bug in it, she sent personal emails to anyone who contacted her about it (within 24 hours on top of that) and promptly fixed the issue.\r\n\r\nWith regards to her teaching, I would say that she is not quite on par with Adam Cannon or Jae yet. However, in looking at her previous reviews and comparing it with my experience with her this semester, it appears that she has improved a good amount. My guess is that if she keeps refining her teaching skill, she can eventually teach at that level.\r\n\r\nOne thing that others have not mentioned is that you will be programming in MIPS Assembly Language for one of the psets. My suggestion would be to take AP (3157) before or at the same time as this course (I did the latter) since AP really gets you thinking in terms of lower level computing, which makes the assignment much easier. On the whole, AP and Fundamentals really seem to complement one another, so try to get AP in first or at the same time.", 
      "workload_text": "6 problem sets (5 theory, 1 programming) with lowest score dropped\r\n1 midterm\r\n1 final (non-cumulative, only second half material)"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Sat, 17 May 2014 20:33:33 GMT", 
      "id": 29493, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Rubenstein's a pretty chill guy, but not the best professor. He often gets confused by his own typo-riddled slides. You would expect a professor who has taught this class several times in the past to know his material by now and have error-free slides. While some of these mistakes were corrected, there are still plenty of typos in his lecture slides, so be aware of that when studying from them. Also, logistics are poorly organized with HWs being posted late and taking forever to be graded.\r\n\r\nStarting with basic logic gates, the course slowly builds up towards creating a CPU. You learn about the underlying hardware behind a simple computer and how the programs you write actually work. The material in the first half of the class can be a bit boring, but you see how everything comes together when discussing the MIPS architecture, which is pretty cool. I was bored because of the slow start (I took Intro to EE and CS Theory before Fundamentals, so the first month was just a rehash of things I already knew). Hence, I never participated or really cared about was going on. Rubenstein would also give students points for discovering errors in his slides, and I felt like it detracted from the class because it \"gamifies\" education. Sometimes I would notice mistakes in the slides and not bring them to his attention because I didn't want to partake in his silly point system. Also, the homeworks were super tedious and didn't teach you much. They aren't representative of the harder yet more thought-provoking questions he asks on his exams.\r\n\r\nThe midterm was hard. It was longer than the practice tests, and it was nearly impossible to finish within the allotted time. It also had a couple of typos. His exams are open book, but it doesn't really help much because the questions he asks on exams generally require you to extend circuitry covered in class and solve problems creatively. He has good intentions for his exams. They are designed to make students think by asking non-trivial and interesting problems, but they're poorly executed because of the often long and winding questions or just because Prof. Rubenstein didn't think the solution through enough leading to a different answer than what he expected. Partly because of my attitude towards class and because of the difficulty of the test, I did pretty badly on the midterm.\r\n\r\nIn the second half of the class, I made an active effort to pay attention. I found the course much more enjoyable (may have been because the material became more interesting) and Prof. Rubenstein a much better teacher. He's pretty helpful in Office Hours, so please go to them if you get stuck. The final was better than the midterm because I actually cared about the material and also because of the extra time we had. In the end, what you get out of this class depends on how much effort you put into it. Rubenstein's not the most inspiring teacher, so unless you take the effort to ask him good questions, classes can be pretty boring. You have to push him to take an interest in teaching you.\r\n\r\nI think, overall, it might be better to take Fundamentals with Martha Kim for now. Rubenstein's not bad, but there's a lot he can do to improve Fundamentals. (He also reads CULPA reviews, so I hope he makes the class better in the future).", 
      "workload_text": "8 HWs - take between 2-6 hours each (can be very tedious)\r\n1 midterm (hard)\r\n1 final (very doable)"
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 22 May 2014 20:34:28 GMT", 
      "id": 29538, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Ah, Rubenstein. He spent the first lecture telling us how last year's culpa reviews were all wrong, and at first I thought it was going to be okay but then...\r\n\r\nOkay, okay. So he's not the worst. It could always be worse. I survived the class and learned some cool stuff. And yeah, he's a nice guy and a great person. But when every sample final exam that he gives us has at least one mistake in it, and when he doesn't even know the answers to his own homework problems... It makes me pretty worried.\r\n\r\nI actually don't think that he was that bad of a lecturer and I didn't really mind that the slides had some typos (though I'd maybe recommend not scribbling all over the whole slide in red... I heard someone got him a stylus but I don't think that helped much). He was decently helpful during office hours too, and he does seem to really care about us learning.\r\n\r\nThe main problems were the homeworks and exams. As a previous reveiwer mentioned, homeworks were posted late and graded late and sometimes tedious, but that wasn't even the worst part. Towards the end, some of his homeworks would ask questions to which he didn't even realise the answer, until a student pointed something out to him in office hours. He then tried to say that it was still an answer too but, c'mon, when the question asks \"How can you minimize stalling?\", \"you actually can't\" shouldn't be the answer.\r\n\r\nOur own midterm had a few very significant typos in it (he gave an example of how his state machine worked and his example contradicted the instructions) and our final had a few errors too. Luckily, he grades on a pretty good curve. I didn't think I was doing amazing but I ended up with an A.\r\n\r\nBasically, if you're stuck taking this class with Rubenstein, it's okay, just keep up with the material, go to office hours if you need to, and find some friends in the class to cry with when you can't handle it. And hope that he's a bit more organized next year. If you have a choice though, I'd recommend trying Kim.", 
      "workload_text": "Roughly 1 problem set every week or every other week. The homeworks weren't spaced out that well, and sometimes the homework would not be posted until a few lectures after the one that it was based on. The previous reviewer's estimate of 2-6 hrs per problem set is pretty accurate-- it's hard to say. The early homeworks were easy but tedious, while the later homeworks were difficult but only had maybe 5 problems each. 1 midterm and 1 final-- these are somewhat unpredictable."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Fri, 19 Dec 2014 05:16:27 GMT", 
      "id": 73150, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Professor Kim does a really good job with this class. If you have a decent CS background it shouldn't be too challenging -- you don't even have to go to class if you read the textbook, because she follows it very closely -- but it's pretty neat finding out what happens below the level of the level of C code. Professor Kim is a good lecturer and really good at explaining tricky concepts to the greener students.\r\n\r\nIf the class hadn't been at 10 AM (waaaay too early for this senior) I would've gone more often and likely gotten a lot out of it. When I did go, Professor Kim would mention neat factoids not covered on exams but still good to know, like (my favorite): Intel kept adding more stages to its pipeline in the '90s so it could ramp up its clock speed, and had to change its advertising strategy to deemphasize clock speed when it turned out fewer stages was optimal and clock speeds decelerated as a result.", 
      "workload_text": "6 reasonably easy homework assignments, lowest 1 dropped. One of them is coding in assembly.\r\n\r\nMidterm and final, equally weighted, both fairly easy. If you paid any attention in class you should do fine on these."
    }, 
    {
      "course_ids": [
        4251
      ], 
      "created": "Thu, 22 Jan 2015 16:01:14 GMT", 
      "id": 78368, 
      "professor_ids": [
        4221
      ], 
      "review_text": "Professor Kim was a great, engaging lecturer. She was clearly working hard to make sure everyone in the class understood the material, and showed a level of commitment to teaching that's unusual at Columbia.   She offered very clear and thorough explanations of topics. She took many questions during lecture, and answered them quite well. She was incredibly patient, including spending lots of time in office hours answering questions.\r\n\r\nI didn't work with the TAs much, but they seemed to all be pretty decent, and were generally very responsive on piazza.\r\n\r\nI felt like this class was the easiest in the CS core, along with CS Theory. However it was useful and I found it kind of fun. I would have actually appreciated slightly more workload, and slightly harder exams, since a tiny mistake could have cost you a lot given the structure.\r\n\r\nOverall I highly recommend Kim.", 
      "workload_text": "6 homeworks. Most of them were quite easy, one took under 30 minutes.\r\n\r\n2 \"midterms\" this semester - I think due to her pregnancy she didn't have a final, but had a \" second midterm\" on the last day of classes. Both were easy, which very averages of like 90%+. "
    },
    {
      "course_ids": [
        664
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 54, 
      "professor_ids": [
        47
      ], 
      "review_text": "The information is useful, but the class is boring. Professor Ross tends to give way too much homework much of which isn't necessary for understanding the material.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 557, 
      "professor_ids": [
        375
      ], 
      "review_text": "One of the kindest souls in the Comp Sci dept. There aren't that many profs that post on the web board as often as he does. His lectures may not be the greatest (in fact, you could do most of the learning by using the textbook and the lecture notes he posts online), but his homeworks and tests are pretty well designed. Has a tendancy to delay assigning homeworks until he has covered the material in class.", 
      "workload_text": "5-6 homeworks with 3 grace days, 1-2 projects (in groups of 2), midterm, final."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Fri, 04 Jan 2002 00:00:00 GMT", 
      "id": 1707, 
      "professor_ids": [
        375
      ], 
      "review_text": "Really nice Prof. Really good in office hours if you need a concept explained further. Interesting first project, second project in C++ is boring, takes it right out of textbook. The material is reasonably mixed with real world examples and theory. Grading is fair, although midterm and final are overly weighted towards theory. ", 
      "workload_text": "5 homeworks 1 group project in Java 1 individual project in C++, midterm, final"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sun, 19 Jan 2003 00:00:00 GMT", 
      "id": 4424, 
      "professor_ids": [
        1442
      ], 
      "review_text": "This was his first semester, and it showed. He just presented the lecture slides that came with the book, and read them outloud. Going to class was simply useless, if you had some other time to read it yourself. The first part of the class is  easy and straighforward. There's a big project in 3-stages to build your own database application (duh). The second part of the course reminded me of the good old days at Unger's comp org. However, even though Biliris is as boring and mistake-prone as Unger, he is really a cool guy. He even uses the break to go out and smoke. The second project had nothing to do with database. It could have been given to anyone who had taken statistics and data structures. Everything is graded by the TA.", 
      "workload_text": "5 problem sets taken mostly from the book, 2 programming projects in Java or C++ in groups of two, a midterm, and a NON-cumulative final. Don't be surprised to find something in the homework that was never mentioned in class. If you ask him in class, he will explain it, but he expects you to just read the book. In that sense, this class reminded me a lot of comp org; the book was almost as thick, but the details were just as disgusting. His tests are short and to the point. Even the final was only an hour and a half with 4-5 questions. "
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Wed, 22 Jan 2003 00:00:00 GMT", 
      "id": 4566, 
      "professor_ids": [
        47
      ], 
      "review_text": "Professor Ross has a cool Australian accent.  That's pretty much what kept me going to the classes, though he does teach mostly out of the book.  Either you go to the lectures and understand the material, or you read the book.  You can take your pick.  Also, the first half of the semester covers the more interesting stuff, while the second half can get way over your head.  Make sure not to slack off mid-semester.  You're probably better slacking off for the first month or so.", 
      "workload_text": "2 projects to be done with partners (with various parts due every two weeks), midterm, final"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Tue, 09 Dec 2003 00:00:00 GMT", 
      "id": 7038, 
      "professor_ids": [
        375
      ], 
      "review_text": "Here's the bottom line on the prof and the class. The class is more than a standard db offering in terms of workload: you got to do two projects, a web based db app and another theory-type number cruncher (most db classes make you do that one big app as a term project). There's also homeworks, mostly easy, with an occasional twist. If you go to class, do the projects/homework and score above avg in the exams, you're guaranteed a B+. One caution sign I'd post is: don't ignore the prereqs. You *need* to know how to code, and you *need* to know some data structure stuff. Don't screw around on this one, or you'll run into trouble in the projects. Gravano is basically a good guy. He does his best to help you out (even tho he appears touchy in class when cellphones ring, laptops ping etc, and you got to get used to the self-deprecating humor bit.) He's cool in office hours and email too (he gave several important hints on the second project ... this was a *huge* help after I spent like a whole weekend going blind on the numbers.) Overall, low stress class and he's a decent guy.", 
      "workload_text": "2 projects, 5 homeworks, midterm, final"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Tue, 09 Dec 2003 00:00:00 GMT", 
      "id": 7040, 
      "professor_ids": [
        375
      ], 
      "review_text": "My opinion: the course is not hard, the prof is good.\nCourse covers all the basic db stuff. Most of the material is from the textbook. If you don't know programming you'll have a tough time so make sure you have the prereqs. The first project is a standard web/db app (what most db classes make you do). The second one is a number-cruncher type deal, it sounds kind of complex, but really is easy once you figure out the concepts.\nGravano is approachable and easy. Great in office hours, explained the 2nd project very clearly, I had no trouble running right into the lab and finishing it up. He also responds promptly to email. All in all, a kind soul like the other review said, tries to help you out as much as possible.", 
      "workload_text": "5 homeworks, 2 projects, midterm, final"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sat, 30 Dec 2006 00:00:00 GMT", 
      "id": 17363, 
      "professor_ids": [
        375
      ], 
      "review_text": "Prof. Gravano is great as a person, and puts much effort on teaching, but for reasons I can't even try to understand, he also puts great effort in making even the most basic concepts ungraspable and obscure - obscure in the sense that they appear like irrelevant details that won't help you one bit in getting through the course, let alone a job interview.\n\nThe first half of the course dealt with DB design and SQL coding, and was relatively easy,\nthanks in great part to the self-explanatory, standard flow charts used for DB design and to the equally obvius SQL code. The second half deals with DB I/O cost analysis, and was difficult enough for Prof. Gravano to turn into - take your pick - Derridean post-modern literary theory or Martian rocket science. Even in the project assignments the most obvious concepts were mangled into research paper theory filler - my project team mate, who sailed through the course, kept wondering why on earth the guy would go to such lenghts to turn the clear and easy into the hermetic and impossible. \n\nAgain, I never had any doubt that Prof. Gravano was putting more than enough effort on the class, considering that as a top scientist on the field he had a busy enough schedule, but the obscurity of his explanations made lectures a tough going, until by the second half he was making jokes about everyone falling asleep. The blank looks he was getting by then contrasted with the sincere interest everyone had on the course material before the midterm, when his challenges and questions started such debates, he had to stop and ask people to quiet down. \n\nThis is one of the few courses in which the difficult textbook proves more useful than the overflowing PP slides or the teacher's talk. The TA I was assigned for the project appeared to get kicks out of taking points for the most trivial mistakes, but then again, it is difficult to blame the teacher for such things - in fact he was the one who had to ask her to take it easy with the grading. ", 
      "workload_text": "The hw's were doable, the projects only passably difficult, but the tests were horribly difficult - unless you have a good memory, when rote memorization of concepts will make it possible for you to float through."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Tue, 04 Mar 2008 00:00:00 GMT", 
      "id": 21025, 
      "professor_ids": [
        375
      ], 
      "review_text": "Professor Gravano is tied for my favorite computer science professor.  He generally follows quality texts in his lectures and easily outperforms them in terms of the ease with which the material is presented.  His homeworks and exams are reasonably challenging but also completely fair -- don't worry if you get a 60% on an exam because it will come out in the curve.\r\n\r\nFurthermore, he always knows what he's talking about (more than some professors) as a result of an expansive knowledge of all aspects of databases thus far.  Now that I have gotten to know him better, it seems this stems from a more passionate interest in the subject than I've seen with others in their respective fields and it leads to a genuine desire to help students really master the material.\r\n\r\nI would definitely recommend taking the 6111 course if 4111 was at all interesting.", 
      "workload_text": "Reasonable workload, but group projects are easily do-\r\nable on one's own.  Homeworks can be tricky and are a fair extension of concepts in class.  Exams are generally pretty difficult, but it shows in the curve."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Tue, 22 Dec 2009 05:35:04 GMT", 
      "id": 23566, 
      "professor_ids": [
        375
      ], 
      "review_text": "Professor Gravano is a phenomenal instructor. He presents the material so clearly that at times you'll be bored to death because everything seems so simple! Don't be fooled, though -- this is only because he teaches so well (I made the mistake of being lulled into a state of overconfidence and skipped out on a few lectures, and I'm paying for it now just before the final!). \r\nGravano clearly knows his stuff and can answer any question you might have - if you ever have a doubt, don't hesitate to ask him a question because after he's through explaining, you'll wonder how you were *ever* confused.", 
      "workload_text": "Two group projects (two teammates) - quite time-consuming, but definitely help you learn the material\r\nFour homework assignments - tough but fair and good for learning the material (which is useful because these are good indications of exam questions!)\r\nA midterm and a final - if you attend lectures and review all of the concepts before taking them, you'll be fine. I've heard the curve is great, too."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sun, 02 May 2010 19:05:11 GMT", 
      "id": 24233, 
      "professor_ids": [
        1442
      ], 
      "review_text": "Where to begin...\r\n\r\n1) This class was useless. Biliris is a mediocre lecturer and an incompetent teacher (or he just wasn't trying). His lectures were a complete waste of time. He would crap on and on about some simple concept in the most unintelligible way for an hour at a clip. I can honestly say that I did not learn anything substantial from this class. By the sixth week half of the students did not show up or left at the break. By the fourteenth week it was more like 80%. The material was presented with no context and no depth. I could have taught this class better than he did, and I do not have near the amount of database and teaching experience as he does.\r\n\r\n2) I ended up doing all of the group work by myself because my partner was so lost. I cannot blame him considering the lectures were essentially black holes. If I had not had database experience prior to this course I would have probably been as lost as my partner, who had none.\r\n\r\n3) A bit of the material was out of date. This happens in CS classes often, but it was particularly bad in this class. I think the textbook we were using was from 2003.\r\n\r\n4) We were forced to use Oracle for our projects, which was a nightmare. Oracle is one of the most bloated and hard to learn database systems around. Why we would use Oracle and not MySQL (very popular, modern, and easy to use) is beyond me.\r\n\r\n5) Biliris does not understand English well enough to teach a course. He can hold a conversation, but he cannot explain complex ideas. He did not understand questions asked by students and he often hid this by making fun of them.\r\n\r\n6) The grading in this class was ridiculous. Often points were taken off if we did not answer a question exactly how the TAs thought we should have, despite those requirements not being specified in the assignment description. Each homework and test problem was graded by a different TA, which meant you had to contact many TAs if you had questions about more than one problem. This was incredibly inconvenient.\r\n\r\n7) My assigned TA had worse English skill than Biliris, which made him useless to me.", 
      "workload_text": "There were two projects. The first is pretty substantial and took some time, but was by no means difficult. The second could have been done in a few hours if Biliris actually ever mentioned PL/SQL during the lectures. \r\n\r\nThere were four homework assignments. Some were a bit challenging, but all were mostly irrelevant when it comes to actually learning something useful about databases.\r\n\r\nA midterm and a final. I have yet to take the final. The midterm was not hard, but the questions were as irrelevant as the homework problems. "
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Wed, 12 May 2010 20:53:03 GMT", 
      "id": 24371, 
      "professor_ids": [
        1442
      ], 
      "review_text": "Absolutely awful. His lectures are boring as shit and he doesn't actually realize that a 2.5 hour class can be taught in more than 8 powerpoint slides (literally). For some reason, he's obsessed with Barbados too and won't stop talking about it.\r\n\r\nBut now onto the real stuff:\r\nDon't bother going to class. Read his lectures that he posts online (takes about 30 min) and save yourself the other 2 hours. I can't stress enough how useless his lectures were. It's basically like taking a class online, you just have to show up for the midterm and final. The material is actually extremely useful and somewhat interesting.\r\n\r\nLuckily though, the material is easy and there's not much of it. There's a grand total of 10 short lectures (only 9 of them are tested on), compared to other classes that have about 25 a semester. The average won't be that high because you're with a bunch of IEOR majors and grad students that don't know how to program. The 4 homeworks can be tricky at times, but honestly not too bad.\r\n\r\nThe group projects are relatively easy and straightforward. You just have to demonstrate that your projects contain every concept that was taught in class, regardless of whether or not your Database schema will benefit with it (i.e. Aggregation is great in theory, but NOBODY puts it into practice in their database. it makes things painfully redundant and difficult. but since we learned it in class, you'll lose a substantial amount of points if you don't have aggregation in your database). Don't bother making your project look pretty or have much functionality. As long as you demonstrate the concepts that were in class, you'll get full credit. The median on project 2 was 49/50, if that says anything to you.\r\n\r\nYou have a total of 6 late days, 3 for the individual homeworks, in total, and 3 for the projects, in total. So clutch.\r\n\r\nMidterm and final are straightforward. If you know relational algebra, SQL, and the concepts, you'll do fine. And let me remind you, DON'T GO TO HIS LECTURES.", 
      "workload_text": "4 homeworks\r\n2 group projects\r\n1 midterm\r\n1 final\r\n(all reasonable)"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Mon, 16 May 2011 00:12:55 GMT", 
      "id": 26038, 
      "professor_ids": [
        1442
      ], 
      "review_text": "Yes, his command over English is not the best. Yes, he does take digs at what students say if he doesn't understand them. But overall I wouldn't describe Biliris and this class as awful. His lectures are 2.5 hour long rambles, but not without comical interludes. His jokes are often funny, and he gives a ten minute break in the middle of class, which often extended to fifteen. Having said that, you can manage even without ever going to class, so apart from the few jokes there's very little value addition by his lectures.\r\nThe class material itself is interesting. It c, ould have been presented better (He reuses slides from several years ago, and doesn't even change the semester in the footer), but he has his limitations in teaching ability, and so you just need to make do with it. The four homework assignments are fairly easily. The projects can take time, but if your partner isn't completely lost, you can divide up the work and finish it over the course of a night. The exams are both fair, but of course, there's thinking involved, so it's easy to panic if things aren't going your way.\r\nIf you're not a CS major, I'd recommend to buy the book. His lecture slides are essentially a summary of the book, but there are some concepts that aren't very clearly explained in his slides. If you were sleeping in class (or absent, like I was), the slides will be of very little help in such instances.\r\nI can't say whether Biliris genuinely cares about this class or not, but he definitely gives the impression that he cares about the students. In our first class, he announced that we could call him up at any time before 11PMexcept if we were going through a breakup, in which case he said feel free to call me even after.\r\nIn summary: his lectures are pointless. But he's a nice chap. His material is interesting. The workload: not too bad.", 
      "workload_text": "Four homework assignments - the first couple take 3-4 hours maybe. The third and fourth are shorter.\r\nTwo projects - done in pairs.\r\nOne midterm and one final - both fair.\r\nThree grace days for assignment submissions and three for projects make life much better.\r\n"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Mon, 07 May 2012 23:13:35 GMT", 
      "id": 27264, 
      "professor_ids": [
        375
      ], 
      "review_text": "Professor Gravano is definitely one of the best professors I've had. His lectures are clear, precise, and occasionally humorous. He's very receptive to questions in class and often responds to questions both via e-mail and the discussion board, which is rare in my experience.\r\n\r\nHe uses slides (available online) for much of the introductory portion of the course, but often switches to the blackboard to work out particular examples. The latter half of the course was taught almost entirely on the blackboard. \r\n\r\nCorresponding book sections are listed for each lecture, but going to class or having a friend to take notes for you is important, as he sometimes he covers more or less material than is presented in the corresponding book chapters. The textbook (Ramakrishnan + Gehrke, 3e) is quite good, despite the many reviews you'll find online saying otherwise.\r\n\r\nWhile you will get a project mentor for your two projects, in reality there will be very little interaction with the TAs unless you seek it.\r\n", 
      "workload_text": "4 equally-weighted homework assignments (15%)\r\n1 large project + demo (15%)\r\n1 small project (5%)\r\n1 midterm (25%)\r\n1 final (40%)\r\n\r\nThe homeworks are light and occasionally add to the concepts covered in class. Projects are done in groups of two. The first project has multiple phases and takes place over a large span of time. The second project is short.\r\n\r\nThe majority of the class obtains perfect or near-perfect marks on the homeworks and projects. The exams will be the differentiating factor.\r\n"
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sun, 19 May 2013 22:19:01 GMT", 
      "id": 28405, 
      "professor_ids": [
        1442
      ], 
      "review_text": "This class epitomizes the worst college class where you get a bunch of theoretical knowledge and NO application. We learned about functional dependencies within databases, and now I can show what a functional dependency is...but what is that within an actual database and how does this apply to SQL? We spent 2-3 lectures on the theory and underlying implementation of indexes....but didn't even touch how to actually create an index in SQL. We didn't introduce us to any of the numerous databases available (MySQL, Postgres, SQLite, ...) and had us play with a variant of an Oracle database that I'm pretty sure NO ONE uses in industry. And now I'm thrown out into the real world with a hammer and I have no idea how to use it. A month later I'll probably be nailing my finger into the wall by accident.\r\n\r\nBesides that, the professor creates slides that are basically copy-pasted from the textbook (and the textbook is horrible with typos, mathematical notation gibberish with no explanation, and no real-world application mentions). He hates taking questions, his TAs are half of the time absent from their OHs, and he obviously doesn't care about the class. I guess he's funny though (if you like \"haha wow I can't believe I'm sitting in this classroom funny\").\r\n\r\nIf you plan on taking this course I recommend the following advice.\r\n\r\n1) Never go to class, and just read the textbook.\r\n2) The textbook is horrible so find online slides, lecture videos, and other SQL/databases notes to actually understand the textbook\r\n\r\nWhat does this advice mean? Basically, if you take this class you will be paying a few thousand dollars in tuition to find and learn everything on your own.", 
      "workload_text": "Four hws where the answers are straight from the textbook (if you understand it). A project where you build a web app with an underlying database (he gives no tutorial on how to build a web app and the Oracle database you use is never actually used within industry). A final and a midterm where the answers are arbitrary (is this really good database design? is this really the best SQL query you could have used?)  or the answers are cookie-cutter (vocab, exactly like the hw or class example)."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Sat, 07 Sep 2013 01:07:08 GMT", 
      "id": 28631, 
      "professor_ids": [
        1442
      ], 
      "review_text": "The WORST professor ever. His accent made the lectures hard for us to understand. Besides, when we tried to ask questions most of the time he wouldn't answer that but made fun of us. His class was totally not helpful. You could read the slides by yourself and don't have to waste your time going to his class. You'd better check if your teammate could follow up otherwise it's likely that you will understand nothing in his class. The curve is bad, many people had got C's. ", 
      "workload_text": "Four homework + two projects + midterm + final\r\nThe curve is very bad."
    }, 
    {
      "course_ids": [
        664
      ], 
      "created": "Mon, 23 Sep 2013 23:04:21 GMT", 
      "id": 28650, 
      "professor_ids": [
        1442
      ], 
      "review_text": "Personal idea, this course should be considered as one of the simplest course for grad level, especially when you are in your last semester and want to spend more time on job hunting, or when you are dealing with other heavy courses like OS... Besides, 4111 now is a core! Should it be core earlier, why bothering get trapped by OS. (Holly #@$@$#!, although I admit one can really improve a lot by taking OS.)\r\n\r\nYeah, prof. has an accent, but you have textbook, read it! After all, databases system are not designed to confusing people. We are not at Kindergarten and need to be instructed with everything. The projects are not that hard. The homework are easy. The midterm and final are OK if you know what you've learnt throughout the semester. You don't really need prior experience with databases. Last but not least, firms do pay attention to the relational databases project you are working on, understand the project and explain well during an interview, it will land you a full-time job or internship. Of course, we have a lot of new generation databases like cassandra, MongoDB, etc. The relational database, however, just like ball pen, simple but remains powerful.", 
      "workload_text": "not that much, especially if you compared with other grad level course"
    },
    {
      "course_ids": [
        3105
      ], 
      "created": "Mon, 19 May 2003 00:00:00 GMT", 
      "id": 5770, 
      "professor_ids": [
        1637
      ], 
      "review_text": "I'll say this for Prof. Edwards: he made PLT way more interesting than it should have been.  He is definitely one of the wittier professors in the CS department, so the lectures were engaging.  But if you're planning on printing out slides before lecture, be warned: there are a lot of them (about 40 per class, on average).  Plus, he really integrates his own research into the lectures, as opposed to just plugging it like other profs.  Central to PLT is a group project in which you get together with three other people and implement a programming language of your own devising, which is possibly the most challenging and rewarding thing I have done as a CS major.  ", 
      "workload_text": "Group language project, worth 40% of your grade - very manageable if you plan everything out from day one.  Also, two throwaway problem sets and a cheet-sheet friendly midterm and final."
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Thu, 22 Jan 2004 00:00:00 GMT", 
      "id": 7913, 
      "professor_ids": [
        1637
      ], 
      "review_text": "PLT is a very dry subject, especially when taught using reams of slides.  However, Prof. Edwards is very funny and made the class very interesting.  He has a warped sense of humor and would spice up the lecture notes with hilarious pictures.  Here are some of his famous lines: \"hangs like a criminal\", \"a lazy approach gets you out of infinite work\", \"Things are always in the last place you look.  Of course they are!  You always stop looking once you've found it.\", \"Union is like a structure except its schizophrenic\", \"Symbol table is like a roach motel, you can checkin but you can never leave\", \"computer scientists are smart asses\", \"if thy arc offends thee\", etc. etc.\n\nOh, to my great delight Prof. Edwards would often preface a topic with \"this would make a great exam question...\".  Take heed this advice!", 
      "workload_text": "Homeworks aren't too bad, exams are difficult (study!), and the group project is massive!  For the project, get started early, meet weekly at least, use cvs, get the language design right, don't bite off more than you can chew!  For the exam, make sure you know the basics, know the HW cold, pay attention to good test questions."
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Tue, 28 Dec 2004 00:00:00 GMT", 
      "id": 10321, 
      "professor_ids": [
        1891
      ], 
      "review_text": "If you are interested in programming languages or are required to take PLT to graduate, I would strongly encourage that you take this course with a different professor. In the beginning of the semester, you will think that Aho's lectures are pretty cool and  engaging. Moreover, there is a sense that you are basking in glow of computer science rock-stardom (he is one of the co-authors of the famed \"Dragon Book\" text that you will be using for the class). But, after the first three or four weeks, we were often told to just look in the book to learn about any new concept. In fact, each new idea that was introduced was concluded with the words \"go look in the book.\" He gives affectations to being devoted to his students, and I remember going to office hours several times to ask about topics that weren't being elucidated particularly well by the book. Each time, he forgot my name, and at the end of the (short) conversation, his helpful response was -- guess what? -- \"go look in the book.\" This was irresponsible teaching, and he's able to get away with it because he is tenured and famed within his field. His teaching style would improve vastly if he could only say \"go look in the book\" in other ways, like \"refer to the book for more details\" or \"the book contains much more information on this topic\" or even \"read the book and it will explain this concept better than I can ever explain to you during this lecture.\" I took this class in Spring 2004, and I'm sadly still bitter about this class. You will learn much from this course, but learning about compilers from this guy would be no better than, say, go looking in the book and reading about it on your own.", 
      "workload_text": "No homeworks (!). There is a midterm (20% of final grade), a final (40%) and a semester-long project (40%). The project consists of a language whitepaper, a language design spec, a working implementation of your language, a presentation on how your language works, plus a final report and code print-out (expect it to be about 100+ pages at least). The final was exactly as long as the midterm (both were given during the regular 75-minute class period, and they had the same number of questions) yet it counts for twice as much. TAs were not helpful, but most likely they were overwhelemed with the sheer number of students. Pick your project partners wisely, as you're going to be stuck with them for the *entire* semester. "
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Tue, 15 May 2007 00:00:00 GMT", 
      "id": 19953, 
      "professor_ids": [
        1637
      ], 
      "review_text": "I don't know what to make of Edwards. I like the guy, and I'm *pretty* sure he's a good professor. But I can't prove it.\n\nEdwards knows everything about language design; he's funny and relatively friendly. He keeps the lectures interesting, sort of -- but by the end of the term nobody went to class. For one thing, ONE annoying kid managed to ruin the whole term by asking ridiculously irrelevant questions every five seconds, and Edwards never really tried to shut him up. So the lectures kind of went to shit from that point on.\n\nBut! PLT is super-intense and is probably the first (well, maybe OS) 4000-level course that actually kicks your ass. Personally, I like this. You work in groups and design a language; if you're like us, you leave it until reading week and then just live in the CLIC lab for a few days. You can do it, but it's a bitch.\n\nAnyway, you're just choosing between Edwards and... what, Aho? for this class, so choose Edwards.", 
      "workload_text": "Two homeworks, which tend to mirror the contents of the exam and final almost exactly. Exams are surprisingly hard compared to the rest of the coursework.\n\nThen you have to implement a programming language... for us, that ran about 30 hours lab time, plus a 40-page report (mostly source code)."
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Tue, 04 Mar 2008 00:00:00 GMT", 
      "id": 21024, 
      "professor_ids": [
        1637
      ], 
      "review_text": "I personally like his interesting sense of humor, but some find it annoying.  As a transfer student, I feel he gave the other side of programming languages than my other class which was more theory-based -- one down side is that he doesn't know that much about the lambda calculus, which seems to be a big hole in somebody teaching programming languages.\n\nIn terms of teaching the material, lectures can be a bit scattered but always have great information.  His homeworks and exams are more than fair as they are straight out of the lectures.  If you are in his class, attending the lectures will make you do well in the class.", 
      "workload_text": "The workload was overall about the same as some other programming classes like Networks with prof. Misra, but is definitely less work than OS"
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Wed, 21 May 2008 00:00:00 GMT", 
      "id": 21271, 
      "professor_ids": [
        1891
      ], 
      "review_text": "In all, Professor Aho was a pretty interesting teacher who went over quite a bit of useful material in an ultimately fulfilling class. He is friendly and always willing to talk, and is very approachable during office hours. I would recommend him for CS4115.", 
      "workload_text": "Two assignments, 1 Final Project, 1 Midterm, 1 Final. The Midterm was deadly, everything else was fine."
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Wed, 21 May 2008 00:00:00 GMT", 
      "id": 21273, 
      "professor_ids": [
        2089
      ], 
      "review_text": "Overall a good class. Good programming assignments, some of the written hw questions can be vague. Class lectures were alright but were unfortunately scheduled to start at 9:10AM, so I missed most of them.\n\nExams were not problematic if you knew your stuff, which you would if you could do the homework.\n\nOn a side note, I was able to use this class to get quite a nice bit of experience doing multithreaded programming. That was pretty nice.", 
      "workload_text": "2-3 Programming Assignments (Time Consuming), 4-5 Written HW (easy enough), midterm, final"
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Mon, 13 Dec 2010 18:50:01 GMT", 
      "id": 24938, 
      "professor_ids": [
        1637
      ], 
      "review_text": "I found Prof. Edward's sense of humor painfully annoying and his teaching rather scatter-brained. The topics he covers are all pretty interesting, though, and since the only other option for this class is Aho, I'd definitely go with Edwards.\r\n\r\nBy far the most educational part of the class was the project in which we had to create and implement a programming language in OCaml. However, learning OCaml was a bitch and made my team yearn at times for Aho's section (you get to use Java). Also, Edwards didn't really ground us in the theory well enough for us to create our own compiler until about 3/4 of the way in to the semester, which made the end of the semester hellish.", 
      "workload_text": "1 large team programming project, 3 problem sets (4-8 questions), midterm, final"
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Fri, 31 Dec 2010 23:37:56 GMT", 
      "id": 25299, 
      "professor_ids": [
        1637
      ], 
      "review_text": "A word on Edwards. He would spend a good deal of time telling jokes that apparently he found funny. Humor can be a great teaching tool, but this isn't the Laugh Factory, it's a university. The topics covered in this course are difficult, and having to listen to the professor joke his way through his lectures is irritating and frustrating. As for his metaphors, I have heard people tripping out on drugs make more sense.\r\n\r\nIf you have no experience with functional programming do not take this course. Read up on lambda calculus and OCaml (which he has a huge hard-on for) before you even entertain the idea of taking this course with Edwards.", 
      "workload_text": "Huge project. Not too difficult midterm and final. A few individual programming assignments that if you do not know about functional programming you will not be able to do."
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Sat, 17 Aug 2013 09:57:27 GMT", 
      "id": 28582, 
      "professor_ids": [
        1637
      ], 
      "review_text": "This review is for Edwards and for the SUMMER version of PLT. There is no summer review of him on here so for those of you who were curious, read on!\r\n\r\nEdwards is, plain and simple, the shit. He is quite possibly the most organized professor I have ever seen. His website contains every class of PLT he has taught for the most part including old projects, slides, and documents. Furthermore, his notes are outstanding. In that regard, he has basically done all the work for you. The material is complex at heart but his notes and his descriptions in class make that material very easy to digest. Furthermore, it is evident in every shape and form that he absolutely loves and cares about the material. This man is among the nerdiest to ever exist and he definitely knows his stuff inside and out and forwards and backwards and I feel like he was very effectively in conveying this passion in his lectures. In addition to learning about making a language, you will also learn cool tidbits like C history, language history, or operational details you might not have known about various languages. Edwards is also a total language hipster and spent the first day of class openly trashing Java, C++, and many others (he called Perl an \"abomination\"). Therefore, if you are waiting for his endorsement of the \"cool and underground language you haven't heard of, maaaaaan\" then you will find it with OCaml (more on that in a second).\r\n\r\nThe summer class had two homeworks which were both incredibly easy. The notes will tell you everything you need to know and he doesn't pull any cheap shots; if you pay attention in class and understand the notes then you will be able to breeze through the assignments.\r\n\r\nHowever, the homeworks are only 10 percent of your grade. A whopping 50 percent of your grade comes from a massive project wherein you have to make your own programming language. The other 40 comes from the final exam (no midterm) which, while a little tricky, wasn't too bad.\r\n\r\nThe project itself MUST be done in a language called OCaml which I had never heard of before taking this class. OCaml is quite possibly the most annoying language you will ever use if only because it has the most frustrating and nitpicking compiler I have ever seen......but the good news is that most of the time once it compiles then it works the way you want it to. Personally, I prefer to write code that blows up, analyze it, and then fix it (and isn't that the purpose of test suites anyway?) but you will have no such luxury with OCaml. Furthermore, it has very unhelpful error messages; it is fairly difficult to ascertain the problem when the only indication of what you did wrong is something like \"Syntax Error\" or \"Expression was 'a * 'b * 'c but was expecting type 'a * 'b list\" (and what the fuck exactly is a 'b list?!?!? I just finished the class and I still don't know). If you thought \"Segmentation Fault\" was bad just wait until you get a load of this. Still, Edwards makes the point that OCaml is an easy language to write compilers in and once you start getting good at it you will see where he is coming from. The language itself is fairly powerful and you can do quite a lot with only a few lines. As annoying as OCaml was I am glad that we had to use it if only to a) learn a new language and b) gain the new perspective and discipline from programming in it. It is also interesting to learn a new language when taking a class dissecting what makes a language \"good\".\r\n\r\nSTART EARLY ON THE PROJECT. The class is 6 weeks long and goes by faster than you'd ever believe. My team and I were pretty good at staying on point throughout but I can very easily see how the project can be a nightmare if you wait until the last minute and doubly so if the team hasn't practiced with OCaml. There were other teams demoing with barely finished languages who appeared to make that mistake; don't let it be you.\r\n\r\nThe only complaint I have about this class is the time we spent covering Prolog. While it is an interesting language to learn about, I don't know why he spent the time he did covering unification and searching considering AI is already a class here. This part of the class seemed completely out of place and irrelevant next to anything else we had done all summer. There was even a Prolog question on the final exam. It seemed rather pointless to have this question on the final, which is supposed to test my knowledge of programming languages and translators, covering an AI topic and making it worth 10 points.\r\n\r\nLastly, a word of warning: Edwards is a very direct person and is quick to criticize or otherwise shoot down your ideas for your project. Don't take it personally. At first he hated my idea too.", 
      "workload_text": "Homeworks are both incredibly easy and are easily finished in a day. Yes, drawing automata can be time consuming but it isn't hard to do.\r\n\r\nThe project itself isn't too bad. My team was able to do it in 6 weeks. If we can do that then there's no reason for you to fear it. As long as you coordinate effectively with your team and you don't procrastinate it's a breeze. I can see how the contrary can easily become a nightmare.\r\n\r\nLastly, I want to clear up the misconception that PLT is one of the hardest classes in CS here. That isn't true at all (at least not with Edwards). The key to success in this class lies, as opposed to many other classes I've taken at Columbia, entirely on you. You've got to put in the work but considering the time it isn't that bad and it will pay off.\r\n\r\nI would definitely recommend taking this over the summer if you can. "
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Wed, 09 Apr 2014 16:09:08 GMT", 
      "id": 29311, 
      "professor_ids": [
        1637
      ], 
      "review_text": "Really interesting content, not necessarily taught that well. Writing a compiler is an amazing experience, and if you start early, you should be fine. I went in with no functional programming experience, and really enjoyed learning OCaml and the functional paradigm. I'd definitely recommend the class: at the end you'll have written your own programming language!\r\n\r\nSTART EARLY, and really be selective in picking your team. A bad team will ruin the semester for you. \r\n\r\n", 
      "workload_text": "Very easy midterm and final, a few homework assignments that are actually very useful in preparing for the project. The project is massive, but you have all semester--so use all semester. Go to office hours early on. "
    }, 
    {
      "course_ids": [
        3105
      ], 
      "created": "Wed, 24 Dec 2014 21:57:07 GMT", 
      "id": 76954, 
      "professor_ids": [
        1637
      ], 
      "review_text": "Stay away from Edwards, go with Aho. Edwards recommends Aho himself. Also, Aho's famous because he's the A in AWK and wrote the Dragon book. The only thing you'll miss in Aho's class is Edwards' sense of humor.\r\n\r\nEdwards is the snarkiest, most sarcastic, immature professor you will meet in the CS department. He tells some really great nerdy jokes and his Facebook wall is hilarious since he belittles all his students publicly on it, but I don't recommend taking his class. Don't ever email him with an excuse or stupid question since he will publicly shame you (name removed though) on Facebook.\r\n\r\nI didn't learn much in the course. The material was pretty straight forward, nothing really complicated like you would see in more theoretical CS classes. You sort of get a high level understanding of how a compiler works and that's about it. If you did most of the work for your project, you will learn more mostly by reading on your own to save your project and not because you learned anything from this class. \r\n\r\nHis exams are reasonably easy but the problem is everyone gets high scores. The median on the midterm was like a 94. If you screwed up even a little bit, you were done for. You don't have to know all the material in the slides - most of it is to build the compiler. He posts review slides the class before the exam. You just need to know the stuff on them. Check out the last semester slides on his website to peek ahead. Grading was harsh and he often cuts points for really dumb reasons. Make sure your HW is perfect if you want a good score.\r\n\r\nThe project is KILLER. In all likelihood, you will fail if you don't assemble the Avengers to be your team. Make sure you put together a strong team which has time to commit to this project. The project is structured such that one person (the most responsible or the least busy) always ends up doing over 50% of the work. We've looked at other groups and previous teams and this is the case through out. I think Edwards should take a look at this and somehow fix the project so that it's more fair.\r\n\r\nSome tips: Start early!!! Get the scanner and parser out of the way quickly. You can copy most of them from last year's groups and just modify them to your liking. He doesn't really teach you enough to write the compiler till 3/4ths of the way into the semester but don't wait for that since you'll get screwed. Semantic checking and code generation take a ton of time to complete. Start early and be sure to pester the TAs for help. Also, half of you team will be slackers and you will lose all faith in humanity. You just have to deal with it.\r\n\r\nHe doesn't make expectations on the project clear at all, so I'm going to break it down for you here. You need to turn in your proposal 2-3 weeks into class. Get started with the scanner and parser ASAP. Then turn in your language reference manual which says what your language will look like. Then code up the rest of your compiler and put together some tests. Our group ended up writing 70% of our language during reading week and finishing the slides for our final presentation and the project report during finals week. Needless to say, my other exams got screwed in the process.", 
      "workload_text": "3 HWs (10%  total)\r\n1 midterm (20%)\r\n1 final (30%)\r\n1 MASSIVE project that will KILL you (40%)"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 52, 
      "professor_ids": [
        45
      ], 
      "review_text": "A good lecturer who, unfortunately, seems to hold students in genuine contempt; it irritates him that we tend to insist on quality of education. No complaints on the lectures, and problem sets are ok, since they're book-based; it's the programming assignments that ruin the class.  They're a true mass-nightmare, since students are given literally no preparation for them, and lectures have nothing to do with them. Honestly, with no way to learn how to do the project on your own, can he really be surprised that so many of his students cheat? The plus side is that if you work your ass off (and I mean work your *ass* off) and pay close attention, OS I will teach you two semesters worth of Linux and Unix OS mechanics.  Unfortunately, if you have to take OS, there is really no other choice than Nieh.  Either hold your breath and scrap together a B, or split up with your boyfriend/girlfriend and move into the lab... just be glad that not all teachers care so little about coddling you as Nieh does. Hopefully, you'll actually learn something in the process, as he knows the material inside-out. And if Linux is old Hat for you, you might possible find yourself enjoying the class.  But not likely -- Nieh, like so many other cs profs, confuses a ridiculous 'sink-or-swim' approach for academic rigor.  He should wake up and face teaching like an adult; you should avoid him.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Wed, 22 Jan 2003 00:00:00 GMT", 
      "id": 4556, 
      "professor_ids": [
        1472
      ], 
      "review_text": "Professor Keromytis has excellent background in BSD security research.  That is well and good, and I'm certain he could simply make a class to teach everyone about the work he has done and the publications he has somehow managed to get his name scribbled on.  However, he isn't really an Operating Systems professor.  That is to say that he speaks from the book, and like other CS classes, you never have to show up and can read the material on your own if you so desire.  Just work on the project and present it well at the demo and you'll land yourself an A.  Also, he's really not such a people person.  Interactions with students and the professor ranged from mild politeness to blatant rudeness, both in person and via email.", 
      "workload_text": "Midterm, final, 3-4 homework assignments, huge project (45% of grade)"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sun, 18 May 2003 00:00:00 GMT", 
      "id": 5752, 
      "professor_ids": [
        45
      ], 
      "review_text": "Prof. Nieh is a good professor.  His lectures, although boring at times, are informative.  My main quibble with this professor is the manner in which he interacts with his students.  He has a real disdain for them.  Be careful not to get on his bad side, or you will be subject to some of the most twisted, Gestapo-esque student-teacher interactions you have ever witnessed.  Trust him less than he trusts you and you will do fine in the course.", 
      "workload_text": "Craziness. 5 out of 6 assignments, midterm and a final."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Fri, 23 May 2003 00:00:00 GMT", 
      "id": 5870, 
      "professor_ids": [
        856
      ], 
      "review_text": "First and last impression of Sidorsky: the man is exceptionally brilliant and very well read. It is not often that your professor has the ability to lecture and provide the insight that can only be provided given that they were present during the time frame of what they were teaching. His lectures got repetitive as he took a long time to get through material bc he was constantly reviewing and rehashing. His eyesight is less than stellar as he will ask for questions and miss the raised hand that is in the front row. He definately knows his material well and delivers it well. as the last reviewer stated, show up to class, some part of the grade is attendance and exams are entirely lecture note based.", 
      "workload_text": "1 midterm, 1 final. lenient grader, everyone basically makes a B or higher."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sat, 24 May 2003 00:00:00 GMT", 
      "id": 5872, 
      "professor_ids": [
        45
      ], 
      "review_text": "Great teacher, definitely one of the best lecturers in Columbia CS department. This is a rough class, but any class that involes with operating systems is rough, there's no way out. Hacking the linux kernel will be the most frustrating thing you''ll have ever done... but you'll get a lot out from this class, in terms of programming skills and systems knowledge in general. This class will also definitely help you to get a job if you are interested in doing IT as a lot of big firms are now hacking the linux kernel for their own benefit.\n\nOne warning: WATCH OUT FOR CHEATING FOR THIS CLASS, this class is notorious for cheating and THEY'LL CATCH YOU!!!\n\nBut this is definitely a fruitful class, definitely one of the best CS classes i took at Columbia", 
      "workload_text": "6 Homework Assignments (Written and Programming)- The lowest grade assignment will be dropped.\n\nMidterm and Final"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Mon, 01 Dec 2003 00:00:00 GMT", 
      "id": 6898, 
      "professor_ids": [
        45
      ], 
      "review_text": "In my opinion, Prof Nieh lives in the unrealistic world where a day has 48 hours or more for a student. The work load is way too much and his lectures are absolutely useless when it comes to doing the programming assignments. He might be an intelligent guy but anybody can handle an operating systems course by repeating what is in the text book.  I dont understand how this course has become so popular over the years. The regrading procedure is bureacratic crap and it makes life more miserable for the students who dont have the time to write down lengthy explanation as to why they require a regrading, as they are otherwise busy trying to complete the programming assignments. I believe there are easier more effective ways to learn Linux than trying to cramp it all in 2 and half months.  I would never recommend this course to anyone.", 
      "workload_text": "5 best out of the 6 programming assignments, midterm and final"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Wed, 10 Dec 2003 00:00:00 GMT", 
      "id": 7049, 
      "professor_ids": [
        45
      ], 
      "review_text": "Ok, here's a simple test to determine how you'd do in Nieh's OS class. Rate yourself on a scale of (1=low to 10=high) on each of the following: C/UNIX programming; low-level debugging (i.e. pointers, memory traces, locking/serialization); Linux kernel. Now take the average. If greater than 25, you'll do ok. If greater than 15, expect to spend at least 10 hours a week in the CLIC lab. If less than 15 then **don't bother**. For real. If you are not an expert (or at least very very good) in C and UNIX, then *don't bother*. Now about the class itself. It runs at 200 miles per hour. If you can't keep up with the homework, then you are basically screwed. The programming part is **all Linux kernel hacking** and it is *not* covered in class. Don't expect the TA's to debug your problems and don't expect the prof to give much help except conceptual stuff. Of course, if you have munched Linux kernel code already, then this course will be a breeze. BTW, the cheating policy is outrageous (if the TA suspects you in the least, you are screwed.) Like the other review said, trust the prof/staff less than they trust you and you'll be fine. Prof is okay at office hours, but doesn't have time to give you detailed explanations and stuff -- either you go *very well prepared* or get thrown out in less than 5 mins. But if you can keep up with it, you'll get something out of it.", 
      "workload_text": "6 homeworks (theory + heavy duty Linux kernel hacking) with lowest hw grade dropped, midterm, final. No extra credit."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sat, 17 Jan 2004 00:00:00 GMT", 
      "id": 7763, 
      "professor_ids": [
        45
      ], 
      "review_text": "If you're going to look for a job in I.T. after graduating with whatever degree you're working towards, this class is a must. The fact that Linux is used as a case study throughout this course is *immensely* useful, if only that OS courses at other universities are taught with merely pedagogical operating systems such as Minix or Nachos. That said, the programming part of the homeworks was arduous and time-consuming (yet rewarding once you gradually grokked a solution, which ended up being less than 50 lines of code for most of the assignments). An able CS undergrad would spend anywhere between 10 to 20 hours a week on the homeworks (written + programming parts combined). Nieh's lectures are very straightforward, and they are very much worth attending. The class is all about *detail* -- for those in systems, there is mounds of it to drum into your head, and this class gives you good practice. The worst part of the class is not the homework, but the morons that you can be potentially be paired up with for doing the programming assignments.  Your partner may contribute nothing, yet s/he can get all of the credit for your hard work. Luckily, you get to submit reviews of your partners and they swap around the programming partners based on those reviews after the first two assignments.", 
      "workload_text": "6 homework assignments. Each assignment has a written component and a programming component. The worst homework grade is dropped (i.e. your worst written score and your worst programming score is dropped, so if you did badly in the written part in homework #3 and the programming part of homework #5, those scores are dropped.) Midterm was easier than the final."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Thu, 06 Jan 2005 00:00:00 GMT", 
      "id": 10943, 
      "professor_ids": [
        45
      ], 
      "review_text": "Professor Nieh is generally an amiable person.  He provided us with Halloween candy during the midterm and held a pizza party/review session for the last day of class.  His teaching style of writing bulleted lists and making diagrams on the blackboard is mildly helpful -- at least it's not Powerpoint.  The material was actually really interesting, and concretely brought together things I had learned in other CS classes.  Unfortunately, all of this pales in comparison to the torture of the homeworks: endless hours of staring at a computer trying to understand somebody else's LInux code that is hardly discussed in class.  The material taught in class was how an operating system works.  Ability to do the homeworks was in NO way a function of how well you understood this material.  Take this class if you don't care about your grade or have no social life.", 
      "workload_text": "6 disgusting group homeworks, midterm and final."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Fri, 09 Sep 2005 00:00:00 GMT", 
      "id": 12761, 
      "professor_ids": [
        2618
      ], 
      "review_text": "I took OS with Professor Kamra over the summer. The course was 12 weeks instead of 15, so I was expecting it to be a little less rigorous. But I didn't expect the professor to show such little commitment to the class. Around the second or third week, he posed the following question to us: \"Does any mind if we don't have class on Thursday, and just have class one day a week?\" No one responded, and this was viewed as consent to literally cut the amount of scheduled class time in half. (I'm not sure how ethical this was, but I didn't want to be the one to complain, and most people just seemed to be in there for the credit.) He claimed we'd cover the same material, but I'm doubtful. I was going to put a complaint about this in my official class review, but it appears we were never given any forms. \n\nAs far as lecturing style, he's pretty straightforward and open to student questions, but it's difficult to discern any passion for the subject matter in his delivery. He doesn't go into much more detail than the slides, and I ended up getting most of what I learned from the book. \n\nHe told us there'd be four quizzes but the first only came about halfway through the term, the second came a couple weeks before the final, and the final two simply didn't come. These quizzes are very unusual in that they're multiple choice, but there is no indication as to how many of the choices are supposed to be circled. And many of the answer selections seem quite borderline, in my opinion. No quizzes or grades of any sort were revealed until the very day of the final exam, which made it very difficult to gauge how much to study. \n\nI was amazed that this class gets you the same credit as the legendary OS class taught by Professor Nieh during the Fall. If you want an easy A in OS, I'd recommend taking this class. But if you want to be challenged, or really learn about the linux kernel, take it with someone else, some time other than the summer. ", 
      "workload_text": "There is no linux kernel hacking. Instead, you build your OS using OSKIT inside VMWARE. Each OS test requires two reboots of the vmware, so this can be tedious. That said, I really enjoyed this project. There were also two earlier projects, one of which was to implement dining philosophers using a) threads/semaphores b) processes/pipes. These assignments were very instructive. But there's no need to really do a good job of it, because your grade is determined completely by a two minute demo in which you show him the program running, and explain to him how your code works (professor showed up an hour late to said demo). He never even asked to see certain parts of the assignment that I knew some people didn't have working. The final OS demo was equally cursory. When I complained to him anonymously about his grading method, he claimed his method was more effective than having him and/or the TA go over the code themselves, and that if I had a problem with how mine was graded individually, I should talk to him about that specifically. It was hard to have a problem with \"how mine was graded\" though considering that we were never even told our grades on them."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Tue, 12 Dec 2006 00:00:00 GMT", 
      "id": 16807, 
      "professor_ids": [
        1472
      ], 
      "review_text": "Erm... some people formed a cult of personality around this guy, but I found him to be kind of lousy as an instructor and had a tough time maintaining any interest. A lot of questions would be answered in the form of a long, irrelevant story, which was annoying, and the exams were sort of harsh.\n\nGuest lecture from the VMWare guys was pretty cool. I did eventually warm to this class as the term went on, and doing some kernel hacking will make you feel warm inside, so... Plus it's not like you get a choice, really.", 
      "workload_text": "5 and a half homeworks, each of which you get about two weeks for (hell, you could just do them at the beginning of the term). Time-consuming if you don't know what you're doing (I didn't) -- if you already know a little about the kernel, I suspect it's a very light load. Short exams."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Thu, 15 Feb 2007 00:00:00 GMT", 
      "id": 18675, 
      "professor_ids": [
        1472
      ], 
      "review_text": "I liked Angelos.  He seems intimidating at first (if you judge him by his mugshot on the columbia site), but he's really very friendly and takes time to explain things again if you didn't catch it the first time, and seems to enjoy teaching this class.\n\nConsider this class CS bootcamp, though.  If you're not completely comfortable with C and the linux kernel, the assignments will kick your ass.  They took up all my free time, essentially, but somehow I enjoyed it.\n\nI found the midterm to be much easier than I expected, but the final test was pretty brutal.  \nAll in all, I would highly recommend taking this course and this professor.", 
      "workload_text": "Heavy.  You're suicidal if you're thinking of taking this class with Algorithms."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Thu, 12 Apr 2007 00:00:00 GMT", 
      "id": 19663, 
      "professor_ids": [
        1472
      ], 
      "review_text": "There's a CULPA review of Dan Rubenstein in which the reviewer compares him to a sushi chef who just hands you a dead fish and then criticizes your cooking skills. Keromytis is much worse than that. He's more like a swimming teacher who throws you into a huge pool of acid, then just randomly rambles on about the Summer Olympics. In his lectures, he was always talking about new concepts without introducing them first. Example: one day he was talking about page faults, as if everyone knew what a page fault was. But he had never talked about page faults or pages in class before. I raised my hand and asked \"What's a page fault?\" He said, \"Oh, that's right, I haven't talked about pages yet. I meant to say 'TLB miss', not 'page fault' \". OK, fair enough. But then, a few minutes later, he used the term \"page fault\" again. He STILL hadn't introduced the concept of pages. You need to be aware of what you're saying... Don't assume we know these things, we don't all have like 8 million PhD degrees in CS like you. It's a CLASS. We're there to LEARN. That means most of us didn't know anything about this crap at the beginning of the semester.\n\nKeromytis is one of the many professors at Columbia whose teaching skills were NOT taken into consideration at all when Columbia decided to hire him. If Columbia decided jobs based on teaching skills, Angelos would be fired tomorrow. Basically, he got hired mainly because he's good at acquiring money for the university through research grants.  Learn how to run a class. Oh, wait, I guess you never will learn that.. Columbia has tons of professors who were hired like this. All the most selective colleges in America (the \"top-tier\" colleges) do. It's a serious problem with the American academic world today. Before I started attending Columbia, I heard that the Ivy League colleges were the \"best\" colleges, and I used to believe it. But now, more and more, I'm finding that idea hard to swallow.", 
      "workload_text": "Ridiculous. The homeworks basically consist of making changes to the Linux kernel, which is really hard if you've never done it before. It's a whole different ballgame than normal programming. And Angelos never took any time in class to give advice about how to do it."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Mon, 30 Apr 2007 00:00:00 GMT", 
      "id": 19796, 
      "professor_ids": [
        350
      ], 
      "review_text": "Pure hell. Though Shulzrinne is a very competent lecturer, who fills the powerpoint-driven class with his vast array of knowledge and with up-to-date news (he even brought up newegg.com on the screen to be sure of the size vs. price of hard disks today) the course itself is probably the most intense you will EVER see in this department. \n\nBe prepared for a very new kind of programming; you won't be writing anything from scratch (save perhaps the first project where you write the unix Shell). Instead you will have to understand lots of cryptic code and obscure structs in the kernel in order to piece together half of an understanding of what is going on before you can actually make changes. The development cycle, far from being the simple 'javac blah.java; java blah' will instead be tweaking small sections, recompiling the kernel, and rebooting, which can take the bulk of your time. The three TAs, however, were very available and ready to help out.", 
      "workload_text": "Extreme. Five group programming assignments which involve VERY confusing hours of attempting to make sense of vast reams of code in the kernel and then finally inserting a few strategic lines in just the right place to make it work. You will spend many hours figuring out how to track down bugs causing mysterious kernel panics that crash the machine. In addition, there are six written (individual) homeworks that are also quite heavy. Altogether there are 11 assignments, launched close together, and no time to breathe. Homework 50%. One midterm (20%) and one final (30%)."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Tue, 04 Mar 2008 00:00:00 GMT", 
      "id": 21027, 
      "professor_ids": [
        45
      ], 
      "review_text": "This class was the class I have learned the most from, and has also been the class from which I have gained the most marketable skills I have and have at least indirectly landed me job offers.\n\nSometimes professor Nieh presents material in a suboptimal order, but he is very good at explaining low-level system concepts and hardware interactions as well as higher-level algorithms.  Exams are definitely fair, but homeworks can be ridiculously difficult in some cases, but others are a good amount of work and are very educational.\n\nHe is also very approachable in person and will help with concepts outside of class and welcomes feedback as well.", 
      "workload_text": "The largest workload of all the classes I have taken in the CS department (databases, vision, PLT, adv. databases, AI, etc.) -- 5-6 projects that involve directly altering the linux kernel, 2 exams, each project is a group project with an individual part with problems mainly from the text."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Wed, 21 May 2008 00:00:00 GMT", 
      "id": 21274, 
      "professor_ids": [
        3448
      ], 
      "review_text": "Operating Systems is typically taught by Jason Nieh. This past semester it was taught by Prof. Nahum.\r\n\r\nOverall, Nahum is an interesting lecturer who tries to engage the class as often as possible during lectures. He is very approachable and very helpful as well, if you are in a bind (say if the pressures of the world make you and the rest of the class need a hw extension).\r\n\r\nGoing by the number of assignments (and what Prof. Nahum said at the beginning of the semester) the class is a bit less hardcore than when Nieh last taught it, but all the important bits are still intact and you still learn a lot.\r\n\r\nIf Nahum teaches OS again I would definitely recommend it, as he is a pretty solid teacher.", 
      "workload_text": "4-5 Assignments with Programming and Written Component, Midterm, Final"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sat, 10 Jan 2009 07:08:26 GMT", 
      "id": 22172, 
      "professor_ids": [
        45
      ], 
      "review_text": "Hardest CS class you'll take at Columbia, hands down. Also, the class you'll learn the most from. Work hard in this class and you will be rewarded. Work not so hard and, well, you'll know the theory fairly well, but that's about it. This class requires a highly intimate knowledge of C--if you don't know it very well, then either skip the class or be prepared to read the K&R book thoroughly.\r\n\r\nThe course covers the internals of the Linux kernel and we worked specifically with 2.6.11. Nieh covers mostly theory in class, and there is one text which goes over theory in more detail, and one which is a god-awful dry textbook (more like a manual, actually). The assigned readings aren't that long, and you will definitely need to do them--otherwise you will have no idea what the hell is going on. That being said, his lectures compliment the readings very nicely. Nieh was one of my better profs in terms of not \"teaching out of the book.\" However--Nieh is the person you go to if you don't understand theory. If you need help with the homework, skip him and go to the TAs directly (he has little involvement in the homeworks).\r\n\r\nFor each homework, you write a patch to the kernel that does something. After you submit, you have to meet with the TA for ~30 minutes to demo it, and they will also run their own test program on it. Be careful as they are NOT AT ALL forgiving if anything goes wrong--if you can't get it to work (even for a stupid error like you submitted the wrong file), you lose practically all points. Also, each HW has a written portion (~10 questions, usually 50% of the grade).\r\n\r\nHWs:\r\n1. Basic stuff, write a small shell, etc.\r\n2. syscall logger: not that hard, just an introduction to syscalls/the virtual machines you'll be using\r\n3. waitqueues/locking/threading stuff: you don't have to write that much code, just be careful what exactly you write.\r\n4. implemented a new scheduler type. most of the class just skipped this HW entirely, i recommend you give it a shot, but, don't bother if you can't get it.\r\n5. memory tracker: write a syscall that can track what chunks of memory you're using. requires you to go low-level with page tables, etc. tough but doable.\r\n6. process tree filesystem: make a filesystem that reflects the processes on a system. it's a lot easier than it sounds; he gives some examples of other pseudo filesystems in class.", 
      "workload_text": "6 homeworks, 1 midterm, 1 final. Best 5 out of 6 homeworks used. Be careful - each homework could be considered a workload you would put into a project for another class. The midterm and final were both standard: he has a review session for each where he goes over old ones. The exams you take will be different, so you can't just study the old ones and be fine, but they're aren't THAT tricky."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Mon, 19 Jan 2009 17:18:43 GMT", 
      "id": 22284, 
      "professor_ids": [
        45
      ], 
      "review_text": "This is by far the most demanding and rewarding class I have taken as a CS grad student at Columbia. The famous 6 Linux kernel homeworks were just as time-consuming as could be expected. However the Prof and the TA:s were very helpful and there is a good discussion board belonging to the class. It was possible to skip one homework without a grade penalty. The first two assignments were not that difficult but 3-6 was very challenging.\r\n\r\nThe exams were in general pretty straight-forward if you had attended the lectures during the semester. The lectures however were rather slow and somewhat obstructed by irrelevant questions. The level of the lectures were much lower than what was required to finish the homeworks.\r\n\r\nThe best advice I can give for this class is to preferrably get familiar with C and Linux as much as possible before starting the class. No previous kernel programming experience is necessary but not having to spend time with syntax problems is very nice. \r\n\r\nBut anyone interested in low-level programming should definately take this class.", 
      "workload_text": "The assignments took us on average up to 40 hours each.\r\n \r\nIn addition there is some reading to do and lectures to go to. The exams does not require a lot of studying though."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Fri, 05 Jun 2009 13:53:34 GMT", 
      "id": 22946, 
      "professor_ids": [
        45
      ], 
      "review_text": "This course is the best CS course I have ever taken.\r\n\r\nI entered the course with very little C experience and with hardly any Linux experience - let alone any kernel programming experience. After taking this course I did a project for the professor next semester and I now feel confident to take on large kernel intensive projects.\r\n\r\nFurther, even if you're not going to be an operating systems developer, taking this course will make you understand all those details, which are unavoidably important, but always seem vague without having real OS experience - such as memory management, device drivers, threads and processes and more. I have taken another OS course before this at another institution, and I have to say that a course like this should be mandatory for all CS students.\r\n\r\nJason is an excellent teacher, who is very approachable and answers any question with insight and dedication, so take this course with him if you have the chance.\r\n\r\nOnly criticism is that I think there should be a homework related to writing a driver/module instead of for instance changing the scheduler, as it is more relevant for most of the kernel work to be done by the majority of people. Also, the classes do seem a little slow at times, but I guess that's more of personal preference.", 
      "workload_text": "Regarding the workload, yes, it is VERY tough. The homeworks will kill you, and if you have little C and linux experience it will be even worse. As another reviewer wrote: do some C programming practice before starting this course! Also, pick a good teammate and plan the entire semester for homeworks (including which homework to possibly skip) from the beginning. The midterm and final are not over the top difficult, but will require knowledge of what you are doing. (The questions are relevant though and not to test-like).\r\n\r\nDon't let the workload scare you off, but don't take this course together with other core-courses - you will suffocate :)"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sun, 03 Jan 2010 21:55:49 GMT", 
      "id": 23765, 
      "professor_ids": [
        4214
      ], 
      "review_text": "Operating systems is a mad hard course. The assignment take forever. If you don't need to take OS you should avoid it altogether. Its a very painful course, having left me sitting in that smelly CS lounge staring in front of ugly terminals displaying kernel bug and panic messages on warm spring weekends while everyone else plays with frisbees or what ever the youth plays with these days. However the skills learned from this class could come in handy; it helped me net a sweet job so the pain was worth it for me.\r\n\r\nThe theory behind the class isn't too bad but the assignments involve changing the actual linux kernel to do new things. The kernel is very confusing and has many program practices which would normally be considered bad, such as extensive use of macros, but is justified for efficiency. There are a ton of underscores everywhere which annoys me (I prefer the Java capping style but oh well). Also since its the kernel debugging is a lot harder. Make sure you thoroughly understand C before this course.\r\n\r\n", 
      "workload_text": "6 super heavy assignments (1 dropped), tough midterm and final"
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Mon, 17 May 2010 17:25:16 GMT", 
      "id": 24443, 
      "professor_ids": [
        4214
      ], 
      "review_text": "This is not a \"mad hard\" course, but a few bad policies unnecessarily make it more painful.\r\n\r\nDespite repeated pleas Prof. Yang did not post the slides before lecture, his reasoning being that this would force everyone to take notes. This voodoo pedagogy ended up discouraging me from taking notes. Please take a look at this: \r\nKimberley A. Babb, Craig Ross, The timing of online lecture slide availability and its effect on attendance, participation, and exam performance, Computers & Education.\r\n\r\nHis slides are pretty incomprehensible/garbled in most places and too verbose in others. Prof. Yang is pretty earnest, so it may be a matter of N-iterations. \r\n\r\nThe TAs for this course were not the best. They're perfectly OK with the grading but their mannerisms, politeness and preparedness leave a lot to be desired. Also getting the TAs to grade parts of the exam is ridiculous.\r\n\r\nSpring break gives you a breather, so if at all possible take OS in the spring. Prof. Yang will have asides on topics like Files Systems, Concurrency, Testing etc. whereas Prof. Nieh (Fall) talks about other OSes like Android. Other than that the two offerings are almost the same.\r\n\r\nThe Linux kernel is written with *excellent* C programming practices. Some of the constructs are delightfully concise yet ridiculously extensible and performance tuned. Doing the first assignment to its completion will get your C programming up to scratch.", 
      "workload_text": "I scoff at suggestions that it's too heavy. It's entirely reasonable given the ambitious scope of this course and if you understand what you're doing. Make sure you pick partners who like OS and are not just trying to get it over with."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Wed, 26 May 2010 02:18:33 GMT", 
      "id": 24550, 
      "professor_ids": [
        4214
      ], 
      "review_text": "OS is an essential course and you could learn a lot about kernel programming. \r\n\r\nHowever, personally speaking, Prof. Yang's classroom delivery is the worst that I've ever seen at Columbia. The first several classes, it turned out to have 50-70 attendance. Then, this number continued to drop and after Spring Break, we've only had 10 people or so in the classroom. It seems people prefer reading textbook. A lot of errors in his slides. He's a nice person tho.\r\n\r\nSome TAs in this course are really bad, in contrast, some are really good. I agree with the previous review. One TA had a serious attitude problem and he looked down upon on the students. And it seems that there's few communication and discussions among the TAs, so that they have different criteria when grading. A lot of grading errors. It's totally unprofessional.", 
      "workload_text": "6 tough HWs through out the semester. 1 can be dropped."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Fri, 17 Dec 2010 01:31:43 GMT", 
      "id": 24992, 
      "professor_ids": [
        45
      ], 
      "review_text": "Real men take Operating Systems. And, of course, hard as nails women too. \r\n\r\nThis is by far the hardest class I've ever taken. The workload is about 30-40 hours per week on project weeks, almost none on off weeks. And there are like two off weeks. \r\n\r\nThe course itself, as in the things you get examined on, is actually relatively simple. There are two components: a concepts component, which you can get entirely from reading the textbook, and a practice component, which consists of endless hours of reading through C source code, followed by more hours of implementing your design, followed by a frantic 24 hour code marathon once you finally figure out what you were supposed to be doing from the start. \r\n\r\nSome prerequisites: Firstly, you need to know C really, really well. I mean like, you need to be able to write memory-safe in C in your sleep. You will be taught thread and interrupt safety in the course itself. \r\n\r\nMore importantly, you need to be able to read C code. There is no manual for the Linux kernel. It's C all the way down (well no, it turns into assembly at some point...) I mean, yeah there are some documentation notes, but the real deal is the code. If you can't figure out what a method is doing in one glance, you're going to have to brush up on your sight reading. \r\n\r\nOh and also, the projects are based around modifying the Android Linux kernel. I mean, how cool is that! ", 
      "workload_text": "Oh sweet Jesus. Like I said before, the workload is crushing. On the bright side, though, you will be working as a team, so you can always opt to cling like a remora to your teammate's work. If laziness is not your thing, you'd better get the lead out, because this class will make the rest of your classes look wimpy. "
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Tue, 11 Dec 2012 19:50:52 GMT", 
      "id": 27711, 
      "professor_ids": [
        45
      ], 
      "review_text": "Too much workload that equivalent to, or even more than the rest three courses I take this semester. Besides the endless projects, you need to review others' homework which also takes up much time. The grading sheet is really harsh, you never know what parts will be deducted points according to the grading sheet. The homework instructions are ill-organized sometimes, you were not clearly told what were expected to do in order not to lose points. \r\n", 
      "workload_text": "Six projects, the first two are easier(compare with the latter ones), but the rest are hard. The last one conflicts with other finals, other projects and has earlier deadline. No grace days.\r\n\r\nMidtem+final. Some parts are at the corner of the textbook. By the way, the textbook is pretty useless for the 6 projects.\r\n\r\nAnyway, if you enjoy challenges and have plenty of time and mentally strong, this course is designed for you."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Thu, 20 Dec 2012 06:33:09 GMT", 
      "id": 27771, 
      "professor_ids": [
        45
      ], 
      "review_text": "Your experience in this class will depend almost entirely on your team. If you come in with people you know and trust to be competent, you will be at a monumental advantage. If you sort into a random group, well... godspeed to you, brave soldier!\r\n\r\nThe professor's lectures were of extremely high quality, though the recordings are not. TAs were top-notch. The two books were, respectively, completely useless and extremely useful. You will be given problems from the extremely useless book, but should instead spend your time reading the book on kernel development for the homeworks.\r\n\r\n(45%) 6 homework assignments, lowest is dropped\r\n(15%) Grading on your reviews of peers' work\r\n(15%) Midterm\r\n(25%) Final\r\n(00%) Extra Credit\r\n\r\nNote: there were programming problems on the two exams.\r\n\r\n", 
      "workload_text": "Individual contribution will vary between 15% and 70% of each homework assignment, subject to group dynamics.\r\n\r\nAverages tend to be quite low on homeworks and exams. If you score between 50 to 60% on the assignments and exams, you're probably in the middle on the pack."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Wed, 23 Jan 2013 05:28:24 GMT", 
      "id": 28023, 
      "professor_ids": [
        45
      ], 
      "review_text": "Well, this is one course of Columbia of which I am proud of.\r\nThere is nothing compared to this course that Columbia can offer and I guess Prof Nieh is THE best person to teach operating system course.\r\n\r\nProf Nieh is great teacher and goes in great details whenever required. His classes are great, even if you miss in person, you can view them on CVN later. It was really helpful.\r\nIf you are lazy to work because you have a job already and just want to pass this course, then you might not like working so much, but otherwise if you have genuine desire to learn operating systems, you will be grateful to Prof Nieh.\r\n\r\nAssignments are challenging and you will spend time reading linux kernel code. Best resource to get help is good TAs. For our course TAs were really good and helpful. I spent almost few hours with them before doing any assignment and it helped.\r\n\r\nCool thing about this course is that if you do assignments on your own and are able to finish it, you will become good enough to answer any question on kernel that you are expected to know and even more.\r\n\r\nMake good teams for your assignment. If you have problems with team mates better change team, hire or fire someone else you will end up struggling alone and that doesnt help.\r\n\r\nJust remain above average in exams, assignments and your grades will be great. If you outdo  average in all cases you will get a very good grade.", 
      "workload_text": "Heavy but worthwhile if you really want to understand your operating system well."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Sun, 27 Jan 2013 03:26:53 GMT", 
      "id": 28059, 
      "professor_ids": [
        45
      ], 
      "review_text": "A benchmark class, indeed. I am happy that I took it and improved my \"C\" programming skills, especially in the OS domain. Prof. Jason Nieh teaches the course very well.\r\n\r\nApart from the skills and experience in the areas - Operating Systems, Linux kernel programming, this course demands a lot of your \"C\" skills.\r\n\r\nIf you are a HardCore \"C\" fan and would love to experiment at system level in \"C\", then read on!\r\n\r\nThis one class is for those who crave for \"C\" programming a lot! You will get your hands dirty while building crucial features of Linux kernel on an Android device in \"C\" involving Synchronization, Scheduling, Paging, File Systems, etc(as per the projects in Fall 2012).\r\n\r\nYou will fine tune your \"C\" skills yourselves mainly in the area of optimizing the usage of the kernel resources in terms of memory. You keep an eye on what each function ends up returning to determine its success or failure - this comes with practice if you aren't in the habit!\r\n\r\nThe grading rubric is the most comprehensive one I have ever seen in my life. For each of the assignments/homework, the rubric would cover every nook and corner cases that a novice \"C\" programmer for Linux kernel would definitely ignore.\r\n\r\nWell, in the beginning you would find each of your submission being bitten by checkpatch, for not abiding by Linux kernel coding style. But, with time, your \"C\" coding style becomes smooth and elegant if you start respecting what that seemingly strict master(checkpatch) says, trust me!\r\n\r\nAh, userspace programs for each of the assignments! Well, I enjoyed much by dwelling in \"C\" while building the user space test programs for testing the Linux kernel features implemented in each of the assignments. You would be asked to demo each of the Linux kernel features you would implement in each homework and during the demo, well, how dedicated you were in testing your code gets rewarded when the standard test code(which they would have in their repositories) completes without any problem and you hear TA saying, \"That's cool!\".\r\n\r\nTAs were very helpful in answering the questions we had. Sometimes, we had to bug them and get the information what we want - but, they were all nice and had good hold on the subject. Among them, I found through live and piazza discussions, TA - Alex to be damn good in the subject.\r\n\r\nI feel it's important to mention that the solutions they would publish are simply beautiful. The solutions implemented by Christoffer Dall were mesmerizing. No, am not exaggerating at all - his coding style is so pleasing to eye and his code looks very simple and precise!\r\n\r\nPeer reviews: Yes, you would get opportunities(or responsibilities?) to review and grade other people's code. Here, I was annoyed at certain times of seeing some seriously senseless code from other people. At other times, I had also the chance to look at some brilliant code. So, overall, there was a good exchange of knowledge and suggestions between our team and various teams.\r\n\r\nYeah, btw, try to form a good competent team - believe me, it's better to have arguments and come up with some kick-ass code which scores beyond the average code resulting from an average interaction or no interaction at all between you and your teammates. And this is from my experience!\r\n", 
      "workload_text": "Normal if you and your teammates are damn good in \"C\" and kernel programming, and heavy otherwise."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Thu, 09 Jan 2014 00:37:04 GMT", 
      "id": 29092, 
      "professor_ids": [
        4214
      ], 
      "review_text": "Hard but not as hard as everyone says. Not very enjoyable but I've had worse classes. If you are a strong programmer with experience in C you will probably do well. If you are a weak or inexperienced programmer you are going to have a bad time. The class could be greatly improved if they reduced the focus on android hacking and emphasized concepts more. The good, mediocre and bad:\r\n\r\n---The good:\r\n- Professor Yang is well-intentioned and prepares for lecture\r\n\r\n- All class notes and materials are easily available on the website\r\n\r\n- Expectations are clear\r\n\r\n- Problem set portions of HW are pretty straightforward\r\n\r\n- Very fast Piazza response\r\n\r\n- Midterm and final are reasonable and open book\r\n\r\n- Exposes students to research (via required paper reading referenced in both lectures and tests, and via frequent observations by Prof Yang during lecture about what are current research topics and how previous topics were explored over time)\r\n\r\n-QEMU/vx6 combo is clear and good to learn from (unfortunately only used in 1 of 6 HWs)\r\n\r\n\r\n---The mediocre:\r\n- Modern Operating Systems textbook is a bit out of date and loaded with thinly veiled opinions, although it's not bad\r\n\r\n- Lectures try to pack way too much material in. Luckily they aren't very relevant, since you can pretty much learn from the slides (and watch portions on CVN if needed) so you don't need to actually go in order to get decent grades on midterm and final. Much of the lecture material is irrelevant to HW and tests \r\n\r\n- Some of the TAs' attitudes to students are borderline insulting (although others are good and very devoted on Piazza)\r\n\r\n- A lot of students seemed very upset about the grading/curving on Piazza at the end although personally I thought it was fine. Prof is reviewing results in response to the outcry (as I mentioned above, it seems he does actually care about the class, even if some aspects of the class are problematic)\r\n\r\n- Group projects. Ugh\r\n\r\n\r\n---The bad:\r\n- Largely useless programming assignments that generally amount to copy pasting and then hacking up existing kernel code. You spend much more time wrestling with various dev tools, resetting your tablet for one kernel crash after another, dealing with complete lack of kernel debugging tools, etc than actually learning OS concepts. The class should really be called \"android hacking\" instead of \"operating systems\"\r\n\r\n- Way too many technologies/tools involved. QEMU emulator, vx6 code, linux kernel code, adb, x86, ARM, complex macros, makefiles, gdb, git, android bootloaders and VMWare just off the top of my head. So again you wind up getting bogged down in tool specific details and spending way too much time on that rather than fundamental OS concepts\r\n\r\n- Extremely slow grading\r\n\r\n- Little relationship between HW (both code and prob sets) and tests\r\n\r\n- \"Interactive\" code grading sessions with TAs. They are intended to encourage fair work-sharing among group members but do nothing of the sort. TAs are not comfortable dealing with the students in person and in fact just skipped doing these for latter HWs\r\n\r\n- Kernel development textbook is bad. Hardly any actual code examples to show how one might add features to the kernel. Mostly high level overviews that are only partially accurate and copy-pastes of comments and headers from existing kernel code (which you can look at on your own without the book)\r\n\r\n- HW4 (scheduling) was painful. Much much harder than other HWs. They let students drop one but they should just get rid of this HW since almost everyone winds up dropping this one anyway and it is by far the worse offender in terms of being useless kernel hacking. Spent the most time on this one, learned nothing I didn't already know and ended up dropping this grade anyway. ADVICE: If you take this course and ace the first three HWs don't even waste a single minute on this one", 
      "workload_text": "Heavy although I think the reputation is worse than the reality. 6 HWs (50%), lowest score dropped, with both problems and code in each HW. Problem set portions are medium-easy. Code difficulty varies from medium-easy to very hard. HW4 (scheduling) and HW6 (file systems) by far the hardest, especially HW4. Most code portions are frustrating regardless of difficulty. Open book midterm (20%) and final (30%) aren't too hard."
    }, 
    {
      "course_ids": [
        2384
      ], 
      "created": "Tue, 20 May 2014 15:57:20 GMT", 
      "id": 29513, 
      "professor_ids": [
        3509
      ], 
      "review_text": "So Jae taught this course in Spring 2014 because the normal OS professor was on leave. I'm not sure when he will teach the course again, but I wanted there to be a CULPA review so that people can go into this well-informed.\r\n\r\n--- The Course ---\r\nI learned a ton from this course, though I didn't necessarily realize it as I was slogging through. Jae reformatted the course and taught it with undergrads in mind, which was appropriate given that the class had many more undergrads than in past years (no doubt because of Jae's popularity). As such, much of the first half was actually an extension of AP (lab7/http-server) used to teach OS concepts such as concurrency, memory sharing, and inter-process communication (user space programs to teach kernel stuff). It again demonstrates Jae's theory of teaching, using previous knowledge in order to bridge the gap to new concepts. With regard to content, Jae put a great deal of time into UNIX programming compared with hardware knowledge / kernel hacking. Jae explains that the earlier stuff is more applicable and the latter stuff is changing (e.g. we didn't cover hard disks, probably because SSDs sort of shift that paradigm). I buy his explanation. The pacing of the course wasn't great, with probably too much time spent on UNIX programming on the front and too little systems/kernel work at the end. Of course, this is understandable given that this was Jae's first time teaching OS and that he completely restructured it.\r\n\r\n--- Homework ---\r\nA few individual assignments (that are pretty easy) with mostly group projects (up to groups of three). Having a good group is obviously helpful. All the projects run on Arch Linux, which you will set up on VirtualBox. The assignments usually didn't involve much coding, but rather a lot of understanding how the code runs and scouring the internet. In other words, frustrating yet also good practice for the real world. The assignments have good underlying structure, but still need refining (again, should get better over time). Sidenote: the listserv from AP carries over as well, and will save you hours of struggle if you follow closely.\r\n\r\n--- Exams ---\r\nI got destroyed on the midterm, but in hindsight it was one of the best crafted CS exams I have ever seen. It definitely tested your ability to read code and apply the concepts we learned. The final was very different and a bad evaluation of our mastery in my opinion: 25 multiple choice questions about very specific things we covered (i.e. very un-Jae-like). Both exams unfortunately do not provide room for partial credit.\r\n\r\n--- Lectures ---\r\nNot incredibly interesting, but still important to really ingrain the material in your head. Jae mostly worked off of powerpoints, which I found ineffective. The few times he used the board were better. For me, printing the notes/slides beforehand and taking notes directly on them worked best.\r\n\r\n--- Grading ---\r\nJae curved to a high B+, which I consider pretty generous. Just be very VERY careful to follow homework instructions exactly as stated. Lots of times grading occurs on scripts, so the slightest problem could send your grade down just for not properly following basic instructions.\r\n\r\n--- TAs --- \r\nJae carried over the best AP TAs and I assume he would do so in the future as well. There was also a contingent of Chinese grad student TAs who were friendly, but generally less helpful.\r\n\r\nI doubt I've covered everything, but hopefully someone after me can fill in any missing gaps. On the whole, I would say to take the class with Jae if you are an undergrad (and if he ever teaches it again).", 
      "workload_text": "\"7\" assignments (meaning trivial HW0 and HW1, followed by HW2, HW3(a-c), HW4(a-b), HW5(a-b), HW6(a-b)), 40%, not all are graded\r\nMidterm, 25%\r\nFinal, 35%"
    },
    {
      "course_ids": [
        4902
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 61, 
      "professor_ids": [
        51
      ], 
      "review_text": "Yemini has been at Columbia for a while and it shows -- boring lectures. Most people are used to his accent by the sixth week of classes, or so. It looks like he's ready to burst into full mid-life crisis any day now, so buyer beware. About the texts: they're about $300 total, but only the Stevens Unix text is essential, the others are mostly helpful for exams. Programming assignments are challenging but do-able. Programming teams are formed at random, so start scheming, or bring your rabbit's feet.", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 720, 
      "professor_ids": [
        51
      ], 
      "review_text": "one of the most important and well tought courses in the computer science department. yemini blends a tremendous body of knowledge and experience with a visiion that is always looking at whats ahead. he's going to make you work. however, unlike the typical theoretical only courses within the c.s. department, what you learn is going to be re-usable for a good time to come. in various positions, i've had to troubleshoot tcp/ip issues and create entire fault tolerant network protocols. this course was the basis of a career", 
      "workload_text": "first project is heavy duty. project complexity wanes over time."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Fri, 02 May 2003 00:00:00 GMT", 
      "id": 5405, 
      "professor_ids": [
        51
      ], 
      "review_text": "He can be a little dry, but this guy is one of the nicest professors I have come across. If you go to his office hours, he's really interested in helping you, and listens to your feedback. The workload is manageable. ", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Thu, 20 May 2004 00:00:00 GMT", 
      "id": 8913, 
      "professor_ids": [
        51
      ], 
      "review_text": "I liked Professor Yemini a lot, and I feel like I learned a lot in his class. He clearly has a great depth of knowledge in the field, his digressions are good, and he's very personable and approachable.\n\nSome things to be prepared for, though:\n\n* His lecturing style is very dry, delivered in a low rumble. I was really interested in the material and was able to look past this to some extent, but it was sometimes hard to keep my mind from wandering. It also meant that much of the class wasn't all that strongly engaged, which de-energized the room.\n\n* The lectures were fairly applicable to the exams, but weren't all that helpful for the homework assignments. This, in combination with their dryness, plus the online availibility of lecture notes, is probably what caused most of the class to stop going to lecture starting about 1/3 of the way through the semester. This de-energized the classroom further.\n\n* Professor Yemini tries to make the initial assignments harder and the assignments later in the semester easier; his feeling is most C.S. classes operate in the opposite manner, and it's nice to counterbalance that. This isn't a bad philosophy.\n\n* There's a definite effort to make the homework assignments and the exam questions non-cliched and interesting. The results of this are a bit hit-and-miss, though. In the first programming assignment, for example, it was very difficult to divine what the project was supposed to do based on the specification. Others in the class spent hours upon hours spinning their wheels until they understood; I settled for a lower grade on that assignment. The second programming assignment, an RMI MUD server (with a reasonably constrained world-state to keep track of), in contrast, was a lot more fun.", 
      "workload_text": "2 programming assignments, 3-4 non-programming assignments, an open-book, open-notes midterm, and a similarly open final. The midterm in particular it's best to study for as if the exam isn't open-book, though, as you won't have much time to look things up."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Sun, 11 Jun 2006 00:00:00 GMT", 
      "id": 15122, 
      "professor_ids": [
        2427
      ], 
      "review_text": "My biggest disappointment with this class was how dry and uninteresting he made networking.  This modern, dynamic, complex topic that is fascinating to me in all other contexts was presented so that his students will assume they are bad at it, and will shy away from it for the rest of their career.  \nThe best analogy I can think of is, it was like we were starving and all decided to try sushi for the first time.  When we arrived, instead of bringing us delicious sushi, we were brought a dead fish that we had to dissect using our hands, all the while being criticized by the sushi chef for our poor technique.  We all left slightly sick to our stomachs and unlikely to try out sushi again anytime soon.\n\nYou won't get any big pictures here.  You won't learn about any actual protocols in use today.  You won't hear any of the vocabulary everyone else in the industry uses to describe network phenomena.  But on the upside, you will use all of that probability and discrete math that you thought had no real-world application.  \nHe says that he doesn't concentrate on details (usually after he's just been called out for getting them incorrect), but every concept we discuss is presented as a mathematical proof.  This means that you will leave his class not knowing how to use the word \"bandwidth\", but you will be able to draw the min-max fluid model of traffic flow.  \nBottom line: unless you're an EE major, don't take this class.  If you absolutely have to, at the very least, don't assume that this is all there is to networking.  Promise me you'll give it another try some other time.\n\n", 
      "workload_text": "He loves curves!  The average for homeworks and tests were 15-45%.  The final grade is also influenced by how hard he thinks you worked.\n\nAbout four programming assignments and four written assignments.  The hardest part about the programming assignments is figuring out what he wants you to do -- note that what you think is unlikely to match up with what the T.A.s think.  The written assignments are taken directly from his EE courses.  \nMidterm had an average of 40%.  I don't know about the final.  Both were impossibly hard.\n"
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Fri, 07 Sep 2007 00:00:00 GMT", 
      "id": 20317, 
      "professor_ids": [
        2427
      ], 
      "review_text": "First of all, Rubenstein is a little insecure. At least that's the first impression he gave to me, and I write this knowing full well that he's going to read this review. In the introductory lecture, he spent a full five minutes explaining why the reviews of him that were posted on CULPA are unfair. \nWhile I've heard professors respond to CULPA reviews before, I've never seen anyone get so defensive about one. \nIt leaves you with the impression that he feels like he's got something to prove, which is unfortunate since he's not a bad teacher.\n\nUnfortunately, for all the time he spent preparing his defense of his CULPA reviews, he never really seemed to spend enough time preparing to teach the course. The fact that he doesn't like any of the books out there isn't by itself a problem, but he needs to understand that there are people who like to be able to use books as a reference, to supplement lectures. The fact that he didn't decide whether to teach the course top down or bottom up until the second lecture meant that he couldn't recommend a book that covers the material in the same order that he would. This meant that those of us who tried to use the book he suggested to help with the early material were stuck with references to things that wouldn't be covered until the end of the course. How difficult would it have been for him to take the time to make that decision just a few days earlier so that he could suggest a book that could complement his lectures?\n\nLikewise, despite requests from several students, he never produced any kind of schedule for the course. No one had any way of knowing what would be covered, when it would be covered, or when the assignments would be due. This was especially problematic around midterms, when people are trying to budget their time, and Rubenstein decided to give out the information pertinent to assignments at the very last minute.\n\nI don't have a problem with teaching networks from a theoretical perspective, but I wish he spent more time talking about networks early on and less time trying to justify his decision to teach the way he does. Furthermore, everyone in the class has already taken a stats course of some sort, since it's a prerequisite for the course. It really wasn't necessary to spend 3 lectures early on explaining about expected value, especially since there was no schedule that people who already understood stats could refer to so that they could skip the redundant sessions.\n\nThe assignments were the kicker. He's certainly not the first CS professor I've had who's extremely rigid about assignment deadlines, but usually the ones who are that rigid are obsessive compulsive about posting the assignments well in advance and making sure that the project specification is detailed enough to avoid problems. Instead, Rubenstein would give out assignments usually a day or three after he promised, only to have to go through several rounds of revisions to account for mutually contradictory requirements within the project. It's not that the assignments are bad, just that he doesn't seem to take enough prep time to really set them up properly ahead of time.\n\nAs for his exams, he takes great pride in making them hard, which is certainly his right. The trick is to understand that he'd always rather ask a question designed to trick people than directly test their understanding of the underlying concepts. While it's useful to understand the concepts, you need to go into his exams trying to find the places where he's trying to trip you up. Unfortunately, this means that performance on the tests is at least as much about your ability to outsmart Rubenstein as it is about whether or not you're learning about computer networks.\n\nAll told, don't go out of your way to take any classes with him. He's not bad at standing in front of a room and explaining things, but he seems thoroughly uninterested in spending sufficient time preparing to teach. As for the theoretical angle he likes to take, it's not as bad as the other review would indicate, I just wish he hadn't wasted everyone's time with remedial stats in order to do it.", 
      "workload_text": "Regular problem sets. Not so regular programming assignments. Don't get going too early on the assignments, since he'll change them. Midterm and final, designed to trick you."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Mon, 07 Jan 2008 00:00:00 GMT", 
      "id": 20746, 
      "professor_ids": [
        2089
      ], 
      "review_text": "Like swimming through Jello. Bad lectures, good programming assignments, bad written homeworks, unbelievable exams.\n\nIt's not that the exams were hard. They were open book. But even if you knew ALL the material, you couldn't really do well on the exams. Or the written homeworks. I don't think anyone knew the right answers, because the questions were vague and were graded vaguely to boot.", 
      "workload_text": "Fair: Three reasonable-difficulty programming assignments, five short written assignments, open book exams."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Thu, 22 May 2008 00:00:00 GMT", 
      "id": 21286, 
      "professor_ids": [
        3453
      ], 
      "review_text": "Network Lab sucks, but it doesn't totally suck. Baset's lectures are beyond worthless (he's barely audible and doesn't cover relevant material), and the labs are EXTREMELY frustrating and repetitive. But you do learn some actual skills... I'm legitimately smarter for having taken this class.\n\nBut it ate up my time and gave me an ulcer from doing endless, monotonous network tasks. It's sort of like being a real-life network person. Ow, my stomach.\n\nYou can do a final project instead of taking a final exam, which isn't a bad idea, although the projects are really poorly stated and vague, and we found his expectations had changed a lot from the terse description he'd given us. Still, it was tolerable.", 
      "workload_text": "Ten labs, with quick prelabs and LONG group reports (a lot of ours were 60+ pages; although a lot was debug output, it was still a ton of writing; even trading them off, they ate up lots of time. A few brief homework assignments thrown in now and then."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Sun, 19 Apr 2009 04:58:01 GMT", 
      "id": 22573, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Professor Rubenstein tries to do a good job, but in the end his attempt at teaching networking is not very good.  There are a few ways he can improve this class.\r\n\r\nFirst of all, he teaches the class from a very theoretical point of view.  Considering this course is described as an \u201cIntroduction to computer networks,\u201d he needs to focus less on the theory.  The theory he teaches is excessive to the point that it\u2019s hard for me to follow how the theory relates to networking in real life.  I don\u2019t have a problem with theory, but first I\u2019d like to learn something practical so that I know how to apply the theory.\r\n\r\nProf. Rubenstein clearly states that he does not follow the book.  I understand that many professors do not follow the book because they need to present material that relates more closely to the course.  Unfortunately, in this situation, it\u2019s a big mistake.  Based on the course description, the material in the book is better than what Prof. Rubenstein teaches.\r\n\r\nCompared to other classes, Prof. Rubenstein also puts a lot of weight on the mid-term and final.  Based on the amount of effort I\u2019ve had to put in to the homework and programming assignments, I think the assignments should be a larger factor in the overall grade.  He barely teaches anything in class on how to do the programming assignments.  This leaves students with a lot of work although it only counts for a small portion of the grade.\r\n\r\nI would\u2019ve liked to learn about networking in this class, but unfortunately it looks like all I\u2019ve learned is strange theory that I have no idea how to apply to real life.  I think Prof. Rubenstein could do a decent job teaching the course if he would just read the course description one more time and realize that he doesn\u2019t need to teach anything other than what\u2019s presented in the textbook.  Save the theory for a different class, don\u2019t give it to us in the introduction to networks class.\r\n", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Sun, 10 Jan 2010 17:44:55 GMT", 
      "id": 23832, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Prof. Rubenstein is really nice person. He tries to make everything clear to you and put lot of emphasis on concepts. He prefers to write everything on board rather than using slides. His way of teaching may or may not be preferred by students. Its depend on students. Like many students including me were comfortable with board. Prof. Dan tries hard to make you fundamental clear and theoretically sound. If you attend his lecture regularly, understanding concepts of CN will not be problem for you.\r\n\r\nThe only thing that was that not much time was spent on practical and programming. You yourself has to learn socket programming. If you are doing it first time then it may take some time.\r\n\r\nOverall a very good class. You will really learn a lot especially if you are new or little knowledge about Networks.", 
      "workload_text": "Workload is average. 4 Programming assignment and 4 written + one midterm and one final. Midterm and finals together make 70% of grade. So do them properly!"
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Mon, 05 Apr 2010 04:01:01 GMT", 
      "id": 24125, 
      "professor_ids": [
        4210
      ], 
      "review_text": "Prof Zussman is a very smart professor with a lot of background in Networking. His lectures are very well planned (granted the slides are from the publisher). The lectures are good if you are at all interesting in networking and general informative.\r\nThe lectures are planned so well that any student asking a more advanced question or trying to correct the professor is faced with a sharp reply from the professor.\r\nThe book does a good job of giving a implementation and high level view of networking, but that is not enough for this course. Gil likes to bring his research of statistics into the classroom and sometimes supplements the book for his slides he created while at MIT. They are full of statistics and other advanced topics which are asked on most of the homeworks.\r\nThe statistics which are briefly discussed in class are a large portion of the homework and exams.\r\nThe programming assignments were time consuming, but pretty simple if you have used threads and sockets before. You can use C or JAVA.", 
      "workload_text": "Assignments: 6-7 written homework assignments\r\n2 mid-sized programming assignments\r\nMid Term : 75 min. during class hours, calculator and one sided letter paper with notes allowed.\r\nFinal: Dec. 21, 9AM, 180 minutes, calculator and one sided letter paper with notes allowed, comprehensive.\r\nMethod of Evaluation\r\nAssignments 30%\r\nMidterm 25%\r\nFinal 45%"
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Wed, 12 May 2010 20:17:56 GMT", 
      "id": 24368, 
      "professor_ids": [
        2427
      ], 
      "review_text": "Rubenstein definitely takes these reviews seriously, and has improved dramatically. Don't worry about his old, negative culpa reviews, because the he is nothing like that. He is one of the best professors I have had at Columbia in CS. After having taken both Fundamentals and Networks with him, I highly recommend him.\r\n\r\nHis lectures are spread between writing on the board and going over lecture slides that the textbook made. Both are pretty good, but when he writes on the board, he can go really fast. If you don't want to fall behind in class when he's writing on the board, don't copy everything down (though I did, and I often got lost). Listen though and ask questions. The textbook might serve as a good resource. I referred to it several times, but you could probably get away with just using Wikipedia. There's no assigned reading but he does cover nearly everything in the textbook (and more).\r\n\r\nHomeworks are reasonable. The first two programs are the hardest, but after that they just get easier (and even easier still). Do yourself a favor and do them in Java, trying to do the noble thing and programming in C just won't cut it. The first program will take 40+ hours in C, or 10 hours in Java. Your choice. You have plenty of time for the programs. The separate theory homeworks are assigned with only 1 week to do them (sometimes concurrently with the programs), so if you don't start early they can be tough.\r\n\r\nHis tests and theory problems work the same way. You learn the basic concepts in the class. Then you're asked questions that rearrange problems to something you've never seen before and are something that was covered in class. The only way you can do well is if you have a strong understanding of the material (obviously).\r\n\r\nHe is a fair/generous grader and a nice guy if you go to his office hours. Listen, ask questions in class, start the programs relatively early (and do them in Java!), know the concepts and you'll do fine. Usually the class has a low average too.\r\n\r\nDo take this course even if it's not required for your track. Unlike some CS classes, the material is actually interesting and relevant to so many things. No abstract theoretical stuff that you can't relate to anything. All in all, an excellent course and excellent professor.", 
      "workload_text": "4 programs (they get easier as the semester progresses)\r\n4 theory assignments (some easier than others)\r\n1 midterm (too long)\r\n1 final (reasonable, though tricky)"
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Fri, 22 Apr 2011 02:35:16 GMT", 
      "id": 25759, 
      "professor_ids": [
        51
      ], 
      "review_text": "Nice guy, ABSOLUTELY THE WORST PROFESSOR I'VE HAD AT COLUMBIA.\r\n\r\nLectures are extremely dry. He talks in a slow mumble that is impossible to hear. Youmust constantly ask him to speak up where he usually replies \"I'll try but I have a soft voice.\"\r\n\r\nExams are ok if you can manage to get something out of his lectures.\r\n\r\nOk here's the biggie, HOMEWORK ASSIGNMENTS ARE CRYPTIC\r\n\r\nWritten homework assignments usually contain material that he sneaks in his lectures in the last 5 minutes. His assignments are unclear and leave you dumbfounded as to what you are supposed to produce, usually a very lengthy Q/A on his website follows with frustrated students probing explanations as to what the assignment actually means.\r\n\r\nProgramming assignments are impossible unless you are not taking any other classes and have done extensive network programming before. Yechiam Yemini does not go so far as to talk about programming in class. EVER. Unless you've already done it you don't have a shot at the programming assignments, which are just as cryptic as the written assignments. Also be ready to drop some cash on a CLIC account if you don't have one, all assignments are submitted via virtual machines on CLIC. Deadlines are also very short, usually about 10 days for extremely high involvement work\r\n\r\nI really wanted to like this class, the topic is important and the class deserves a better professor. Wait for Dan Rubenstein or someone else to teach it before you take it. \r\n\r\nWriting this review is making me physically upset.\r\n\r\nOther than that, he seems like a really nice guy and I don't think he means to cause heartache. The poor sucker just can't teach (or talk loudly for that matter) and makes everything harder than it needs to be.", 
      "workload_text": "3-4 written assignments, 2-3 programming assignment, midterm and final. The exams are fine but the homework makes this class absolutely frustrating\r\n\r\nOh yea I need to clarify. He does not write is own exams (thankfully). The midterm he gave was a Rubenstein test. Yemini admitted to it and Rubenstein's name was on the test."
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Mon, 01 Jul 2013 01:55:57 GMT", 
      "id": 28530, 
      "professor_ids": [
        11579
      ], 
      "review_text": "The Good: AC has a great classroom presence. He is enthusiastic and will immediately give an apple(the fruit) to someone who gives an answer, asks a question or makes any remark at all. This tends to create more dialogue and fosters a good learning environment. He is very knowledgeable. In the rare case that he can\u2019t answer your question in class, he will post a thorough answer on Piazza shortly thereafter. The book is clear and the slides that he uses from the authors can in some cases be used as a substitute for the book. On theory assignments, most of the questions are easy to moderate. There are questions that require \u2018advanced\u2019 probability, but these are worth a small fraction of the total homework grade. \r\n\r\nThe Bad: The programming assignments were poorly written. The second in particular was poorly designed. Once one was able to translate the second assignment into English, it was incredibly difficult to program. The second assignment\u2019s sections had a lot of functional overlap, but this overlap was difficult to capitalize on due to unnecessarily unstandardized features throughout the assignment. It\u2019s unclear if AC wrote the assignments or if the TAs did. Either way, most of the TAs were not nearly helpful enough in explaining the assignments. \r\n\r\nThe Ugly: For the spring semester that I had him, AT THE END OF MARCH, he changed the grading scheme as follows \r\n10% ->15% for Prog Assignment 1 \r\n10% ->15% for Prog Assignment 2\r\n25% ->15% for Midterm\r\nAC did not announce this change. Aside from a student posting this change on Piazza after it was made on the class webpage, the class might not have realized this until weeks later. \r\nI have never in my time at Columbia had a teacher so secretly and drastically make a grading scheme change so late into the semester.", 
      "workload_text": "5 HW\u2019s 4% each\r\n2 Programming Assignments x% where x depends on time(see above)\r\n1 Midterm y% where y depends on time(see above)\r\n1 Final 35%\r\n\r\n('AC' was used here for brevity. It is not customary to call him this.)"
    }, 
    {
      "course_ids": [
        4902
      ], 
      "created": "Sat, 04 Jan 2014 07:41:55 GMT", 
      "id": 29032, 
      "professor_ids": [
        2089
      ], 
      "review_text": "The lectures were not very interesting, and I think those 60 students who seldom showed up in class would agree with me on this. But Professor Misra was really a nice guy and he was very patient to answer every question in class. The workload was okay, though the programming assignments could be time consuming, but Professor Misra was always considerate enough to give extensions due to popular request. Plus, you have 3 late days, which really came in handy when you were overwhelmed by the crazy workload of some other course. ", 
      "workload_text": "3 programming assignments(20%). Can be very time consuming, if you have no prior experience in socket programming and multi-thread programming. But you did learn a lot from those assignments.\r\n\r\n4 written homewok(20%). Relatively easy. And there will be an extra makeup written homework for students who might fail the course.\r\n \r\n1 midterm(25%). Hard, way harder than the sample midterm. \r\n1 final(35%) Not as hard as the midterm, about the same difficulty as the sample final.\r\n\r\nThe midterm and final were open book, you could also bring your laptops/tablets. The exam problems were like those homework problems in the textbook, which required you to apply what you had learned to solve real world problems."
    },
    {
      "course_ids": [
        1616
      ], 
      "created": "Wed, 22 Jan 2003 00:00:00 GMT", 
      "id": 4560, 
      "professor_ids": [
        1474
      ], 
      "review_text": "Professor Kaiser is interested in her material and works hard at getting it across to her students.  The only thing is that she isn't the best at instructing students how to code within the complex component frameworks introduced in this course.  However, teams of students have freedom to choose a project of their liking, which is definitely preferred over a forced project such as Robot Wars or some ridiculous role playing game with clients, servers, and bots.  With the freedom to choose a project comes the desire to code the project.  Gail follows up with the teams throughout the semester, giving feedback and ensuring that the students pick up on the material, and I've been more enthusiastic about this class than I had been with others within the CompSci department.  Don't be afraid of her first class when she tries to scare you off; you'll learn a lot, you'll learn how to document the software-development process, and if you work at your project, you'll walk out of the class knowing a great deal.", 
      "workload_text": "Team project with three iterations, as well as a take home midterm and take home final, both about the project's development and concepts discussed in class (and mentioned in the book)"
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Thu, 23 Dec 2010 19:24:19 GMT", 
      "id": 25162, 
      "professor_ids": [
        1474
      ], 
      "review_text": "I would not recommend this course unless a) you really want to be a software engineer and have no prior experience or b) absolutely need it to graduate.  It's mostly busywork and stuff that you can learn in a decent summer internship at a software company (if you want to go into software).\r\n\r\nThat being said, Gail is a wonderful person, and is very kind and understanding.  However, her lectures tend to be very dry and not very helpful, and the course materials aren't any better.  The course skims over component model frameworks, software testing and various software quality assurance techniques, but doesn't really go deep enough to make things useful.  Most of these topics are covered briefly in lecture, and then exercised in a group project where they become a passing thought when completing your documentation.  By the end, you'll learn that you should do 'xx' and 'yy' if you're working in the software industry on a big project, but will be unsure as to what exactly qualifies as 'xx' or 'yy'. \r\n", 
      "workload_text": "Take home midterm and final, three easy homeworks in the beginning of the semester, and one semester long group project.  The group project is very hit or miss depending on your group (I chose poorly).  Oh and five to six pop quizzes that really just check if you're sitting in lecture and still awake (it's hard sometimes...)."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Tue, 11 Dec 2012 14:15:39 GMT", 
      "id": 27710, 
      "professor_ids": [
        10725
      ], 
      "review_text": "Oh dear. I don't even know where to begin.\r\n\r\nConsider this review as a warning to all of you misguided souls who are thinking of taking this class under Swapneel. Consider this review a strong and heavy deterrent such that you may maintain and keep your sanity and save yourself the struggle of taking a class with arguably the worst teacher I've ever encountered in my entire life.\r\n\r\nSure, Swapneel is a nice guy and he's approachable. I'm sure he's great in the other classes he teaches; I don't doubt the accuracy of his other reviews for a second. However, ABSOLUTELY NONE OF THAT APPLIES TO ASE. Swapneel's ideas for this class go from mind-fuck stupid to borderline insane.\r\n\r\nAhem. There are five distinct reasons you don't want to take this class, four of which are a direct result of Swapneel's horrible decisions:\r\n\r\n1. This is a class about software engineering, and you will be doing a lot of busy work. You'll be doing a lot of reading. Now you MIGHT think that would make for an easy A but you would be grossly mistaken for reasons I'll get into in just a second. The material in the class is EXTREMELY boring unless you're actually into this shit. You could seriously learn everything in the class by either reading Wikipedia or holding down a programming job for a little while. The material is definitely not something to spend your tuition on because you are almost certainly going to learn it elsewhere.\r\n\r\n2. The Midterm. The midterm wasn't exactly difficult (even though the average was in the 60's) but there was a certain stipulation to the grading that didn't make any sense. Each multiple choice question was worth 3 points; missing a question not only cost you the chance at getting those 3 points but you would lose an additional point as well. What's the point? I don't know why Swapneel thought this would be a good idea; it's nonsense like this and the teacher's inability to know unequivocal rock-fuck stupid when the rest of the class sees it that will prove to be his defining hallmark in ASE.\r\n\r\n3. The \"Implementation\" assignment. You spend a good chunk of the class developing a piece of software using the class concepts to guide you along. There is a proprietary repository set up for the class where you can use Git to handle your code and there is also a website called Jira which allows teams to create and document project tasks. The skillful use of both of these tools as well as planning and executing software engineering strategies is crucial to your success and one would think that mastery of these tools and concepts would be critical in the grading of your project. WRONG. The majority of your project grade comes from a subjective analysis by the TAs. In order words, you could program a solid piece of software and demonstrate exemplary skill of all class concepts in getting your work done; however, if the TA's for whatever reason don't like your project, don't think it's cool enough, or you are a bad speaker and don't demonstrate it in a way that would blow their mind then it's going to hurt you. I can understand subjective analysis being a bit player when it comes to grading, but why the fuck do you make it more important than the objective analysis which is far more relevant to the intentions of the class?\r\n\r\n4. The third assignment. The assignment was out of 40 points with additional 20 points of extra credit. The average on the assignment itself was a 17; the average on the extra credit was a 4. Yes, that's a four. Given the horrible midterm average and the average of this assignment, I don't think it's a stretch to say that the class is at fault; that's the mark of a shitty teacher. Furthermore, the TA's took points off for things that weren't even mentioned in the assignment document. For example, part of the assignment required White Box testing on a hypothetical feature of a certain project. The assignment stated that all we had to include was our \"general procedure\" for doing white box testing. The TA who graded me took off points for only writing a \"general procedure\". What gives?\r\n\r\n5. The testing assignment. This one BY FAR is the worst offender and permanently turned me against Swapneel. This is by far the stupidest assignment I've ever done in my life, particularly because of one caveat of the grading. You see, the assignment itself was 200 points with 50 extra credit; 70 points of the 200 dealt with testing other teams' applications. Each team tested two other teams; you could get a maximum of 35 points per team. Before actually performing the testing, each team had to document as many bugs as they could in the aforementioned Jira website used in the class. Documenting a bug meant that it could not be used against you when other teams tested you; however, if a team found a bug that WASN'T documented it not only cost the tested team 2 points but the testing team would gain 2 points. In order to get the full 35 points for the assignment your team had to find 15 undocumented bugs and 10 documented bugs; 1 point per documented and 2 for each undocumented. Your team could not get more than 15 points for documented bugs and 20 for undocumented; even if your team found 40 documented bugs you could only get a maximum of 15 points by virtue of all bugs being documented. Furthermore, each team was only given 30 minutes to test each application. TO RECAP: In order to get a full score on testing a particular team, you had 30 minutes to find at least 25 bugs. Of those 25 bugs, EXACTLY 15 had to be undocumented and 10 had to be undocumented. Is it is easy to see how this is borderline impossible? Congratulations, you have more foresight than Swapneel Sheth. Furthermore, a team could get stuck with an application that had relatively little bugs thus harming their grade due to factors that are impossible to control; when the class was berating him for this possible outcome his only reply was a sheepish \"Yes, it could be unfair, but that's why you get two teams to test.\". The teacher deliberately knew the assignment could be unfair but went ahead with it anyway: if that isn't a mark of poor judgement then I don't know what is. OH....and if you happened to program a perfect application with ZERO bugs then the two teams testing you would get full credit (as long as the TAs couldn't find any either). The team creating the perfect application would get jack shit for having made such a fine specimen of software. I'm not even mentioning the infighting that occurred during the testing phase; the stipulations of the assignment encouraged teams to screw each other over by \"finding\" undocumented bugs and I saw several arguments in the testing room between whether or not so-and-so was a bug. Why the fuck would the teacher think this was a good idea? Does this sound like something you want to be spending your time and tuition on?\r\n\r\nThink about it. Save yourself. Go to SSOL and click that \"unregister\" button. You'll be glad you did.", 
      "workload_text": "I don't think the workload was any better or worse than a typical CS class; just lots of writing which can be highly mind-numbing. "
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Mon, 31 Dec 2012 02:14:19 GMT", 
      "id": 27874, 
      "professor_ids": [
        10725
      ], 
      "review_text": "Feels like learning nothing but how to argue with TAs. Definitely not worth the tuition, and don't waste your money and time on it.\r\n\r\nThe grading is the most ridiculous part - no guildelines on how the answers are graded, and for some assignments even asking questions regarding the assignment description is forbidden. If you argue with TA, you'll probably be rewarded a lower score. Someone accidentally witnessed how the TA graded the assignments - it was in a pretty irresponsible manner. No surprise if you find the TA didn't actually read your assignment, and gave you a random number instead.\r\n\r\nSwapneel is a good guy and might be a good researcher to work with, but so sad that he just didn't take the teaching job seriously.", 
      "workload_text": "A group project (continues throughout the whole semester) and a few individual assignments. Most of them are reading and writing assignments."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Thu, 03 Jan 2013 18:37:50 GMT", 
      "id": 27902, 
      "professor_ids": [
        10725
      ], 
      "review_text": "Worst person to take a course under. He wont teach you anything meaningful just like his boss Gail Kaiser. He tried to show off people how cool he is and come up with really stupid schemes for grading. Even assignments were as shitty as possible. Assignments were so many. He will just show off his shit masters project that only 3 persons like \"He himself\", \"Gail Kaiser\" and \"Jonathan Bell\".\r\nHe will speak things in generic terms in class and that was just common sense, no need to waste tuition for that. We tried to get this course waived, but he is an asshole and so is Columbia SEAS core course deciding committee.  Every year people complain but nothing happens.\r\nGrades were also bad and I guess that's Gail Kaiser and her department descendents policy, never give anyone better grades. Swapneel fits into that category. Even if you are in top 15 students in class, you might not get an A.\r\nStupid policies for grading and stupid grading rubrics that have no sense in them.\r\nHe will try to justify that this is how it happens in real world, but it doesnt happen that way my friend. you are just an asshole and equally dumb.\r\nYou could have come up with better grading rubrics, made grading more quantifiable and given better grades after doing all this shit whole semester.\r\nJust to add, Jonathan Bell will come as free TA for all his/Gail Kaiser's courses and he is another dumb fuck wrangler. If your style of writing displeases him, he will make sure you get B-, C or B max.", 
      "workload_text": "you would end up doing a lot than this course deserves. There is nothing interesting in either assignments or project to learn. Documenting stuff etc, will give you better grades and not actually learning something. Grading would be dictated by Gail Kaiser's policy i.e dont teach anything and screw grades, after all columbia will continue to pay her till she retires. Dumb fuck department and so are people connected to it."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Sun, 06 Jan 2013 16:28:01 GMT", 
      "id": 27938, 
      "professor_ids": [
        10725
      ], 
      "review_text": "This is hands down the most worthless course I have ever taken. After the entire course I didn't feel like I learnt a thing. I have two major complains:\r\n\r\n1. The class was ruthlessly boring and pointless. I had worked in the industry for five years earlier and I knew what this class was basically supposed to teach me, but it didn't. You are better off using Wikipedia or Google to learn this shit. And Swapneel was so pigheaded that he devised his own stupid waiver mechanism that almost everyone applied to because they didn't want to take this class and almost everyone was rejected because this smart-ass didn't want to bore just a handful of people and waste their tuition.\r\n\r\n2. The TAs were grossly incompetent. One of them was a guy fresh out of undergrad college who didn't know shit about what he was doing but just ended up getting the TA position because he was from the same undergrad university as Swapneel and was helping him with his research. I know through common friends that he cut a lot of slack for his friends that took the same course and this was just unfair but couldn't be pointed out in public since it couldn't be proven.\r\n", 
      "workload_text": "Not difficult, but worthless and boring. "
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Wed, 23 Jan 2013 21:08:21 GMT", 
      "id": 28027, 
      "professor_ids": [
        10725
      ], 
      "review_text": "THIS.PROFESSOR.SUCKS.\r\n\r\nAlso proves that all phd's cant teach especially the smart ass ones. I would also like to remind him that just choosing people from his university as TA's wont improve your course especially when that TA is an irritating and stupid person who just grades his friends well. Stop doing favors and  improve your grading system. \r\n\r\nThe worst part is that everyone knows this professor and his TA's are shit and yet no one can waive it off because the sadistic professor wants to teach a bucket full of class which clearly are not interested in wasting their money for a course like ASE but for it being a core course.Please change your stream if you have to to avoid this course or else regret for an entire semester.\r\n\r\nI dont know how this professor is not in here. --> http://vandybubble.com/2011/10-professors-to-avoid-ratemyprofessor/", 
      "workload_text": "General as per a core course."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Wed, 23 Jan 2013 21:41:13 GMT", 
      "id": 28028, 
      "professor_ids": [
        10725
      ], 
      "review_text": "All other reviews for the course Advanced Software Engineering by Swapneel Sheth have already pointed out how abysmal this course is, which I completely agree with. \r\n\r\nIn one word I would describe this course as 'vague'. Instructing staff was lazy and did not put any effort in making assignments or deciding the grading criteria, which can help students learn something. At times I wondered if  I was undertaking a core courses at one of the best computer science departments of the country or participating in a competition called SCORE. I think Swapneel made it mandatory for students to participate in SCORE so that he can improve his own resume and show how many teams instructed by him participated in the competition. This is what happens when you have a PHD students instruct a core course. I don't know how can the SEAS select such an under qualified person to take this course (he is not even a PHD yet!). Most TAs lacked sufficient subject knowledge. Although, Jon has knowledge about subject but he is more occupied with finding ways to screw students grades and feeding his big ego than imparting education. So, think twice before taking a course where Jon is a TA.\r\n\r\nMy advice: Change your track, change your university, drop out of college, do anything but don't take this course.\r\n\r\n\r\nAll views in this review are my personal opinion.   \r\n", 
      "workload_text": "Not much. Do you even care now?"
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Fri, 25 Jan 2013 10:39:05 GMT", 
      "id": 28041, 
      "professor_ids": [
        10725
      ], 
      "review_text": "Disclaimer: I got one of the highest grades in the class. Don't think about that, however. It doesn't matter. I can promise you I objectively didn't do any better or worse than most of the people in the class. However, it stands to be asserted what a horrific failure Swapneel and his TA's were in teaching this class and how much it needs to ring out, loud and true, across every desktop of every student who is even thinking about registering for ASE under him.\r\n\r\nBe objective for a minute. Look at the other reviews for this class. All of them are negative. Only two people disagreed (perhaps the teacher himself and a TA?). What does that tell you? Ignore your feelings for a minute and let's focus on the facts. Looking at the other reviews and the overwhelming agreement that \"Swapneel\" and \"ASE\" should NEVER mix.................what does that tell you?\r\n\r\nIt tells you to fucking drop this class before you make the same mistake I did, you stupid fuck. Why? Read on....\r\n\r\nYes, it's a core class. You've got to take four. However, at least take a class where you will actually learn something. ASE is not that class. You will learn no new tools or technologies to aid you as a programmer. Software engineering as shown in this class is perhaps the most worthless and the lowest common denominator of computer science; if you can even call software engineering a science. I have no respect for anybody who seriously considers themselves computer scientists and decides to study software engineering as a specialization. I can sum up the entire class in two sentences. Ready? \"Before you program a piece of software, take the time to plan it out and get an idea of what is needed and wanted. Then, after design and implementation take place, write lots of test cases to make sure everything works smoothly and correctly.\" That's it. I'm fucking serious. That's fucking Advanced Software Engineering. It makes me shudder to think of what regular \"software engineering\" is. EVERYTHING - and I mean EVERYTHING - you learn in this class can easily be picked up by landing a job and staying there for a little while. You are ABSOLUTELY wasting your tuition taking this class because - mark my words - you will eventually learn all of this material for free. There is no justification possible to convince me that the several grand I wasted on this class was worth it; there is no fitting label for this class other than \"complete and utter rip off\". Even if you take this review and the others with a grain of salt, I can promise you the class is still a waste of time because it's a fucking tautology you'll be learning this stuff anyway.\r\n\r\nWhich leads me to Swapneel and his merry men whom are the real reasons why you should avoid taking this class. Yes, even REALER than what I've mentioned above. Swapneel is approachable in class and outside of class. He responds to emails semi-frequently and the TA's were very available as per their office hours. This is all nice and fine but just because you do the bare minimum of what you are supposed to do doesn't and will NEVER make you a good TA and especially not a good teacher.\r\n\r\nI'll start with Swapneel's waiver policy. Once people effectively saw through him, many people tried to waive this class and nearly all of them were met with rejection. Don't ask me why. I can understand a few people here and there leaving due to the material not interesting them; rejecting a flood of people from waiving the class just to cover your own ass and to heavy-handedly \"legitimize\" your material is not only suspicious but a move worthy of only the most supreme of dicks. For this alone you have my eternal contempt.\r\n\r\nNext, the grading. Every assignment and lecture for that matter was excessively vague which is a stunning accomplishment for Swapneel given that just about everything in this class is complete fucking common sense. It was evident from the beginning of the semester that Swapneel had absolutely no idea what he was doing and, for many topics, no idea what the fuck he was talking about. The TA's were even worse with the material with the exception of Jon Bell. Jon Bell knew his stuff, but he is the special breed of asshole TA who likes to answer your questions with condescending questions of his own in order to, if I had to guess, feed his pretentious ego and perhaps make him feel better about excelling in perhaps the most worthless field of computer science. There was nothing about his actions that anybody could have mistaken for productive in a million years. I would pay Jon a visit from time to time asking for clarifications on grading or assignments in general and would be subjected to a barrage of condescension, pretentious remarks, and general smuggery. I eventually quit going to his office hours because I found his behavior so thoroughly revolting, disgusting, and perhaps most importantly, counterproductive. The other reviewers have touched on the other important aspects of the grading; generally the loss of points for unmentioned phenomena in the rubrics and the subjective, smug nature of the points. I won't bother to repeat what has already been said aside from the following: even if you think you've covered every possible angle of your assignment, you haven't. You have to look for the one stupid unmentioned detail that they're going to fuck you on and hammer that shit out otherwise you stand to lose points big time. If they ask for a test case, create multiple test cases. If they want a thorough explanation, give them an assload of words. If they want an example of something, include the example and a counter example. That's the mindset I had to take in order to get the grade I did in this class and I will re-emphasize it: look for the unmentioned details that COULD help you and fucking INCLUDE THEM because otherwise they will screw you out of a shitload of points.\r\n\r\nI'm getting the word out on this shit. Swapneel, Jon, Kunal M, Kunal G, and Priyank, I want you to read the above thoughts again very carefully. If you don't take these words to heart, you are going to destroy your chances of ever being worth a shit in the CS department again in regards to teaching. Not that the damage hasn't been done already; Swapneel and his TAs should NEVER, EVER be allowed to have the job running this class again. I'm fucking serious. You five are the worst I've ever fucking seen. I had a class at my old school with three teachers; a new teacher would come in after a test was given and none of the teachers communicated with one another in regards to what we had already learned. It was completely disorganized and the averages were abysmal since we were repeatedly tested on things the teacher thought we knew but we hadn't actually covered. All three of them were unapologetic in their grading policies and, when they didn't finish covering the units they were supposed to, told us to figure out the material ourselves and one of them even told the class to accept an solution of his \"based on good faith\" when he couldn't solve an example problem after two classes. You five were fucking worse than that class. The absence of this class is better than it's presence with you five at the helm, and just about anybody would be better at running this class than any of you ever would. You five are a disgrace to the department and I hope these words come back time and time again to forcibly separate you all from ever having the chance to teach again. Harsh? Swap, you once mentioned your grading policies mirrored the real world. Well, mine don't get any realer than this.\r\n\r\n", 
      "workload_text": "A lot of vocabulary and writing about common sense concepts. Fun! You also have a semester-long programming project that is graded primarily on l33tness as opposed to actual software engineering concepts."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Sat, 26 Jan 2013 21:10:01 GMT", 
      "id": 28053, 
      "professor_ids": [
        10725
      ], 
      "review_text": "The below reviews would  have given a very clear idea about the course and how it was taught ...what is baffling is the fact that the course is a core requirement for MS students when anyone who has worked in the software industry or done an undergraduate in CS would already have done everything that is a part of the course ..The assignments defy all sense of logic ranging from \"reading articles \" and writing summaries to what seemed to be an experiment on the social behavior of individuals when they are made to test each other's projects..what followed was pretty disappointing and sickening to an extent when teams tried to raise defects in order to gain points...the grading rubric at any point was not concise ..the teaching assistants did try to keep up pace with all the chaos that was going through ...I would not comment if this was still better than what was being taught by the previous but this has to be the most stupid course I have ever had to take as a student", 
      "workload_text": "does it even matter "
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Sun, 27 Jan 2013 02:06:11 GMT", 
      "id": 28058, 
      "professor_ids": [
        10725
      ], 
      "review_text": "Figuring out exactly what was expected from each assignment and project milestone was the main problem. It seemed like the emphasis wasn't on the software engineering process, but on satisfying very vague and irrelevant conditions as well as pleasing your TA overlords (many of which were visibly on a power trip). Having requirements and even definitions change on you after the fact is incredibly frustrating (euphemism: \"clarified\"). Lectures usually covered painfully obvious ideas.\r\n\r\nAlso... if you're going to illustrate a nifty connection between refactoring source code and factoring a polynomial, at least factor a middle school problem correctly? Swap wrote x^2 - 2x + 1 on the board and factored it as (x-2)*(x+1). Then he looked at it again and changed it to (x+2)*(x+1) ........................ Yep, this guy occupied a chunk of my semester. -_-\r\n\r\nConsider the following:\r\n\r\nhttp://www.youtube.com/watch?v=oKdYRjwc8T0\r\n\r\nskip to 1:10 for the good stuff.\r\n", 
      "workload_text": "Workload was average for a core class, but a lot of that effort and time went into seeking out the gotchas that would screw us over in the grading process."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Thu, 12 Dec 2013 04:59:57 GMT", 
      "id": 28841, 
      "professor_ids": [
        1474
      ], 
      "review_text": "I recommend _not_ taking this course. 70% of the work is document writing, drawing graphs, and typing stuff into JIRA, not difficult, but very tedious and boring. You do surprisingly little coding, which is ironic for a \"software engineering\" course. Writing \"cool\" software won't score you more points in the class. If you absolutely must take this course, do not be ambitious about the projected you will create. You won't receive extra points because your project is \"cool\" or \"harder.\" Most of your grade hangs on the writing/documentation you do -- and you will spend more time on this than anyone would want to. So make your software easy to document and easy to test. You really only spend a month or two working on it, the rest is over-excessive planning you don't end up following anyway.\r\n\r\nThe midterm and final will have you writing so much stuff! The first of the three questions test you on vocabulary (!) terms from the lectures/book. The second one is short answers. The last one asks you to come up with designs for proposed software and ask you to write more than what most people can do in the given time. If you take this course, do the test backwards. Almost everything in the course is pedestrian stuff you know already: unit tests, version control, software testing, etc. The other stuff you might not have heard of, UML diagrams, burn-down charts, and spike testing, etc, are not complicated at all, and can easily be learned from the textbook. (http://www.amazon.com/Head-First-Software-Development-Pilone/dp/0596527357). In undergrad, I went to a much less prestigious school than Columbia, and I never had a course this boring, simple, and tedious. I was really in for a surprise.\r\n\r\nThe redeeming feature of the course is that the teacher an the TAs (the one's we had) were all nice people. (not necessarily easy graders though!) The textbook is actually read from cover to cover and is actually affordable. However, you shouldn't take a course just because the textbook is cheap and the teacher is nice.\r\n\r\nI was initially attracted to this course because I thought I would spend most of the time coding a cool project. I ignored the negative reviews. I regret it. Don't make the same mistake.", 
      "workload_text": "Complexity is extremely easy, but the tediousness of it made the workload medium."
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Thu, 30 Oct 2014 19:51:46 GMT", 
      "id": 41449, 
      "professor_ids": [
        1474
      ], 
      "review_text": "The class moves pretty slowly for a 4000 level CS class and covers the qualitative components of Computer Science (planning, group dynamics, etc). Don't let the name fool you, there is nothing \"advanced\" about this course. It is interesting that we get to work on a project of our choosing over the course of the semester, but the amount of documentation we have to provide beforehand is a little infuriating. You end up spending 3x more time writing out requirements, risk, etc than writing code. \r\n\r\nYou will probably have to take this class because it is required for Software Systems, and let me say that this is not a \"bad\" class. You still learn concepts like design patterns, but ultimately you will learn MUCH more if you take a class like Operating Systems or Computer Networks. ", 
      "workload_text": "Medium (bunch of periodic group assignments that don't take too long)"
    }, 
    {
      "course_ids": [
        1616
      ], 
      "created": "Thu, 06 Nov 2014 15:42:09 GMT", 
      "id": 45002, 
      "professor_ids": [
        1474
      ], 
      "review_text": "Overall, I recommend not taking this course.\r\n\r\nThe ideas behind this course are simple: think in terms of the customer and plan your project accordingly. Unfortunately, a lot of the documentation we do is not really meaningful, and the pace of the class could be faster. We spend several weeks on design patterns, and another several weeks on \"bug testing\", which is stuff you pretty much already know. \r\n\r\nIf you want to challenge yourself on your road to becoming a fully-fledged Computer Scientist, don't take this class. If you are looking for an easy course to take on the side, while knocking out your tech electives, you might consider ASE. This class is not really \"Advanced Software Engineering\", it should be called \"Software Project Planning for Enterprise\". \r\n\r\nThe midterm reflected the course. It was pretty easy, with just definitions and written explanations of concepts. But at the end of the day, how much did you learn compared to a class like OS or Algorithms?", 
      "workload_text": "Bi-weekly assignments for the first two months with documentation for your project and other scenarios\r\nSemester project using a web framework (Django, Rails, etc.)"
    },
    {
      "course_ids": [
        6676
      ], 
      "created": "Sat, 23 Nov 2013 17:18:18 GMT", 
      "id": 28754, 
      "professor_ids": [
        2480
      ], 
      "review_text": "This is the BEST course I've ever taken. Prof. Grinspun is talented, not only on his research, but also on teaching. It seems he can see through your mind, find your weekness and try to fix it with all the material he provides. This course is MUST for students who is in the graphics track or want to enter either the graphics industry or academia after graduation. In addition, I think this course is also a MUST for who want to be a professor in computer science to learn how to be a good lecturer and how to organize your material well in a 1.5-hour presentation.\r\n\r\nBesides coding and graphics, the course covers a lot in physics, linear algebra and differential geometry. Everything is self-contained so you can start this course even your math is only at high school level.\r\n\r\n", 
      "workload_text": "Light at the beginning, but heavier as time goes. Fortunately the assignments have a lot of fun and extremely clear. Each assignment contains some coding job, and designing a demo scene. Usually each assignment will cost you 1~2 days if you want to get an A+. You would become an experienced C++ coder after finishing this course even you don't know how to write a Hello World at the beginning of the term. The grading is partly democratic, say, your classmates will be in charge of evaluating your demo scenes in a double-blind manner, and the remaining part is graded with a robot checking your result.\r\n\r\nNo exam!"
    }, 
    {
      "course_ids": [
        6676
      ], 
      "created": "Tue, 21 Jan 2014 22:39:17 GMT", 
      "id": 29178, 
      "professor_ids": [
        2480
      ], 
      "review_text": "One of the best, and also one of the hardest, most time-demanding classes I have ever taken. Grinspun is a very well known and accomplished professor who is passionate about his work, as well as an enthusiastic and organized lecturer. Take this class late in your CS career - the more programming experience you have, the better.\r\n\r\nHomeworks are difficult, but you are provided with a code base that provides visual debugging tools, as well as a grading script with numerous tests that gives you an accurate idea of the performance (and final grade) of your code. All homeworks come with a PDF explaining the physics concepts behind the code for that week, and although there were some errors, the PDFs were for the most part very helpful, especially if you happened to miss a lecture. (In the case of mistakes in the PDF, extensions were often given)\r\n\r\nTo prepare: learn linear algebra, refresh your knowledge of differential calculus (mandatory), be a strong C++ programmer, and, although it is not listed in the course requirements, I STRONGLY recommend some kind of physics background. While Grinspun does go over this material in class, if you start with at least one college-level physics class under your belt, the lectures and homeworks will be much more comprehensible, and you won't waste time learning elementary physics.\r\n\r\nGrading: I include this section to discuss some grading policies I disagreed with. 85% of the homework grade comes from the \"bot\", or the test suite mentioned earlier. The other 15% comes from a mandatory creative scene, built by you to showcase the elements developed for that weeks milestone. At the beginning of the class, Grinspun said you do not need artistic skill to succeed in this class. However, I disagree. If your code works 100% according to the script, you could still get a B on the assignment if you fail to produce a good creative. These creatives are then judged by your peers, who determine the remaining 15% of your grade. Humorous creatives can outweigh visually pleasing creatives, so if you're in a time crunch, go for that. The professors and the TA's weigh in on these grades, so they may give you more points if they see technical ability not easily recognized by your peers.\r\nExtra credit is awarded for the top 5 creative scenes, and sporadic extra credit is offered throughout the semester on the homeworks (when it is offered, it is a lot! Do it!)\r\n\r\nExams: None. There is a final project worth the weight of two \"milestones\"/homeworks, which is left up to you. You could modify the code base to produce an extravagant creative, implement a technical paper, or implement algorithms from the class in an external software - whatever you want.\r\n\r\nBottom line: If you have any interest in computer graphics or animation, take this class. It will either weed you out, or light a fire under you to go farther in the field. It's a love-it or hate-it class, since you will have to really commit, but if you want to be in this field, you cant miss this opportunity.", 
      "workload_text": "Heavy. Weekly homework assignments, containing a program and a creative. The programming assignments tended to take me 4-5 days, and the mandatory creative scenes took up the rest of the time until the deadline. Obviously, the more time you spend on the creative scene, the better your assignment grade, so this system favors students who can complete the assignments faster. It is not easy to get an A in this class, but it is possible. Grinspun only gives A+ grades to exceptional students who he believes have gone above and beyond."
    },
    {
      "course_ids": [
        663
      ], 
      "created": "Sat, 01 Jan 2000 00:00:00 GMT", 
      "id": 45, 
      "professor_ids": [
        39
      ], 
      "review_text": "User Interfaces contains useful, if somewhat obvious, material. He basically follows the book without adding a huge amount. He has a fair lateness policy, but seems unable to deviate from it when student's circumstances require it (i.e. sickness).", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Fri, 04 Jan 2002 00:00:00 GMT", 
      "id": 1706, 
      "professor_ids": [
        39
      ], 
      "review_text": "Why does this Prof. even bother to teach, it's so obvious that he hates it and has contempt for students. There is too much reading for the class, as in addition to the textbook (not bad) he assigns copious amounts of PHD disertations that are total BS. The subject is interesting, but he berates his TAs and they then grade the projects harshly.", 
      "workload_text": "3 2 week programming assignment, 1 3 week final programming projcet, midterm,final"
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Thu, 19 Dec 2002 00:00:00 GMT", 
      "id": 4089, 
      "professor_ids": [
        39
      ], 
      "review_text": "Never in my life have I seen a professor hold so much contempt and disdain for his students.  Feiner's lectures are flat out boring and .  He has you read one or two of around 25 long research papers, and then just stands in a corner and writes sloppily on an overhead projector while discussing it.  He is impossible to approach, because he seems to believe that students (and their questions) are below him.  The three homework assignments here were not hard (about 15 hours each, roughly), but the final project was tough only because of the demo.  Doing a demo with Feiner is basically him apathetically saying \"mm hm\" every two seconds to your explanation, and then bringing up every bad aspect of your program to you that he can find in the 5 minute span and grilling you on it.  Tests are tough, too.  Feiner holds you responsible for those research papers on his tests, which are entirely essay form.  The bottom line: unless you enjoy reading insane amounts of research papers, steer clear of Feiner.", 
      "workload_text": "Three homework projects (not hard), one final project with demo (hard only because of Feiner's demo practices), midterm and final, based on an unbelievable amount of REQUIRED reading"
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Sat, 18 Jan 2003 00:00:00 GMT", 
      "id": 4411, 
      "professor_ids": [
        39
      ], 
      "review_text": "I will admit that his lecturing style is pretty bad. But he does make time for his students in office hours, and looks like he genuinly wants to talk to you. You meet with him once, and he will remember your name. So that is one good part of this professor that shoudl be remembered. Workload in the class is not that bad. ", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Sun, 19 Jan 2003 00:00:00 GMT", 
      "id": 4423, 
      "professor_ids": [
        39
      ], 
      "review_text": "Since you really have to take Feiner if you want to ever take UID, you need to just ignore his poor ability as an instructor; just use this opportunity to read a lot of textbook material and research papers in this field. It is a field that is completely ignored in ALL other classes, and it is quite important. Unlike most courses in the department  it actually practical and applicable to anything you'll ever program. I do agree with all previous (bad) reviews. However, the problem with the allegedly harsh grading of the homework is that most of the grade is not based on functionality. Your program may follow all specs, but still get a C. It is the USER INTERFACE that gets you most of the credit. And you can only start thinking of user interface AFTER you completed all specs, which is usually around 5am the night before it is due. And that is truely a big problem with this class. But as you know from the previous reviews, you get some penalty-free late days to use on any combination of the first 3 (!!!)assignments. Another major problem is that there is a lot of reading, and it is all asked about in the midterm and final. As a rule of thumb, if there is a formula of some sort in any of the papers, it will appear eventually on a test. You will probably have to state it and explain it. Nothing too fancy, but you do need to memorize a bunch of them like it's a high-school history test. Not the end of the world, though. \nIt is true, this class feels more like a Humanities class that a regular CS class. You have to read a lot papers, and there are never problem sets (only programming projects with minor explanations of \"why did you choose the interface that you did\"). It is, though, not the hardest class you have taken or will take in the department, and it opens a window to a very neglected (and again, practical) area of compters. Lets face it, in the real world, your boss/client is much more likely  to care about the interface of your program. And like in this class, they are going to take the functionality as a given.", 
      "workload_text": "Never in groups . 3 programming assignments, a final programming projet + a demo (ALL graded for user iterface rather than for functionality), a midterm, and a comprehensive final. Also, A LOT of reading. While the book can be somewhat skimmed, you do need to know the major concepts of every chapter. As a rule of thumb, after reading every chapter ask yourself 5 feasible questions he can ask. It's pretty obvious. There is no way around reading all research papers, and don't fool yourself you will have enough time to read even a quarter of them during finals.  However, like in every class like this, nobody has time to do all the reading and there's a curve. The midterm and final consist only of essay questions. The trick is that if you understand the general theory (mostly from the book) and use \"the UID language,\" you can totally b/s and get some partial credit on occasion. Finer travels a lot, so there are many occasions that there is a gust lecture, some of them really cool."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Tue, 27 Jan 2004 00:00:00 GMT", 
      "id": 7983, 
      "professor_ids": [
        39
      ], 
      "review_text": "I mostly agree with what's been said by earlier reviewers, but wanted to point out some ways in which the class was different in the fall of '03 compared to earlier years:\n\nProfessor Feiner makes extensive use of powerpoint nowadays, as well as videos, some overhead slides, etc. The powerpoint slides aren't especially comprehensible in isolation, though; when reviewing for the midterm, have the notes in one window and google open in another to look up terms that aren't explained directly on the slides.\n\nApart from that, I don't feel like I really learned the vocabulary and concerns of interface designers working in industry; the class focused more on academic UI research, past and present. I plan to redress this by doing a fair amount of independent reading this term.", 
      "workload_text": "I found the programming workload for the course to be staggering. Part of this can be attributed to the lack of written problem sets or assignments that were strictly design assignments; for all four we had to handle design _and_ implementation. The first three assignments built on each other (though the final project was unrelated), but assignments 2 and 3 both required significant reworkings of and extensions to what came before. I don't think that an advanced undergraduate course should require its students to produce more than 2000 original lines of code or so, and I wrote much, much more than that."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Mon, 10 Apr 2006 00:00:00 GMT", 
      "id": 14439, 
      "professor_ids": [
        39
      ], 
      "review_text": "A word of caution. Feiner seems to have a predanatural power to remember faces. His class will bore you to tears, so few people show up. However he still knows who people are, and for those that are on this floor a lot (CEPSR 6), this is a big problem. I mean either that or scowling glares are the norm in his lab.\n\nPS: The material covered is common sense. Any basic design class (in any field) will teach you everything this class does (and then some). The biggest problem with way this class is presented is that there are 200 billion different rules and guidelines, which all together sound like superstitious drivel. The field has few (important) pricinples, all of which are presented in the first week. The rest is a waste of time.", 
      "workload_text": "a few nights worth of coding. Really, really unpleasant coding."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Thu, 11 May 2006 00:00:00 GMT", 
      "id": 14765, 
      "professor_ids": [
        39
      ], 
      "review_text": "I would not say that Prof. Feiner has a harmonious relationship with teaching, but it's hard to be more specific than that. He is careful to be organized and to cover material on schedule; yet he obviously hasn't edited the material he teaches in years - it's old and mostly irrelevant, although the final 3 weeks of class finally had some traction. He tries to be a good guy (I guess) by telling you how to prepare for exams and then says \"do all the [voluminous, outdated] reading and review your class notes,\" as though that's helpful -- and then asks a couple of questions on the exams that are calculated to punish all but those who memorized the course material. 40% of the midterm, for example, was based on a topic covered by 3 pages in the text and a couple of his slides -- all of which seems faintly  sadistic.  The individual HW's were interesting; there could have been more of them. The team projects, as always, were an aggravating waste of time. I think that if, as a start, Feiner updated 60% of his course material and learned how to relax, both his and his students' attitudes would improve.", 
      "workload_text": "Not bad unless you consider reading hundreds of pages of 20-30 year old ACM articles a waste of time."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Mon, 20 Dec 2010 21:12:35 GMT", 
      "id": 25025, 
      "professor_ids": [
        39
      ], 
      "review_text": "This class is great for someone that is planning to go into UI research. For everyone else, not so much. It should actually be called \"The History of User Interface Analysis and Research.\" Feiner spent many of the lectures describing, in laborious detail, research projects and ideas from 15 to 30 years ago.\r\n\r\nAs the review before mine points out, the tests are sadistic. Unless you have a photographic memory, you are not going to do well. The midterm's questions were based on less than 1% of what was covered in the lectures, textbook, and articles he asked us to read. For example, 20% of the test was based on one random paragraph from one of the many articles. Another 20% was based on a topic he spent literally 5 minutes talking about during a lecture. Why is this a bad idea? It rewards students that have better memories or, to a lesser degree, that happen to get lucky because they studied the 1% of material that shows up on the tests. Studying for Feiner's tests is essentially a game of roulette, but with much a lesser chance of success.\r\n\r\nOh yeah, and Flash Builder 4 is terrible.\r\n", 
      "workload_text": "2 individual assignments and 2 group projects. Time consuming, but not particularly hard. \r\n\r\nSadistic midterm and final."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Mon, 18 Jul 2011 19:57:40 GMT", 
      "id": 26304, 
      "professor_ids": [
        39
      ], 
      "review_text": "The class is very well organized but the lectures are really boring. The assignments in this course are all based on Flash Builder with 3 assignments(2 individual) and a final project. The theory exams are totally theoritical. If you have a really good memory, you can do very well in the exam. Just read everything from the textbook as well as his slides thoroughly, as questions can come from anything: Be it a single line mentioned in the slide or rather a random paragraph from the tetxtbook. ", 
      "workload_text": "Easy course. Not too time demanding!"
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Tue, 19 Nov 2013 20:43:53 GMT", 
      "id": 28733, 
      "professor_ids": [
        39
      ], 
      "review_text": "User Interface Design w4170\r\n\r\nI took this course in my first semester as a grad student. And I learned how well coffee does at keeping you up. Most people doze through his classes or do their own work and he doesn't seem to mind that. Some lectures do get interesting but mostly there's not much interest generated by the professor.\r\nBut the assignments are really cool. Most of them use some form of APIs along with javascript and you get to build pretty neat stuff. You can look up the previous year assignments and projects. And you do see that there is some common sense required while building UIs and the common mistakes to avoid.", 
      "workload_text": "The lightest course ever. Gotta write a lot of reports and explain why you did something the way you did it. That's what matters."
    }, 
    {
      "course_ids": [
        663
      ], 
      "created": "Fri, 03 Jan 2014 18:07:15 GMT", 
      "id": 29021, 
      "professor_ids": [
        39
      ], 
      "review_text": "Feiner seems to be passionate about user interfaces. His lectures, however, betray this notion because they are extremely boring. I found his assignments to be great tools for learning Javascript and how to interact with APIs. The final was ridiculous. He basically asked random questions about anything from the lectures to the grossly large amounts of assigned reading. If you wish to do well on his exams, MEMORIZE EVERYTHING, otherwise you are screwed. I find it to be of poor taste when professors give assignments and exams that are completely unrelated and that rely, not on applicative knowledge, but pure memorization. He seems to be a man of habit, so I'm not counting on this ever changing.", 
      "workload_text": "Relatively easy compared to most computer science classes. Probably 3-4 programming assignments with detailed descriptions. Some are group assignments. We only had a final but you might have a midterm, both of which would require large amounts of reading and memorization. "
    },
    {
      "course_ids": [
        4907
      ], 
      "created": "Tue, 15 Jan 2008 00:00:00 GMT", 
      "id": 20818, 
      "professor_ids": [
        3366
      ], 
      "review_text": "Professor Bellovin is an engaging and well-prepared lecturer.  He's got a good sense of humor, he can draw you in to the material, and when he does he explains it very clearly.  Of course, the material is intrinsically interesting, varied and with a strong focus on real-world security incidents.\n\nI'd recommend the course, but there are some caveats.  There's no single textbook and the readings, while usually interesting, vary greatly in terms of how thoroughly they cover their subjects.  On top of that, while lecture notes are posted online, they usually provide only a broad outline of what Bellovin says in class, so it can be hard to find reference material for homeworks or for studying if you missed a class or didn't take good notes.\n\nAlso, Bellovin appears to be something of a big shot in the computer security world outside of academia (eg., helped write Usenet back in the day, won the 2007 NIST / NASA security award).  This is kind of cool, but involves him missing a relatively large number of classes to travel to conferences and so on.  When he's gone, classes are taught by the TA, and at least in our case, the TA was a non-native English speaker and a bad lecturer.", 
      "workload_text": "4 homeworks, which make up 50% of the grade, plus a midterm and a final.  The midterm and the final are relatively easy if you've gone to a reasonable number of the lectures and done a reasonable amount of the reading; the questions are straightforward.  Each homework has a written part and a programming part.  The homeworks are moderately difficult and time-consuming, about the average for a Columbia comp sci class, but are graded particularly harshly.  There is also a tough lateness policy, and no freebies / dropping lowest grade / etc.  If the class is curved, it doesn't change much."
    }, 
    {
      "course_ids": [
        4907
      ], 
      "created": "Thu, 25 Dec 2008 20:23:01 GMT", 
      "id": 21960, 
      "professor_ids": [
        3366
      ], 
      "review_text": "This course is fairly simple, and a good bet if you are trying to improve your GPA.\r\n\r\n4-5 fairly easy, (written + programming) assignments (50%) that will be as simple or as complex as you want them to be; however, putting in extra effort to write an extraordinary program will not fetch you extra credits.\r\n\r\nEasy mid-term (20%) and finals (30%) that contain only open-ended, \"open to interpretation\" questions. There are no right or wrong answers to most of the questions. You are supposed to integrate all your knowledge to answer the questions, but basically the answers are so downright simplistic (and amusing) that they might not strike you at all. That is, if you have a rough idea of what has been taught in the class, and use appropriate terms from the slides and suggested reading materials while answering, and mention that your answer assumes \"so-and-so\", you can hardly get it wrong. \r\n\r\nThe whole course is about applying common sense. I have to say that I didn't learn anything spectacular in this course. I goofed up in the midterms because I didn't apply \"enough\" common sense, and did very well in everything else. And I got an A- with a 92%, so that should say it all.\r\n", 
      "workload_text": "Low to medium."
    }, 
    {
      "course_ids": [
        4907
      ], 
      "created": "Wed, 08 Jan 2014 09:33:18 GMT", 
      "id": 29083, 
      "professor_ids": [
        3366
      ], 
      "review_text": "I would recommend this class to anyone except the following two groups:\r\n\r\n1) You hate programming in C/C++\r\n2) Thinking \"outside the box\" and \"thinking like the bad guy\" isn't your thing.\r\n\r\nOtherwise, I heartily recommend the course. Professor Bellovin's lectures are entertaining -- I actually looked forward to going to the lectures. His lectures are obviously well prepared; he seems to reuse the same slides but updates them the night before to keep them relevant. The lectures are organized and lively -- with a nice touch of sarcasm. \r\n\r\nThe assignments are mostly about building a secure program that manages files. Watch out -- just because you \"meet the specs\" doesn't mean you will get full credit (or even a good grade). Unlike other classes where the professor would promise \"you can assume you will get proper input,\" here you can assume the graders will be very creative about how they can cause your program to produce errors. You have to validate inputs like crazy. Writing the actual program isn't hard, but you will use some unusual/unfamiliar c libraries so don't start too late because you need a day or two to familiarize yourself with the documentation. Definitely do assignment 0 to get your C/C++ up to scratch (and you WILL need it for assignment 1). If you start a week early on pretty much any assignment, it will be a breeze. If you start 2-3 days before the deadline, you will be pulling consecutive late-nighters. The assignments aren't cakewalk, but they aren't complicated or ambitious either.\r\n\r\nThe midterm and final are subjective (and easy), but graded fairly. They accept a lot of answers if the justification is good. They are still published on earlier versions of the course website if you want to have an idea of what they are like. If you know the lectures, can mix the concepts together, and can \"think like a bad guy\" you will do well on the midterms with little studying. If you pay attention in lecture and go over the slides, you will do well on the test. \r\n\r\nOverall, this is a really solid course, interesting, and not burdensome. I recommend it.\r\n", 
      "workload_text": "On a scale of 1-10 with 10 being the hardest, I'd say 3-5 depending on your background and how interesting security is to you."
    },
    {
      "course_ids": [
        4079
      ], 
      "created": "Mon, 16 Jan 2006 00:00:00 GMT", 
      "id": 13902, 
      "professor_ids": [
        1342
      ], 
      "review_text": "I think he's a good teacher who can explain things well, but attendance does drop at the end, as people see that a significant part of the course revisits Data Structures.  I wanted to add that in Algorithms, he does not care whether the homework is handed in at the beginning or end of class (as opposed to his other class), and that undergrads are curved separately from the grads (the class is 80% graduate students).", 
      "workload_text": "7 Homeworks, take home midterm, final"
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Mon, 19 Nov 2007 00:00:00 GMT", 
      "id": 20502, 
      "professor_ids": [
        1342
      ], 
      "review_text": "I think Professor Stein teaches well. He understands the subject thoroughly as can be seen in his explanations. I haven't seen even one instance of a question he couldn't answer convincingly. He is helpful in office hours and will walk you through a problem if necessary. \n\nThe class is in the morning (9 am ) and it's possible you will sleep through some classes. But every class is worth going to (take coffee !) . I find Stein's explanations in class easier to understand that the book. Many a times I have gone back to my notes because the book seemed to complicate thing a trifle.\n", 
      "workload_text": "The load is fair, bordering on too much (7 homeworks, all lengthy). The (take home) midterm was a breeze if you attended class."
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Wed, 18 Nov 2009 15:13:48 GMT", 
      "id": 23314, 
      "professor_ids": [
        4227
      ], 
      "review_text": "I guess professor does not have experience in teaching. She is not able to properly deliver the lecture, she herself is confused most of the time. Its a wastage of time attending her lecture.\r\nIts better to study by yourself from book as her lectures does not contain anything new.\r\nWhen you ask her some doubt, you will find that doubt is still doubt.\r\nMoreover, she is very harsh to the students, in short not at all student friendly. She even does not listen to the student's problems. Her grading is also very strict. I will suggest not to take this course under her. \r\n. ", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Sat, 02 Jan 2010 08:53:47 GMT", 
      "id": 23740, 
      "professor_ids": [
        1342
      ], 
      "review_text": "Prof Stein is a good prof w.r.t.knowledge but his academic policy is not foolproof or rather I can say has a lot of loopholes in it . On one hand he does not prefer people referring to the sources on the internet whereas on the other hand his TAs give full credit to those who discuss the sums . So copying verbatim under the name of discussion is prevalent but if someone wants to access wikipedia or any other internet source then it is not allowed . Also the policy of picking up individuals for violating the academic policy seems to be random as many copy cats do escape . Also both the professors of algorithms do not show the same honesty while following this highly controversial and confusing academic honesty policy ", 
      "workload_text": "heavy with 7 assignments , midterm , final"
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Mon, 06 Dec 2010 19:16:12 GMT", 
      "id": 24893, 
      "professor_ids": [
        2941
      ], 
      "review_text": "I took the class CSOR 4231 with Prof Yanakakis. Unless you are really stupid, do NOT take this class under this Professor. Granted, he has great credentials and has won a Knuth prize or two for his research. But at the end of the day, teaching a course is not the same as doing research and not everyone can do both well. \r\n\r\nInstead of making the class interesting and explaining the background behind how algorithms should be designed and how they came to be, he just puts the algorithm on the board and makes a poor attempt at explaining it. Watch one lecture given by Stein on CVN and you will be inspired .. and sit for one lecture with this guy, and you will forget the little you knew before the class. His homeworks concentrate more on proving correctness than on designing algorithms and mapping problems to standard algorithms. It is a pity that a researcher of his caliber, does not have the ability or the inclination to make this class interesting. Believe me, you would be better off watching lectures on MIT OCW or stein's on CVN. You have been warned. ", 
      "workload_text": "The workload is high and you would have to devote about 10-15 hours a week for this course. There are 6 homeworks, a mid-term and a final."
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Wed, 11 Jan 2012 05:55:44 GMT", 
      "id": 26891, 
      "professor_ids": [
        1342
      ], 
      "review_text": "You know how you imagined it would be supercool to actually learn algorithms from the S of CLRS? Well, its better than what you imagined.\r\n\r\nIf you want to learn algorithms from scratch, or just brush up the basics and then step into the more advanced Dynamic Programming / Graph algorithms, this is the class for you. Prof. Stein is extremely approachable, and very patient with the stupidest of questions. He will not take any Math background for granted. First few lectures can be boring if you know Big-Oh but he is really wonderful at motivating most of the \"magic\" behind the algorithms. Most of the assignments are difficult and you really want to get started as soon as they are out.\r\n\r\nMidterm was not too bad, if you had solved the assignments on your own and the final was downright easy.\r\n\r\nOverall, an extremely enjoyable class. Highly recommended.\r\n", 
      "workload_text": "Heavy: 7 assignments + 1 take home midterm + final"
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Tue, 19 Nov 2013 20:50:22 GMT", 
      "id": 28734, 
      "professor_ids": [
        1342
      ], 
      "review_text": "Well the professor doesn't really add much, but the course is a must itself. It puts you in a position where you need continuously keep solving his assignments. And there are a lot of them. One of the advantages we had was that Aaron Bernstein, his PhD student, was TA ing and he was really helpful in clarifying a lot of stuff. He might be late most of the time but he makes a lot of effort to explain stuff. He even helped solve a couple of assignment questions.... :p\r\n\r\nThe course doesn't cover any DataStructure though.", 
      "workload_text": "A lot. Loads of bi-weekly assignments, that will take up a lot of your time."
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Thu, 26 Dec 2013 19:39:26 GMT", 
      "id": 28979, 
      "professor_ids": [
        1342
      ], 
      "review_text": "This class is definitely one you should take for the following reasons:\r\n\r\n1. The book is very good and the teacher, who helped write it, is very good at describing the chapters intuitively.\r\n2. The class covers a lot of material and, as a person without much of a background in CS theory, I really learned a lot.\r\n3. This class really gets intimate with the particulars of certain algorithms and you leave the class with a sense of what works where and why. At least I did, anyway. The problem sets you will be solving reinforce this way of thinking, as many problems ask you to devise an algorithm and you will get a lot of practice of what \"pieces\" to use in the \"puzzle\".\r\n\r\nJust about any CS concentration will find something to use from this course and in general just provides some good information.\r\n\r\nThere are still problems with this class:\r\n\r\nFirst of all, it seemed like everybody was cheating. The average on every assignment was always absurdly high and, given the challenging nature of the problem sets, seemed too good to be true. It was almost as if the people who did the work honestly were punished for doing so. No less than six times in class did I witness a student in front of me pulling up the solutions on his/her laptop. The same problem extended to the midterm because it was take home. You weren't supposed to collaborate but people did anyway. Seriously, Google \"CLRS 3rd edition solution manual\" and let me know what you find in the first result on the first page.", 
      "workload_text": "Really heavy. The homeworks are HARD and will take you a lot of time. Don't make the mistake I made and mix this class with other heavy classes (OS, Animation, etc)"
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Fri, 03 Jan 2014 21:36:09 GMT", 
      "id": 29026, 
      "professor_ids": [
        1342
      ], 
      "review_text": "I agree with the previous reviewer on almost every account.  I just want to elaborate on how some of the administrative details.  I ultimately really enjoyed the course and learned a ton.  That being said, I\u2019m hesitant to recommend it to anyone who is taking it just because someone told them it might be a good idea.  The workload is too heavy to undertake the course out of casual interest.\r\n\r\nUnfortunately, with an enormous class size, the course had a heavy focus on evaluation without much benefit.  The class had all the symptoms of a cash cow class for the master\u2019s program.  For the whole semester (except on days when homework was due), there were students filling every seat plus the stairs of the room.  The first time homework was handed back at the front of NWCB 501, the entire class fought like idiots around the tables to get their papers as quickly as possible.  Eventually, I realized that getting my homework back was pointless, as each problem rarely had any information other than the score I got on the problem.  If the score was something in between full score and no credit, they often wouldn\u2019t even bother to underline or cross out the mistake.  This is a great way to give grades really quickly, but not much else.  These problems extended to both the assignments and the exams.\r\n\r\nThe professor gave a speech on the first day about the academic honesty policy, and how using the internet to help us with the homework is not allowed.  He said that violations would be treated harshly, and that there are no exceptions this policy.  He even implemented a policy to encourage us not to waste time writing anything for problems we did not know how to solve, which was to award 3 points out of 10 for leaving the problem blank.  That all seemed fine on the first day, until you realized that nobody gave a fuck and they were all just gunning for perfect scores, regardless of how they attained them.  The bottom line is that any incentives to prevent cheating were completely unsuccessful.  Yes, people who were honest were inevitably penalized. \r\n\r\nThe fact that such excessive amounts of this took place makes me question whether the expectations for the class were unreasonable.  I think most people thought to some extent that the workload was too heavy.  I think the workload did detract from learning for many students.  Yes, this is a class where doing the homework requires significant insight beyond what is presented in the lectures; this is a good thing to a certain extent but sometimes it went overboard.\r\n\r\nUnfortunately, the exams didn\u2019t necessarily do a good job normalizing for who was most sincere in their homework assignments.  I've been in classes before where people who cheated on the homework got killed on the exams; this was not one of those classes.  The main reason for this was that the midterm was take home (and obviously everyone collaborated).  This exam was a great deal easier than the homework assignments, but the expectations are generally a rather unclear, and the grading was much harsher than homework assignments.  Also, many of the more difficult theoretical problems did not really have anything to do with the exams.  Basically, the problem sets were so extensive that the exams weren\u2019t representative of how well students understood the assignments.  For example, much of the beginning of the course and the first two homework assignments are devoted to developing mathematical techniques, but none of this comes out on the exam.\r\n\r\nFinally, I think there should be some coordination between this class and data structures.  To put it bluntly, data structures here is a complete joke.  I think every undergrad in the class could\u2019ve benefitted from some attention to the more advanced data structures.  I\u2019m not saying this because the background was necessary or even helpful for the material we covered.", 
      "workload_text": "30% Homework Assignments (7) - Difficulty and length varied substantially from week to week.  Don't be fooled by the small number of assignments.  Overall, these were some of the longest homework assignments of my life.  Some of the problems were really great and I enjoyed working through a lot of them, but it definitely was excessive.\r\n\r\n35% Take home midterm - This was 3 problems that was generally easier than the problems on homework assignments, but some of the expectations were very unclear.  For example, when we were told to give an efficient algorithm, there was one case where the most efficient algorithm was Dijkstra\u2019s algorithm.  We hadn\u2019t covered Dijkstra\u2019s algorithm yet and it was on the syllabus for a later date.  That being said, I think every CS major knows about Dijkstra\u2019s algorithm.  The truth (according to the solutions) was we were expected to use a less efficient algorithm than Dijkstra\u2019s algorithm because it hadn\u2019t been covered.  These types of ambiguities weren\u2019t a factor in the homework assignments because they usually indicated the runtime of the algorithm we were supposed to devise.  Also (perhaps due to unclear expectations) the grading was harsh.  The average was a 45/60 and the median was a 47/60.  \r\n\r\n35% In-Class Final - A bit of a crapshoot, and completely impossible to prepare for.  The average was a 39/60, unsurprisingly the lowest average of the semester because it was the only in class exam.  The problem with the exams wasn\u2019t that they were unfair so much as if you made one wrong assumption about a problem, this made it incredibly easy to mess up.  "
    }, 
    {
      "course_ids": [
        4035, 
        4079
      ], 
      "created": "Wed, 08 Jan 2014 23:44:52 GMT", 
      "id": 29091, 
      "professor_ids": [
        1342
      ], 
      "review_text": "First off I enjoyed the course and think Prof. Stein is an excellent teacher. His lectures do a good job of explaining some very dense material and he also is engaging and manages to keep a relatively light tone despite the large class size. He seems well prepared and obviously is a master of the material. Sometimes when you take a course where the teacher is also the textbook author you might as well just stay home and read the book; however with this class Prof. Stein manages to add a lot of value despite covering mostly similar material to the book. The book itself is pretty good too although occasionally too terse.\r\n\r\nThe material itself is critical to any advanced CS study - either research or advanced development - and so I would recommend it to anyone looking at or already in grad school or who wants to get a highly competitive job at a top company. That said, if all you want to do is get a decent entry level CS job this material is more challenging than what you need to know.\r\n\r\nSpeaking of challenging material the class is VERY hard. Primarily this is due to the HW. With one or two exceptions each of the seven problem sets is extremely long and difficult. And (as has been pointed out) cheating is rampant. If you want to get the mean or better without cheating be prepared to invest at least twenty hours on each HW.\r\n\r\nI actually thought the midterm was great. Since the questions were brand new you couldn't cheat from the internet and so I felt the long hours I put into it were rewarded with a good score above the mean. This is in contrast to the HWs where no matter how hard I worked I generally got an average grade.\r\n\r\nI also thought the questions on the final were fair although I was surprised at my grade (which wasn't bad but wasn't good either). C'est la vie, you can't win them all. Certainly the questions on both the midterm and final are easier than on the HWs.\r\n\r\nOverall I loved the class although I think it would be even better if they reduced the amount of HW and used easier questions written from scratch each semester so people couldn't cheat from the internet. I do understand this would be a lot of work for the staff. As it stands right now hard work on the problem sets will help you learn the material very well, but can be frustrating due to sheer volume and the fact many people cheat/collaborate.\r\n\r\nCurve seemed fair to me but I haven't discussed grades with anyone else in the class. Overall TAs seemed pretty good. Some logistical hiccups (not nearly enough seats in lecture hall, HWs returned via huge pile/mad rush method) but generally grading was quick. Feedback on Piazza questions a bit skimpy but not bad.\r\n\r\nTL;DR - really enjoyed the class overall, particularly the rigorous material and good lectures. Prof is high quality. Have mixed feelings regarding the huge HWs. Textbook is relatively good.", 
      "workload_text": "Extremely high primarily due to HW. 7 HW problem sets (30% total), one of these is half size but the others are all pretty brutal. Very fair take home midterm and fair in class final (35% each)."
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Wed, 09 Apr 2014 16:13:11 GMT", 
      "id": 29312, 
      "professor_ids": [
        1342
      ], 
      "review_text": "One of the best classes I've taken at Columbia. Stein is a clear lecturer, and made all of the (already exciting) topics even better.\r\n\r\nThe homeworks were excellent. They were long and arduous, but you had sufficient time (two weeks) and plenty of office hours. I really learned a lot through the homeworks, and they prepared me really well for the midterm/final.\r\n\r\nIt's a huge class, so be prepared for other people to cheat, make noise, grumble, etc. Ignore it, and take the class anyways, because it's worth it. ", 
      "workload_text": "Very time-intensive, but useful/well-written homeworks. Easy take-home midterm, fine final. You can prepare by really understanding the material and just applying it"
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Wed, 23 Apr 2014 04:33:25 GMT", 
      "id": 29361, 
      "professor_ids": [
        1342
      ], 
      "review_text": "This was definitely one of the best, most rewarding classes I've taken at Columbia.  \r\n\r\nWhile the huge size of the class was definitely not optimal, Stein has mastered the art of teaching a large class.  The class definitely covers a lot of dense material, but the instructor did a great job picking out the important ideas without getting bogged down and trying to cover every last line of the textbook.  He's without question one of the best lecturers I've had at this school.  I know that often taking a class from the author of the textbook can mean that lecture notes seem like copies of the textbook, but that is not the case in this class.  I found his presentation a bit friendlier and more streamlines than the book, and he was also quite funny and brought great energy to the class.  The book could be terse, but it was definitely helpful to refer to after lectures for more details.\r\n\r\nAs people have mentioned previously, the workload is intense.  Each of the seven homework assignments are incredibly long.  I don't think I've ever spent so much time on homework assignments for a class.  I learned a ton from completing them, but they definitely could've been a bit shorter without compromising much value.  With that in mind, this is definitely not a class to undertake lightly.\r\n\r\nThe exams were much more straightforward than the assignments, and if you put a lot of effort into the assignments, it would be reflected on the exams.  It was very frustrating that so many people cheated on homework assignments for perfect scores.  I don't really have a good answer to this, as I too was very frustrated by it.  Seeing as this happened, giving a take home midterm might not have been the best idea.  The grading seemed fair to generous, especially for undergrads who were curved separately.\r\n\r\n", 
      "workload_text": "Extremely heavy workload.  7 massive homework assignments worth 30% of the grade, and a take home midterm and in class final each worth 35% of the grade."
    }, 
    {
      "course_ids": [
        4079
      ], 
      "created": "Fri, 23 May 2014 15:20:23 GMT", 
      "id": 29559, 
      "professor_ids": [
        12932
      ], 
      "review_text": "Xi is a pretty decent teacher. Going into this class, there were no previous CULPA reviews on him and the only thing I heard about him was that he was \"not bad\". I would say Xi's a bit better than \"not bad\".\r\n\r\nTypically, classes like Algorithms go really fast, leaving most students lost and confused. Xi is good in this sense because he teaches at a slower pace so it's easier to understand the long proofs and sometimes dense material. The drawback of his speed is that we didn't finish the syllabus. We missed 2 classes because of snow days and another 3 classes because Xi was overly ambitious to cover so much material at his teaching pace. He also posts excellent slides online so you don't have to worry if you missed something in class.\r\n\r\nThe class itself is pretty hard. The book CLRS, while excellent, is quite dense and detailed. Homework was almost completely assigned from the exercises in the book, which are nearly impossible the solve. The HW averages were pretty high (around 55/60). This is because solutions to problems from CLRS are available online if you search carefully enough. I highly recommend you don't do this since you will get screwed come exam time. Xi is super helpful in Office Hours and you should go to him if you get stuck on HW (because you will, trust me). He will walk you through any problem and give you an outline of the solution. Sometimes, the problems are so hard, that Xi himself can't solve them on the spot (not knocking on Xi; he's really smart. I'm just saying the problems are that difficult). \r\n\r\nThe midterm was much easier than the problem sets, but still far from easy. One question on perfect hashing which worth 20 points could be solved only if you remembered a proof from his lecture slides. Most people didn't get it, so remember to read his slides thoroughly. Grading was fair, maybe a bit strict.\r\n\r\nFinal was similar to the midterm in difficulty and was a bit longer, but you had 3 hours which was plenty of time. I thought the final was easier, but I ended up getting a lower score on it than the midterm, so I don't know what to make of it.\r\n\r\nThe class had roughly 8 undergrads out of a 100 students, so be prepared to be lonely. There are PhD students in this class, so don't expect to ace it, though getting an A shouldn't be a problem if you put the effort into this class. I'm not sure if he curves undergrads separately.\r\n\r\nOverall, it's a good class. You will learn a lot and become much better at constructing solid proofs and thinking algorithmically. I think Xi is just as good as Stein, so feel free to take this class with him.", 
      "workload_text": "7 Homeworks (40%) : incredibly hard, take 20+ hrs each\r\n1 Midterm (30%) : medium-difficult, average was roughly 66 I think\r\n1 Final (30%) : similar to midterm"
    },
    {
      "course_ids": [
        462
      ], 
      "created": "Mon, 07 May 2001 00:00:00 GMT", 
      "id": 1097, 
      "professor_ids": [
        635
      ], 
      "review_text": "Pretty good course, considering you enjoy this material. His lectures are pretty good and material is presented in an interesting way. Some of the homework problems are pretty difficult, but doable. Grading is pretty good too. The only complaint is don't expect too much help outside the classroom. He pretty much ignores questions sent to him and doesn't seem to care too much outside the classroom.", 
      "workload_text": "problem set every 2 weeks, midterm, final. "
    }, 
    {
      "course_ids": [
        462
      ], 
      "created": "Thu, 04 Sep 2003 00:00:00 GMT", 
      "id": 6367, 
      "professor_ids": [
        1724
      ], 
      "review_text": "BY FAR the best professor I have had at Columbia. His lectures are very ogranized and he really makes an attempt to explain everything. He is a sincerely nice guy and actually cares whether or not his students understand the material.  Some of the stuff covered in this course is really complex, but he is able to break it down to make it more understandable.  He likes when students ask questions in class and he really tries to make sure he answers them sufficiently. He tries to get to know the names of all his students.  His office hours are really helpful...they were always packed when I took this class.  In a nutshell...this guy is awesome. ", 
      "workload_text": "Pretty crazy. 6 problem sets. They were all pretty hard but the last one was insane. Take home final which was relatively easy."
    }, 
    {
      "course_ids": [
        462
      ], 
      "created": "Mon, 15 Nov 2004 00:00:00 GMT", 
      "id": 9661, 
      "professor_ids": [
        1724
      ], 
      "review_text": "DEFINITELY the BEST professor I ever had at Columbia.  At the same time, he was definitely the HARDEST professor I ever had at Columbia.  I took computational complexity last semester and it was the hardest class I had taken.  However, because he was such a great professor, I decided to take computational learning theory, and now i can say that that is the hardest class I've ever taken.   However, if you're not afraid to face the challenge, you will find that he is an excellent teacher, and you will definitely learn a lot.  I definitely don't consider myself a very motivated learner, but I  think the hard work was worth it for these classes.", 
      "workload_text": "The styles of the problem sets were very similar in both classes (even though they pertain to very different subject matter).  In either class, you will have biweekly problem sets which will each probably take you several days to complete.   They consist of about 6 problems, and they are definitely not easy.  Your homeworks are to be typed up in LaTeX, and just to give you a general idea, mine averaged something like 7 pages each.  Computational complexity had 7 problem sets and a take home final which was basically just another problem set weighted heavier.  Computational learning theory had 5 problem sets and a final project, which is yours to come up with."
    }, 
    {
      "course_ids": [
        462
      ], 
      "created": "Fri, 02 May 2014 21:40:11 GMT", 
      "id": 29392, 
      "professor_ids": [
        2941
      ], 
      "review_text": "(I'm the author of the December 17, 2013 review of CS Theory with Yannakakis.)\r\n\r\nIn general, my take on this semester is the same as my review of CS Theory with Yannakakis, though this time the lecture hall wasn't so sleep-inducing. Yannakakis is not exactly an exciting lecturer, but charisma aside, he does everything he should: he chooses a good textbook, assigns homework that reinforces and expands a bit on the material, has a TA who grades fairly, provides good lecture notes online, and so on and so forth. My only real complaint is that the class overlapped a lot for the first month with CS Theory, but given how many people were confused by really basic issues about Turing Machines, I guess that wasn't Yannakakis' fault.\r\n\r\nI'd definitely take a third class with him if the opportunity presented itself.", 
      "workload_text": "Homework every other week (not terribly difficult), no midterm, a take-home final."
    }, 
    {
      "course_ids": [
        462
      ], 
      "created": "Sun, 18 May 2014 04:51:47 GMT", 
      "id": 29500, 
      "professor_ids": [
        2941
      ], 
      "review_text": "Computational Complexity with Professor Yannakakis is an excellent class.  This was my second class with him, the first being CS Theory in the fall, and with that said, I am confident that he is a good choice for any class he is teaching.  I will definitely take another class with him if the opportunity comes up.\r\n\r\nWhile he might not be a dazzling speaker, he is always well-prepared with very structured lecture plans and does a great job presenting the material.  The material is very well-motivated and he involves the class in his lectures by frequently asking questions.  He is able to thoroughly answer any question that comes up from the class.  There are few to no errors in the lectures, and detailed lecture notes are posted on Courseworks.  The textbook is the bible for the subject and it is well-written, but he doesn\u2019t strictly follow it, so it\u2019s really not necessary for the course.  \r\n\r\nThe homework assignments were also very well-written and unambiguous, and ultimately at the heart of the course.  I definitely learned a lot from working through them.  While this class is the natural follow-up to CS theory, one difference is that there are fewer formulaic problems that simply require following an algorithm.  Usually a bit of thought is required for most of the homework problems, but they\u2019re manageable as long as you don\u2019t leave them until the last minute.  Hints are generously provided for more difficult problems.  \r\n\r\nI agree with the previous review that the Turing Machine topic at the beginning of the course could\u2019ve been shorted.  Much of that material was familiar for CS Theory, and it was without doubt the least interesting part of this course. \r\n", 
      "workload_text": "Very reasonable.  There were 6 homework assignments, containing 5 problems each, worth 60% of the grade, and a take-home final exam worth the remaining 40% of the grade."
    },
    {
      "course_ids": [
        2970
      ], 
      "created": "Mon, 30 Aug 2004 00:00:00 GMT", 
      "id": 9343, 
      "professor_ids": [
        1621
      ], 
      "review_text": "If you don't your remember probablity and other math from Algorithms then don't bother taking this class because you'll get killed.  In other words, don't ignore the prerequisties for the class because the Prof. will assume that you're comfortable with all the concepts that she listed on the class website. Her lectures are not that good and neither is her handwriting. Fortunately, she makes everybody participate in this thing where in each lecture a student is chosen to take notes for the class. The student is then responsible for converting the notes into LaTeX or PDF and share it with the rest of the class. There are 6 homeworks and one final exam. The homeworks are pretty long so start early. They'll require you to do some mathematical proofs, encryption scheme design, and other theoretical stuff. Take this class only if you're really interested in Cryptography. ", 
      "workload_text": "6 hard homeworks, one final exam"
    }, 
    {
      "course_ids": [
        2970
      ], 
      "created": "Sat, 31 Dec 2011 06:43:20 GMT", 
      "id": 26794, 
      "professor_ids": [
        1621
      ], 
      "review_text": "A pretty good class. Prof. Malkin makes a point of offering both conceptual and formal treatments of the material, which in principle is nice (as just about every result in crypto is deeply counterintuitive); in practice, I found her lemma-proof-theorem teaching very clear, but the high-level explanations so vague as to be practically useless. Part of the issue was that a large portion of the class didn't really have the mathematical maturity necessary for this course, and she would get bogged down answering basic questions and then have to rush through material. She got better at this (i.e. stopped answering stupid questions) as the semester went on, but it remained frustrating throughout.\r\n\r\nHomework assignments were well-designed. Fernando (the TA) was a real stickler for rigor, and I definitely learned to be more careful about writing up proofs by the end of the semester. Midterm (in class) and final (take home) were both trivial; I don't know what the final average was, but due to the aforementioned mathematical maturity problem midterm scores were shockingly low.\r\n\r\nAs a side note, this can be a great class even if you're not specifically interested in security. I was in learning theory at the same time, and my final project for that class relied on a bunch of cryptographic hardness assumptions---this is about a lot more than secret codes.", 
      "workload_text": "Light. A problem set once every couple of weeks that usually took me 2-3 hours (including typesetting). Don't cut corners on your proofs."
    },
    {
      "course_ids": [
        2387
      ], 
      "created": "Wed, 10 Dec 2003 00:00:00 GMT", 
      "id": 7055, 
      "professor_ids": [
        47
      ], 
      "review_text": "This is a spectacular class!\n\nIt's officially limited to 30, and there's a chance you'll have to compete somewhat for a spot in the class, but that's rare - my class had 23 or so people at the beginning, and ended up at 21 for the bulk of the term.\n\nUnlike most CS classes, Programming & Problem Solving is a discussion-based class.  There are four projects across the term (each covering about 3 weeks).  There are 5 discussion classes per problem (in which the class demos their latest solutions and discusses their approaches), and one class where each group presents their report.\nGroups are randomly determined, but you can request to work with particular students (but you can only work with each person on ONE project).  The groundwork for the problem-solving has been done for you - the TA provides the class with a simulator program and the interface for your code to use, so you can dive in and typically write a simple/naive solution to the problem in twenty minutes or so, leaving you most of the project time to create and implement more complex solutions - there is almost no setup work.\nThe class works on full disclosure and full sharing - you can take any code you find online and use it, as long as you say you did, and you can rip off your classmates as much as you want, as long as you credit them for what you ripped off.\nOne of the great things about this class is that it brings you into a group of some of the best minds currently studying at the school.  It will have you thinking differently about all sorts of problems.  The other great thing about the class is how I always left the discussions wanting to work on the project - unlike most classes where the assignments are fairly arbitrary, you have a great deal of leeway in the deliverable, and typically you have something you want to try.\nI would recomend this class to anybody who feels comfortable with a discussion-\noriented problem-solving case study.\n\nAlso, I would reccomend Professor Ross' databases course - he is an excellent professor.", 
      "workload_text": "It really varies by both your group and how much work you want to put into the class.  However, the more you put in, the more you get out.  And you'll probably find you want to work more for this class than your other classes."
    }, 
    {
      "course_ids": [
        2387
      ], 
      "created": "Mon, 15 Dec 2003 00:00:00 GMT", 
      "id": 7129, 
      "professor_ids": [
        47
      ], 
      "review_text": "As you can read on CULPA and the SEAS Oracle, students who have taken this course generally have lots of positive things to say about it, most of which are absolutely true.\n\nHowever, because the course places such a huge emphasis on collaboration and the interchange of ideas,  what you get out of it varies greatly with the competence and creativity of your fellow classmates.  For some reason, Prof. Ross seems convinced that the course \"self-selects\" smart people, that those enrolled in it are naturally highly critical/creative thinkers.  This may have been true for past offerings of this course, but I did not find it to be the case when I took it.\n\nOut of 22 students, maybe 8 regularly produced creative, original ideas and could competently implement them.  Most of the others were pretty average, while a few people were just plain dumb, lazy, or both.  This may sound harsh, but when you find yourself teamed up with one or (gasp) two of these people and have to think through an inventive problem solution, code it, and write the final report all by yourself, you *will* feel your urge to kill rising.  Also bear in mind that all members of a group receive the same grade, and there is no formal peer review process.\n\nI still recommend this course; it has several important merits that others have mentioned, and what you learn in it will stay relevant long after you forget the intricate details of distributed transactions or lambda calculus.  If you put in the work, you will walk away content unless, like me, you don't suffer fools gladly.  If you don't put in the work, you will still do relatively well at the expense of those who do.", 
      "workload_text": "Up to you.  You are, of course, encouraged to put in an equitable amount of work, but there do not seem to be any serious repercussions for those who do not."
    },
    {
      "course_ids": [
        2386
      ], 
      "created": "Mon, 24 Nov 2003 00:00:00 GMT", 
      "id": 6861, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Excellent course taught by an excellent professor! The course revolves around the idea of teaching a computer to extract information from visual images, such as the position of an object, the position of edges, shape/depth of a scene from multiple images. Some of it will make you rethink the many things we as humans take for granted, and Shree likes to insert pertinent biological/philosophical/tech-biz tidbits that encourage an appreciation for the material beyond a purely CS perspective. The underlying theory could potentially get very mathematical, but Shree avoids that and focuses instead on the general ideas and principles. In sum, the subject material is interesting, challenging at times but rarely impossible.  As a teacher, Shree is one of the best out there. He is entertaining, funny, and very dedicated to making sure we learn. He is also a very effective lecturer with excellent presentation. So, although he is quite a busy man (a lot of conferences to attend) and had the TAs teach a couple of classes, I feel that we learnt more in his classes than usual.  All in all, a great experience and highly recommended.", 
      "workload_text": "5 HW assignments, each of which involves both writting exercises and 3-5 programs. Programs can be challenging, but again there's nothing impossible. Shree and the TAs are very helpful. If you keep up with the class and don't procrastinate, you will be fine."
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Wed, 10 Dec 2003 00:00:00 GMT", 
      "id": 7054, 
      "professor_ids": [
        1812
      ], 
      "review_text": "I loved this course.  Professor Nayar is an excellent lecturer.  He provides the class with handouts containing almost every slide he uses (yes, he uses slides on a projector, which is usually a bad sign, but he pulls it off well)... over 400 pages per student across the term.  This minimizes how much you have to take down in terms of notes, and allows you to spend more of the lecture making sure you understand, rather than copying down diagrams.\nI have to agree with the previous review: Professor Nayar's digressions are always interesting, and regardless of whether they help understand the material, they help understand the motivations, or how vision works in humans.\nIt's not an easy class, but if you come to lecture all the time and pay attention, you shouldn't have trouble with the homeworks... \nthe midterm and final may be a different matter though.  However, the professor and TAs are very helpful in office hours.", 
      "workload_text": "The homeworks aren't so bad... 5 or 6 of them, and I found that the programming actually got easier as the term went on (after the third homework).  However, the midterm and final were... insane, I thought.  The best study advice I can give is:  If you think there's no way it'll be asked, memorize it."
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Wed, 16 Jan 2008 00:00:00 GMT", 
      "id": 20826, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Prof Nayar is a natural. He is clear and cogent and drives all the relevant points home. Be sure to hang on to every word he says, because its generally very deep. If possible, make notes on top of the slides he gives, they make it easier to understand them when you study for the exam. This is a no-nonsense course, only relevant stuff is taught. Therefore, read the slides very thoroughly. Its not much to read, compared to the Horn book which is quiet abstruse. The class is a great learning experience. Particularly because of the simplicity that Prof Nayar brings to it. If you ever have anything remotely close to Vision take this class. If you don't, take it to experience what a great teacher is like.", 
      "workload_text": "5 assignments. If the first freaks you out, hang in there, things just get easier. Overall assignments are easy. The slide handouts are all you need to prepare for the exams, and yes, some presence of mind."
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Tue, 04 Mar 2008 00:00:00 GMT", 
      "id": 21026, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Professor Nayar is tied for my favorite professor.  The main reason I believe he is so good is because he conveys material in an extremely concise, understandable and well-spoken manner and really knows the subject inside-\nout.  He is also very approachable in person and makes an effort to know students on some basic level.\n\nThe only thing that was a little weird about the vision class was the lack of math -- it was all in the slides but there is essentially no math in the entire class, which is in sharp contrast to the textbook.  In addition, the first homework is pretty ridiculous in many ways and shouldn't be considered as a measure of the class' overall worth.\n\nProgramming assignments are engaging, and exams are very fair.  Prof. Nayar makes use of the entire spectrum of scores on exams, and I feel gives proper questions to let those who understand subjects thoroughly to stand out.  The one complaint about them is that he does not even give a format for the exam, let alone sample questions -- this was very nerve-wracking for me personally but it ended up OK in the end.", 
      "workload_text": "The workload for the class is VERY front-heavy, so just get down and dirty early to enjoy the freedom from work at the end of the semester.  It can definitely be a more difficult workload, but not too bad."
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Wed, 16 Apr 2008 00:00:00 GMT", 
      "id": 21143, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Professor Shree Nayar is the best professor I met at Columbia.  The course is very informative.  He gives great lecture with a sense of humor.  The TA are very helpful.  The assignments are not that hard but yet gives you a sense of how things really work.\n\nI highly recommend this course to anybody who has interest in vision/graphics.  It's a must for students in vision/graphics track.\n\nHighly recommended.", 
      "workload_text": "Not bad.  The assignments are getting easier after the third one.  But you need to spend lots of time on the slides to make sure you really understands the materials.\n\nFinal and midterms are well organized."
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Wed, 12 May 2010 20:33:20 GMT", 
      "id": 24370, 
      "professor_ids": [
        1812
      ], 
      "review_text": "I can see why people like him, but the material is extremely difficult, beware!\r\n\r\nHe makes lectures interesting and funny, but he glosses over important concepts and you never feel like you understand anything until the difficult midterm and final come around. You'll have to study your ass off just to pass.\r\n\r\nThe programs are a lot fun. They take some thinking, but overall they're well-structured and very useful. The theory questions on homeworks are impossible.\r\n\r\nWhat's very unfair about this course though is that you can't recover from a single bad grade on anything (hw, midterm, or final). A single mess-up will glare at you on your final grade, not to mention that the curve is very small. The difference between letter grades is very slight, only a few points will be bump you up from a B+ to an A (notice there's no A-). But only a few points will drop you down from a B+ to a B-.\r\n\r\nUnfortunately he grades strictly by the numbers, and no amount of asking questions in class, going to office hours, or demonstrating grade improvement throughout the semester will factor into your final grade. He has no problem setting the average to a low grade.", 
      "workload_text": "5 homeworks (they get easier over time)\r\n1 midterm (impossible)\r\n1 final (difficult)"
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Sun, 18 May 2014 06:56:07 GMT", 
      "id": 29503, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Possibly the most difficult class in the CS department. \r\n\r\nProfessor Nayar is also possibly the best professor in the department. Great lecturing style, clearly super intelligent, and genuinely does his best to make sure we understand the material. That said, we cover a lot of material in this class, and preparing for the exams is hellish. The exams generally cover some of the easier concepts in the class, but it's also easy to lose points on proofs and there are also quite a few questions where you just have to remember a specific detail or some model which you otherwise can't derive on the spot. No way around some of this stuff unless you put a lot of time into memorization of the material.\r\n\r\nHomeworks are great! They're done in MATLAB now (I think he said they were in C until a couple years ago), so they're constantly evolving - Nayar admits as much himself, especially that he put a lot more material in the class and on the HWs this semester. This is not a class you want to procrastinate on (nor can you afford to). If you start the night before, you may stay up all night, and just not be able to finish due to the difficulty of some of these homeworks. You should start at least a few days before so you have time to consult the TAs because you will inevitably run into MATLAB bugs, amongst other issues with understanding the Vision algorithms themselves.\r\n\r\nYou should probably attend every class because Professor Nayar doesn't post any of the material on courseworks. The TAs print out all the lecture slides and you pick up one of these packets at the beginning of each class. These are literally just printouts of the slides, so you'll want to take miscellaneous notes and comments based on what the professor says while presenting each slide.\r\n\r\nWe didn't receive any information about the distribution of grades this semester, so I can only comment that my grade was definitely lower than expected. A few people have said the same thing about their grades, but we can't make any generalizations. Just know it's a hard class - if you get a low grade, don't worry too much about it because this is one of the best, most useful classes you'll take in the CS@CU department, from one of the best professors around.", 
      "workload_text": "5 homeworks (1-3 non-programming, 1-2 programming problems per HW). HW is 50% of your grade. Midterm (15%), Final (35%). Homework could take anywhere from 5 to 40 hours per assignment. Writing the skeleton code for basic functionality doesn't usually take too long if you understand the algorithms/concepts to use, but there are always faster and better ways to implement certain things. Whether it's MATLAB vectorization or clever use of convolutions, you have to think things through pretty well to attain top marks. This takes time, and can cause problems if you're not already familiar with MATLAB syntax and other tricks. "
    }, 
    {
      "course_ids": [
        2386
      ], 
      "created": "Sun, 08 Jun 2014 06:39:27 GMT", 
      "id": 29624, 
      "professor_ids": [
        1812
      ], 
      "review_text": "Vision was the most rewarding class by far. Prof. Nayar is funny, smart and makes lectures very interesting. He has an answer to all of your questions. He likes discipline, mind you, but is not that fanatic about it.\r\n\r\nYou cannot miss any of his lectures as the slides will stare at you when you prepare for the midterm or final. You get printed slides so you just need to take down additional notes (if any).  In Spring 2014, he tried a lot of new material and so the overall workload increased exponentially after midterm. He also took feedback post midterm and in the last class to update the class materials. There were review classes in the lecture before the tests which were quite helpful, if at all you started preparing!\r\n\r\nIt helps to have a study group as making sense of each slide takes up a lot of time although everything seems like a breeze during the class. TA's were very helpful. Thomas was a little picky in giving points but used to explain important concepts easily. You won't understand where exactly you lost points but they do indicate the relevant challenge number. Though programming in MATLAB seems easy, debugging is a headache. Make sure you proceed step by step. Just a tip: avoid built in functions unless you are completely sure of what they return. Getting a working solution was not enough to secure full points. You need to provide a 'smart' solution.\r\n\r\nI was taking Computer Graphics along with it and I must say a lot of my fundamentals got cleared through this class. His 'Math Primer' slides were just mind-boggling. Everything was explained in such an elegant manner. Overall, \"you get a lot for the tuition you pay\" in Prof. Nayar's words!", 
      "workload_text": "Heavy. 5 Homeworks (1 Theory, 4 Programming + Theory) + Midterm + Final.\r\n\r\nYou generally have more than two weeks for each HW. No late days. First assignment had basic MATLAB intro but some challenging theory questions. Second one was the toughest for me and I lost a lot of points since I started just the night before. Rest of the HWs were decent and rewarding provided you start early i.e. the previous weekend or so. You implement a panorama stitcher, refocusing app...how cool is that!\r\n\r\nMidterm as well as the final were not tough but there were few challenging questions to identify people who could think a little out of the box. Overall the avg was quite high ~ 20/30 midterm and ~ 35/48 final."
    },
    {
      "course_ids": [
        2403
      ], 
      "created": "Mon, 15 Dec 2003 00:00:00 GMT", 
      "id": 7122, 
      "professor_ids": [
        37
      ], 
      "review_text": "First off, I took Data Structures with the guy too.  Everyone who wrote a bad review of this guy is rather stupid.  Swing interfaces are key parts of every assignment involving Java after Data Structures.  Furthermore, copying code to create the data structures is fine - it's a matter of using them - why do you think the class is considered a difficult one for many?  Because they don't know how to copy properly?\n\nBut I digress.  Robotics is Allen's specialty, and he clearly shows he knows what he's talking about.  The class has some rather cool aspects about it, including the use of a robot simulator.  You actually apply concepts from linear algebra to something.  Furthermore, it gives a solid background to what kinds of projects are going on in robotics.  Some of it is basic at first, but it gets better as it progresses.", 
      "workload_text": "The workload is fair and requires a bit of time, but most written assignments can be done in a night.  Programming assignments take a bit longer, but they're pretty cool after finishing them, unlike many CS classes that offer useless programming assignments."
    }, 
    {
      "course_ids": [
        2403
      ], 
      "created": "Thu, 06 Oct 2005 00:00:00 GMT", 
      "id": 12824, 
      "professor_ids": [
        37
      ], 
      "review_text": "I had Prof. Allen's class right after Prof. Rocco Servedio's class. The contrast could not have been clearer -- while Rocco is a clear and competent lecturer who is quick on his feet and always able to answer questions, Allen is a bumbling, incompetent waste of time. He was never once able to answer any questions posed to him in a way that suggested he understood either the question or even the material. His lectures were disorganized, rambling, and unintuitive. He is far and away the worst professor I have ever had at Columbia Computer Science (and perhaps tied for worst ever at Columbia). ", 
      "workload_text": "Not too bad. A number of time consuming programming assignments, but they're fun."
    }, 
    {
      "course_ids": [
        2403
      ], 
      "created": "Mon, 14 Apr 2014 04:56:30 GMT", 
      "id": 29326, 
      "professor_ids": [
        37
      ], 
      "review_text": "The homeworks are relatively easy, the projects are \"fun\" (in that nerdy way that CS kids love), the classes are not really necessary to go to after the linear algebra sections have been covered, but the midterm and final are kind of bullshit. Allen only gives you a general overview of what might be on it, without a practice test, and the questions on it are weird; often testing cursory knowledge of subjects not covered in any assignment or project. It felt like the final was \"trying\" to be harder than the rest of the class just to achieve a nice grading curve.\r\n\r\nThat said, here are the pros:\r\n\r\nYou get to program for an actual, real-world machine, which is something you don't really get to do in many other classes. It's a different kind of debugging when you have to find out how slippery a certain floor is and factor that into your motion calculations to account for drift. \r\n\r\nYou also get to use linear algebra in a very practical way, (It really cemented a lot of the fundamentals I had only weakly grasped after taking intro to Linear Algebra). Lastly, it also serves as an intro to Computer Vision as well, some of the later homework assignments require you to mount a camera on the robot and do image processing to solve certain puzzles.\r\n\r\nIn summary, it's a class that kind of feels like an easy-A class despite having a respectable work-load (the projects) and arbitrarily difficult exams. Allen is a lenient grader for the projects, but not for the midterms. This is definitely an \"application\" class, not really a \"theory\" class. Take it if programming a Roomba sounds like something you would like to do; for all its flaws I enjoyed it well enough.", 
      "workload_text": "Respectable; it's a class with a programming workload, expect to be submitting things at 11:55pm on the night they're due at least once or twice."
    },
    {
      "course_ids": [
        1921
      ], 
      "created": "Mon, 19 May 2003 00:00:00 GMT", 
      "id": 5769, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Allegedly Columbia's resident machine learning guru, Jebara is an extremely mediocre professor.  The lecture slides were unhelpful at best, and he basically just reads off of them during lecture with some supplementary doodling on the blackboard.  Still, he's a nice guy who will be happy to explain stuff in office hours, but I found the books to be the most helpful, especially for the homeworks.  As for the course, be ready for A LOT of stat and linear algebra before you get to the good stuff.", 
      "workload_text": "Four cookbook homework assignments using MATLAB (start early), a moderately difficult midterm, a virtually impossible final, and an open-ended project/paper.  "
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Mon, 26 Jun 2006 00:00:00 GMT", 
      "id": 15167, 
      "professor_ids": [
        1636
      ], 
      "review_text": "One of the worst professors at Columbia.  Not a mean guy, by any means, probably a genius in his field, yet not a very effective lecturer.  Be sure to know your linear algebra and calculus cold because this is what this course is all about.  If you're a statistics major, all the better, the course will be a breeze for you.  All the rest, keep out.", 
      "workload_text": "Not too bad, if you understand the material."
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Fri, 16 Feb 2007 00:00:00 GMT", 
      "id": 18687, 
      "professor_ids": [
        1636
      ], 
      "review_text": "My opinion is opposite to that of the other two reviews. While I do not rate him as the best guy in the department, he is not as bad as the other two reviews suggest. Machine Learning is a specialized field, unlike other core cs courses, it is interdisciplinary. It does need a good background in Linear Algebra, Calculus and a bit of statistics. WIth the right background, if the course is taken, the course is really enjoyable. Some of his slides are really good (again if you have the right background needed). Compared to Machine Learning home works given at other schools by other professors, his home works really make you understand what you implement. Overall I would give an A- for his course. I would like to stress that you need right background and interest to appreciate his classes", 
      "workload_text": ""
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Wed, 02 Apr 2008 00:00:00 GMT", 
      "id": 21074, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Nice guy, a horrible professor. The main problem is that he tries to fit way too much information into slides and is so boring that you stop caring about the course. He also interlaces examples while introducing examples, which may seem like a good idea, but Prof. Jebara introduces them at such bad times that you don't learn anything. \nAlso, the homework is embarrassingly easy and you don't learn anything, so by the time exams roll around, you don't have a clue what happened in the class.\n\nBefore people spout off bullshit about how machine learning is hard, try to find a lecture about ML by Andrew Ng (Stanford), Michael Jordan (Berkeley), or Tommi Jaakkola (MIT), or for a different flavor Carlos Guestrin (CMU). All the classes they teach cover more material, but the students are able to understand more material and understand it better.", 
      "workload_text": "Two bad exams, 6 joke homeworks"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sun, 16 May 2010 00:02:00 GMT", 
      "id": 24411, 
      "professor_ids": [
        1636
      ], 
      "review_text": "There's a lot of debate on the background required to take/enjoy this course. Let me give you mine: Linear algebra (important, forgot), Gradients/Hessian (slightly important, forgot), diff/integ of exp, log, poly (important, very good), Probability (most important, Very good), Statistics (not needed, forgot), Optimization (slightly important, none), MATLAB (most important, none). Do not let people intimidate you, you can still do very well in this course by honest effort. Besides Prof. Jebara is a very good and considerate teacher who buffers his lectures with essential background material. \r\n\r\nI'm puzzled with the other reviewer's comments regarding the material with respect to Ng et al. The combination of topics such as SVMs, VC Dim, graphical models and Back propagation is rare. Digging deeper, 6.867 at MIT is very similar in scope.\r\n\r\nHis slides are a work of art! Beautifully thought out with rich visual cues.\r\n\r\nTAs were brilliant (Pier Francesco Palamara and David Bondatti). Patient, welcoming and knew the material inside out.", 
      "workload_text": "Very well designed assignments. These involve translating/extending the equations in class to new distributions and settings and implementing them in MATLAB for a non-trivial data set. I feel very happy doing them because I know I will know EM, Junction Tree etc. inside out rather than wrestling some artificially hard time drain. Exams are challenging but fun! Make sure to get plenty of sleep and work out the practice exams WITHOUT referring to your notes."
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Wed, 27 Apr 2011 19:04:08 GMT", 
      "id": 25772, 
      "professor_ids": [
        1636
      ], 
      "review_text": "One of my least favorite classes at Columbia.  I am sure the professor is a genius in his field, but it was not well executed or translated to undergrads.  The lectures were dry at best - the class was not engaged.  The lectures were very repetitive - you realy only needed to go to every other class as he spend the first half reviewing and the second half teaching (though I did go to every class).  The slides were confusing with too much information crammed into them.\r\n\r\nThe teacher was not very approachable - I went to his office hours but he was unable to explain the proof in question to me.\r\n\r\nMuch of the course was over my head, in part because the prerequisites did not prepare me.  Iw as not alone in this, but the course was not taught with this in mind.\r\n\r\nThe TA's were horrendous at best.  The did NOT understand teh material.  I would usually start the homework the day it was assigned - if I went to office hours then I was told I was working too early and they were not yet expected to understand the homework.  I was also very annoyed when, after a homework had been live for a week (and I had completed it) it was changed.", 
      "workload_text": "Exams were impossible - no idea where he got the concepts from\r\n6 decently straightforward homeworks"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Thu, 12 May 2011 03:43:43 GMT", 
      "id": 25956, 
      "professor_ids": [
        1636
      ], 
      "review_text": "This is a very difficult course made much worse by the fact that he simply can't teach.  From what I understand he is very good in his field, but that does not translate into the classroom.\r\n\r\nThe lectures are confusing and the slides are difficult to understand.  He spends slide after slide on the easiest parts and then glosses over the more difficult concepts because they're \"obvious\".  I and a lot of other students in the class didn't bother to use our notes and materials from his lectures to prepare, instead using the freely available materials for the Stanford machine learning course.  It's absurd how much better they are.\r\n\r\nJebara isn't very approachable.  If you look at his personal web page he has about ten different places where he says he's busy and can't be bothered.  The TA's are hit and miss - there are one or two that are good and will actually try to help, but the rest aren't that great.  I'm pretty sure one of them never actually held office hours.  He just sent out an email that he was canceling every week.\r\n\r\nAlso, there was a really strange incident that stuck out at me: on one of the homeworks one of the TA's announced they thought there was a lot of cheating going on, as they got a lot of almost identical submissions (something like 40 out of 130ish students), and their response to this was to take a few points off the grade of any student with one of those suspicious homeworks who asked for a regrade.  It just falls in with the fact that, as a general rule, the professor and TA's for this class just can't be bothered.", 
      "workload_text": "5 deceptively difficult homework assignments - they seem simple, but you have to look up a lot of math\r\n1 unholy difficult midterm - I thought I was pretty prepared, but there were a lot of hard concepts combined, along with the requirement of doing a lot of big matrix operations we'd been doing in matlab by hand.  Not fun.  For one 20 point question, I got 0 points and a frownie face as the only explanation.\r\n1 final that I'm fairly sure will be a crime against humanity\r\n"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sat, 14 May 2011 14:30:43 GMT", 
      "id": 25999, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Warning: this class should be an applied math course. I attended lecture frequently but learned nearly nothing, and the slides were incomprehensible. He assumed a level of math that was not reflected in the prerequisites whatsoever, but at the same time, he oversimplified some things to the point of being confusing: he explained what an integral was but then, a few lectures later, used Lagrange multipliers without a single word of explanation. The homeworks were nigh impossible, and the midterm was about tangential mathematical properties of the equations that we based algorithms off of. This course is by far the worst grade I've gotten at Columbia, despite the effort I put in.", 
      "workload_text": "Five homeworks that take around 6 to 10 hours each."
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Thu, 19 May 2011 02:16:33 GMT", 
      "id": 26119, 
      "professor_ids": [
        1636
      ], 
      "review_text": "The topics were extremely interesting. All of the readings were fun and understandable. Unfortunately, the class was enormous with about 200 people and the lectures took a hit.  The instructor had no clue where most of the class was, and questions were rare. The lecture slides and lectures assumed reading ahead of time, and half of the class seemed to be behind. I got an A+ and I didn't do anything special other than read ahead in the book. The class doesn't lost as prerequisites but should MATLAB, optimization (Lagrangians, subgradient and gradient methods, etc.), graduate probability ( measure spaces, Bayes, and conditional/causal reasoning, etc.), lots and lots of linear algebra, and differential equations. It felt like he was trying to fit an entire career of ML into one semester.  \r\n\r\nSome I sat next to in class were from basketweaving departments like OR or Business.  This is definitely a math or statistics class. ", 
      "workload_text": "Five very challenging homeworks. They would have taken much longer, but the answers were all online from previous years."
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Wed, 06 Jul 2011 08:20:25 GMT", 
      "id": 26290, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Most of the reviewers from spring 2011 class have got it right about the lecture style of prof Jebara. He simply can't teach. I think the prerequisites are enough to prepare you for the math covered in the material; you will have the opportunity to explore more of differentials applied to matrices, lagrangian and bayesian probability. \r\nFor me it was pain attending lectures as I could hardly follow him. I guess his lectures were hampered by the size of the class. He would always seem to be in a hurry to cover as much material as he could without really caring whether students understand any of it or not. Like many others, I had to rely on online lectures from Stanford to build a proper understanding of many concepts covered in the class. What a shame! \r\nAssignments do well in helping you get the feel of the concepts but are not substantial enough to endow confidence to tackle hard problems. Mid-term was a disaster. Final exam was good, I thought.\r\n", 
      "workload_text": "Five assignments, a midterm and a final exam. Assignments have programming (in matlab) and non-programming (math) problems. Most of the problems in assignments test basic knowledge, therefore doable in couple of hours. Some (in most cases non-programming problems) are extremely difficult and you would spend days pondering and not get an answer."
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sat, 26 Jan 2013 13:01:23 GMT", 
      "id": 28050, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Top 5 (out of 1,024) reasons to avoid this course at all costs:\r\n\r\n1. No matter how much Prob/Stats or Linear Algebra or just MATH in general you *think* you know, you're not ready for this course (especially if you're an undergrad.. if you're a superstar Ph.D student, make your own judgement).  For example, on one of the homeworks, we were asked to perform vector calculus, which is usually not covered in any of the prerequisites. Another example is when we were asked to do multiple indefinite integrals of a particularly long formula, by hand, during a midterm as a problem worth 20% of the grade.\r\n\r\n2. He goes through very few examples in class, (and when he does, only a select few understand him) which means that most of the homework problems you have absolutely no idea how to do, even if you took the best notes humanly possible in his incredibly dull lectures. For this reason, academic honesty in its strictest definition (no looking through internet for answers, no collaboration on homeworks) is nowhere to be found, because it is impossible to do 90% of the workload in this class otherwise.\r\n\r\n3. He can't teach. I will leave it at this because no other words can describe how truly bad he is.\r\n\r\n4. Since this isn't an absolute requirement for any tracks (even for AI, you can take much better courses such as Spoken Language Processing), you can do yourself a favor and take this same course on Coursera or other excellent online alternatives if you would really like to learn Machine Learning. This is more ideal since Jebara's class is the least efficient place to do any learning.\r\n\r\n5. http://www1.cs.columbia.edu/~jebara/ Look at his picture. He is smiling smugly at the pains you will have to go through to survive in his course.", 
      "workload_text": "5 Homeworks (5-20 hours of RESEARCH, because you ain't solving these with what you \"learned\" in class)\r\n1 Midterm (Average was around 50)\r\n1 Final"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sat, 14 Dec 2013 21:27:07 GMT", 
      "id": 28865, 
      "professor_ids": [
        1636
      ], 
      "review_text": "Machine Learning by Prof. Jebara was an excellent class. There are not many graduate classes at Columbia where you feel you have learnt your money's worth. Trust me, this is one class where you will feel challenged and inspired. Prof. Jebara is good with giving intuitions about many things, picking examples from Vision, Genomics, NLP. You many find this course \"hard\", or \"uninteresting\", if you thought ML is \"cool\", or the sole image of Machine Learning in your head is from ML class by Andrew Ng on Coursera. This is a very maths based course, and he mentions this in the first class, and urges people to drop if they can't handle it. I guess it is fair on his part, to announce that the maths will be slighty tough, I wouldn't say even tough, just different. This course will help you a lot, if you want to read Machine Learning papers, do research in the field, because there is some very odd notation involved and the course will teach you that. My vote is take this course, if you are ready to dive into hour long lectures of Mathematical Proofs, but if you are upto it, this will be a great course.", 
      "workload_text": "5 Assignments : Assignments are actually easy, programing ones might take time depending on how familiar you are with matlab\r\n2 quizzes, \r\nMidterm:easy"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sun, 11 May 2014 21:31:54 GMT", 
      "id": 29449, 
      "professor_ids": [
        4057
      ], 
      "review_text": "If you find Itshack Pe'er teaching Machine Learning, avoid it, unless you know most concepts of ML in advance. \r\n\r\nWeekly assignments wasted most students hours and hours without any progress. The wording of assignment was very vague. To make situation worse the TAs were constantly unresponsive so you can't get clarification in time (and after the midterm they closed Piazza). \r\nThe two quizzes, contained T/F questions, suffered same vagueness. \r\nThe midterm question is interesting and good. although the grading of midterm is not very fair. it was OK. \r\nI have not taken the final exam yet, but the mock final seemed completely different to assignments and quizzes, to the extend that you might think it was for another course. ", 
      "workload_text": "weekly assignment (not easy!) + 2 quizzes (with 1 page cheat sheet) + 1 final + 1 mid"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Thu, 22 May 2014 00:32:05 GMT", 
      "id": 29522, 
      "professor_ids": [
        4057
      ], 
      "review_text": "Prof. Pe'er is really well-intentioned, and it's clear that he cares a lot about his students. I took a lot away from this class, even though it was a struggle. That said, DO NOT take this class if you're not remotely interested in machine learning - it's _not_ worth it. There are several other breadth/AI track courses that are (possibly) more interesting. If you _are_ interested in the subject, however, I'd definitely recommend taking this class with him instead of with Prof. Jebara. \r\n\r\n1) Teaching: If you have trouble staying awake in classes where professors speak really slowly/if you've ever been in one of the Mudd classrooms and know how boring they are, BRING COFFEE/TEA/anything that keeps you awake. Prof. Pe'er speaks really slowly, so much so that when you play his lectures at 1.5x speeds (they're all on CVN, which is great), it sounds like most people speaking at a normal pace. \r\n2) The material: While the class is very math-heavy (as are most courses on machine learning), Prof. Pe'er is very generous with his use of examples to provide better intuitions for the concepts/algorithms covered, and even tries to do live demonstrations to help make the math clearer. Some lectures and topics have a very steep learning curve even if you have the prerequisites covered, but I learned a tremendous amount from this class and I don't think I would have gotten that much from Prof. Jebara's far more theoretical approach. \r\n3) Homework: The homework is time consuming, not because each individual assignment is long, but because there are assignments EVERY WEEK. The assignments are hard, so starting in advance is essential (which means you're usually working on ML assignments 4 days a week at least), and responses on Piazza from the TAs are erratic and come in waves, so they're not reliable. Prof. Pe'er does allow group work with some constraints, so that usually makes working on assignments easier. But START EARLY. The assignments are also usually vaguely worded, which was a pain to deal with.\r\n4) The tests: This was the most confusing part of the class. I think Prof. Pe'er experimented with a lot of testing styles because it was his first time teaching this class. (Either that, or he always throws 4 different testing styles at his students in all his other classes too because he thinks it builds character.) \r\n- Quizzes: multiple choice, where any number of choices could be true or false, and you lost points for either answering wrong or not answering at all. (So really, you had a 50% chance of getting it right anyway..) The questions on the quiz were theoretical and just requierd you to know the concepts, and some involved doing some basic calculations/inferences.\r\n- Midterm: Easily the best test in this class. It was take-home and entirely programming, with 50% of the grade going towards an explanation of your approach. I think the grading was pretty fair - you got graded on the performance of your approach for the programming part, and the quality of your approach for the explanation. Very straightforward and doable in the 4 day timeframe given.\r\n- Final: This came out of nowhere - the questions on the final ranged from proofs to algorithm creation to calculations - basically a very, very difficult exam. He gave us a practice final that, as it turned out, exactly resembled the actual final, but it still gave us no way to prepare, given that all the testing methods we'd had before were so different. It was almost impossibly long (though challenging and very interesting, required you to actually apply knowledge to real-world problems).\r\n\r\n5) The curve: VERY generous curve. Another reason to definitely take this class with him and not Prof. Jebara. I think he really recognizes how hard he makes the class (in terms of workload, learning curve, difficulty of final) and curves to a high-ish B+. A large percentage of the class got A-range grades. \r\n\r\nAgain, this is a professor who really cares about his students and the effort they put in, and isn't just looking to make this class frustrating and impossible. In general, he's very very responsive to feedback, even takes reasonable requests for class-wide extensions, and always tries really hard to make sure ever single student understands. I haven't had many 4000-level classes where that's the case, so this was refreshing. The class is still extremely frustrating, but ultimately rewarding if you like the material and put a lot of effort into the work.", 
      "workload_text": "Homework: 10 assignments (1 really simple setup assignment which includes a small Matlab script), 1 per week, all in Matlab  (25%)\r\nMidterm: Programming with an explanation of approach (25%)\r\nQuizzes: Two (a few weeks before and after the midterm) - multiple choice with any number of true/false options, theoretical (20% total)\r\nFinal: Impossibly long and very challenging final with lots of application- and theory- based questions. (30%)"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Tue, 27 May 2014 16:42:24 GMT", 
      "id": 29586, 
      "professor_ids": [
        4057
      ], 
      "review_text": "Machine Learning by Prof. Pe'er was an excellent class. The course was well structured, however the course load was pretty heavy. Nonetheless, the assignments and mid-term made you learn a lot. \r\n\r\ncons :-\r\n1. The problem explanation in the assignments were vague at times. The TA's were irresponsive most of the times, thus most of the times went struggling with the problem statements.\r\n2. It was difficult to follow prof in class, but hey, the lectures were recorded on CVN!\r\n\r\npros :-\r\n1. The prof was very approachable and cared for his class.\r\n2. He atleast tried to make sure that everyone gets the concepts right.\r\n\r\nIn a gist, i'd recommend this class to anyone who wants to learn machine learning in a way such that the intuition and math behind the concepts is both clear.\r\n", 
      "workload_text": "~12 assignments(weekly) + 2 quizzes + midterm(take home, was sheer fun) + final(impossible)"
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Tue, 03 Jun 2014 18:42:58 GMT", 
      "id": 29610, 
      "professor_ids": [
        4057
      ], 
      "review_text": "Machine Learning is a fascinating subject and is clearly a very valuable subject to know about. However, our class was very unfortunate to have been taught by Professor Pe'er. He is by far the worst professor I've ever had in my academic experience. To add insult to injury, he is very unapologetic about the way he manages things and treats his students unfairly. \r\n\r\nAssignments:\r\nEvery assignment included grammatical errors and unintelligible sentences in addition to mistakes in the problem descriptions. As a result, 1-2 day assignment would turn into a week-long affair. Future assignments are also based on answers to previous ones even though the class was not given the solution to the previous assignment. As a result, students who might have had incorrect answers in the previous assignment would unknowingly have errors in the next assignment.\r\n\r\nMisinformation:\r\nProfessor Pe'er likes to portray himself as a fair individual but time and time again did he prove us wrong. Our first quiz was multiple choice test where correct answers were given 3 points and incorrect negative 2. However, the class was not told that leaving answers blank would result in negative marks too. Another example of this kind of behavior was demonstrated when he ran a poll to decide whether assignments should be due on a Friday or Wednesday. >80% of students who voted, voted for Friday yet the Professor appeared to have conveniently forgotten to tell the class that over 60% of the entire class needed to participate in the poll for it to be deemed valid. Something he decided to tell us after the fact. \r\n\r\nSadly there are many more examples of this kind of behavior which is simply unprofessional. \r\n\r\nI can't speak to how Prof Jebara might teach this class and whether it's any better. But my main advice would be to stay away from Prof Pe'er, simply because you'll waste more time clearing up any confusions than being able to dedicate time to the actual subject.\r\n\r\n ", 
      "workload_text": "Weekly assignments - mostly time-consuming due to the fact that they had mistakes in them\r\n2 Quizzes\r\nTake home mid-term\r\nIn-class final "
    }, 
    {
      "course_ids": [
        1921
      ], 
      "created": "Sun, 22 Jun 2014 02:09:32 GMT", 
      "id": 29645, 
      "professor_ids": [
        4057
      ], 
      "review_text": "Pros: I thought the assignments were good, but super time consuming and there was one every week, that will squeeze all the time out of you, but in a way you learn.\r\n\r\nMidterm fair and final was ok. Grading was reasonable.\r\n\r\nCons:\r\nThe worst classroom delivery I have ever seen in my entire life including school anywhere. Machine learning is no doubt fascinating but does require some foundation, but his classroom delivery is some of the worst I have ever seen, stammering, stuttering, is ok for CS 101, in a community college but totally unacceptable for a graduate level course in such a esteemed institution where the pay for professors is high and the fees are exorbitant.\r\n\r\nOn top of his inaudible and cringe inducing voice the material is complex but no doubt interesting. Professor needs to desperately address this and take a look at videos of himself on how to improve for future classes or otherwise just stay a researcher and not lecture.\r\n\r\nJust look at the how well Andrew Ng did his course in Coursera on Machine Learning.\r\n\r\nBecause of the above it felt a waste of the money we spend on course here. I think Jebara would be much better, understandable and you would feel your moneys worth.\r\n\r\nBut if you can bear and listen to him maybe the course is made for you.\r\n", 
      "workload_text": "Pretty tough but fair I thought for the scope of this course."
    },
    {
      "course_ids": [
        6038
      ], 
      "created": "Thu, 15 Dec 2011 03:26:19 GMT", 
      "id": 26585, 
      "professor_ids": [
        46
      ], 
      "review_text": "Nowick puts a lot of effort in this course and he is very disciplined, organized and nice person. However, be prepared to spend ample of time on projects and homeworks if you are planning to take this course. He doesn't make jokes in the class and not a very dynamic professor. Another negative side is, sometimes he will just introduce with a new topic briefly and then he will make suck a homework problem or project that you will need to learn everything by yourself to confront it. Having said that, he is very approachable and if you are lucky then you might get some good TAs to use some help from them. I would say, it's not a dead hard course and it's possible to get good grades if you work hard. Also, if you are good with logic design fundamentals then it will be smooth. \r\n\r\nIf anyone is interested to work on digital logic design/ hardware design, then I would recommend to take this course. ", 
      "workload_text": "5 homeworks, one final project, midterm, final (we had to do 2 projects and 4 homeworks).  "
    },
    {
      "course_ids": [ 
        4956
      ], 
      "created": "Tue, 04 Mar 2008 00:00:00 GMT", 
      "id": 21025, 
      "professor_ids": [
        375
      ], 
      "review_text": "Professor Gravano is tied for my favorite computer science professor.  He generally follows quality texts in his lectures and easily outperforms them in terms of the ease with which the material is presented.  His homeworks and exams are reasonably challenging but also completely fair -- don't worry if you get a 60% on an exam because it will come out in the curve.\r\n\r\nFurthermore, he always knows what he's talking about (more than some professors) as a result of an expansive knowledge of all aspects of databases thus far.  Now that I have gotten to know him better, it seems this stems from a more passionate interest in the subject than I've seen with others in their respective fields and it leads to a genuine desire to help students really master the material.\r\n\r\nI would definitely recommend taking the 6111 course if 4111 was at all interesting.", 
      "workload_text": "Reasonable workload, but group projects are easily do-\r\nable on one's own.  Homeworks can be tricky and are a fair extension of concepts in class.  Exams are generally pretty difficult, but it shows in the curve."
    },  
    {
      "course_ids": [
        4956
      ], 
      "created": "Wed, 04 Jun 2014 05:06:27 GMT", 
      "id": 29612, 
      "professor_ids": [
        375
      ], 
      "review_text": "This is an acceptable course, but I have mixed feelings about it. Let's establish some baseline. Dr. Gravano is undoubtedly a capable lecturer, able to explain concepts lucidly. He occasionally told jokes that made the classroom laugh (sometimes). I'm pretty certain he genuinely cares for his students. You will almost certainly learn a lot of new and useful stuff while taking this course. Overall, the course was planned and executed well.\r\n\r\nIf you are on the NLP or ML track \u2013 or you have a strong interest in search engines or big data, you should certainly take this course. This course definitely falls squarely in that domain (I mean hey, the free textbook was on the NLP part of Stanford's website...). I suspect the facts you will learn will be very relevant to you. However, if you are on the software track taking this course just because it has good reviews and fulfills a requirement, I'd suggest giving other courses stronger consideration. I don't exactly regret taking this class, but I think I could have chosen better.\r\n\r\nDr. Gravano curves the median to a B+ or A-. You may be thinking \u201cSure, I'll just score above average!\u201d but in a 90 something class full of smart people and easy assignments and tests, this is tricky to do \u2013 and there is a good component of luck involved.\r\n\r\nThe two tests which comprise 50% of your grade are themselves comprised of about 40% (each) true false questions. That's 20% of your grade roughly!  I felt that some of them were vaguely worded and it's pretty hit or miss if you remember the specific fact the question tests you on.\r\n\r\nYou'll either need a very good memory or be very planned and careful how you review the lectures, because you really could get tested on any bullet point in them. It's fair and doable, but that's not my style. I'd rather be tested on my ability to apply what I learned to solve problems than my ability to simply remember details about stuff I could recall by referring to the textbook or my notes (neither of which are allowed on the exams).  Oh, and the readings are often straight torture. Thankfully, I don't ever remember seeing a question that was in the reading but not the lecture. Much of the writing was by authors showing off their ability to encrypt simple concepts into Latex strings. Dr. Gravano's lectures blew the textbook out of the water.\r\n\r\nThe rest of the tests involve manually carrying out an algorithm he discussed in the lecture. The tests are easy, but I'm really not a fan of easy tests because mistakes will cost you a lot more. But that's obviously my opinion... you might think otherwise. \r\n\r\nThe HWs (java or python) certainly aren't trivial, but they aren't complicated either. The class generally averaged 9/10 on them with a very small standard deviation. I think I learned more about Python than I did about search algorithms or the subject matter of the class while doing the assignments. The first and last project implemented an algorithm that is probably only a step or two above the complexity of what you would encounter in an undergraduate data structures class at a reasonably competitive school. The second project mostly involved string formatting and learning how to use the API to google's open knowledge database. Personally, I found it pretty tedious. \r\n\r\nThis is not to say the assignments can be finished in two days. The API in the second project took forever to figure out, but I'd really rather invest my energy somewhere other than learning an API I won't use again in the foreseeable future. \r\n\r\nIn the grand scheme of things, this is not a bad class. Good for some people, less so for others. As you can tell by the other positive reviews, some folks do enjoy it. I see where they are coming from. Some of the things I don't like about the class are a matter of personal taste. I hazard to say you will likely get your tuition's worth on this class. If you are NLP or ML I think you almost certainly will. I'm just saying this class isn't for everyone.", 
      "workload_text": "The workload is medium-light. If you are taking some insanity classes like OS or cloud computing, this might be worth using to pad your credits to full time so you don't overstress yourself but still learn a few things -- but again, give other courses some consideration."
    },
    {
      "course_ids": [
        2767
      ], 
      "created": "Wed, 05 May 2004 00:00:00 GMT", 
      "id": 8557, 
      "professor_ids": [
        2060
      ], 
      "review_text": "Prof Reed is an excellent teacher.  He is well prepared for class and knows his material very well.  He is especially helpful during office hours.  His is not a hard professor to get a hold of because he constantly checks his e-mails (and replies to any questions one might have) and gives you his cell phone to call if necessary.  The course covers curves and surfaces.  He covers bezier and b-spline curves.  He also gives lots of examples in class and goes over it in detail.  There isn't any trick for the midterm and final and tells you what to study.  In all, I learned quite a bit about curves/\nsurfaces and feel that professor is a terrific teacher!", 
      "workload_text": "There are 4 programming assignments that have to be written in java.  He gives you the foundation for each assignment and all you have to implement is the algorithm.  The programming assignments were reasonable plus he gives you the psuedo-code and goes over some examples in class. "
    }, 
    {
      "course_ids": [
        2767
      ], 
      "created": "Thu, 30 Aug 2012 04:02:49 GMT", 
      "id": 27517, 
      "professor_ids": [
        2060
      ], 
      "review_text": "A really interesting computer graphics class with an amazing professor. In this class, we are given a glimpse to the realm of geometry modeling and geometry processing. As we live in the age that artists and product designers utilize 3D software such as Rhino or Maya or ZBrush, to digitally model their products before actualization into tangible objects, or to model cartoon characters that would appear in animated films, this class provides a great introduction into the technical aspects of how these 3D softwares work or should work. We study the fundamentals down to the level of so-called NURBS curves and surfaces, geometry processing performed on triangle meshes, and subdivision surfaces -- each with extensive mathematical backgrounds that consider how these structures give artists and manufacturers computational advantages such as desired degree of smoothness no matter what shape of the curves/surfaces are formed. It is a really fun experience to learn how design softwares are actually made of, and we also had a guest speaker from the industry to discuss how he actually uses the software to design real-world products.\r\n\r\nSo the class covers mainly three parts: the fundamentals of B-Spline curves and surfaces (as well as NURBS and Rational form), geometry processing (in particular, mesh data structures and mesh simplification algorithms), and Subdivision surfaces (e.g., Catmull-Clark). Each topic has extensive assignments associated with it to help us see how things are implemented. Some are really challenging, but Prof. Reed would give us extensions if needed. So we always have time to refine our assignments as possible. I'd say I'm very proud of the code I have done for this class, since they never look like a mess compared to other classes that I sometimes rush things through just to make it work. It's so organized, and beautiful.\r\n\r\nSpeaking of the professor, he is probably one of the best professors I've had for Computer Science class, personality-wise. He really took time to answer individual emails and discussion threads. He modified his assignments plan as the semester went, so we were given more challenging works since we did well as a class on the first few assignments, which helped me to learn even more. He was very approachable during his office hours or after class. So in a sense, you never feel isolated or helpless in this class. The only caveat is that his lectures sometimes may be a bit dry, but bare with them, and you will go a long way.\r\n\r\nSo, even with a slight interest in computer graphics in general, I'd recommend you to come and take the class, and you will be amazed how much you learn and have fun at the end.", 
      "workload_text": "3 Assignments, each covering main topic in the class, as mentioned above.\r\n\r\nIn actuality, it feels more like 6 assignments. The B-Spline one will be split into 3 parts, while the geometry processing is split into 2 parts. However, they aren't equal in length. Some will be shorter; others will be longer.\r\n\r\n1 Midterm. 1 Final. Totally reasonable and manageable."
    }
  ]
 
